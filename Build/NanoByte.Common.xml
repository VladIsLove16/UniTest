<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NanoByte.Common</name>
    </assembly>
    <members>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.TargetPlatformAttribute.#ctor(System.String)">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="M:System.Runtime.Versioning.SupportedOSPlatformAttribute.#ctor(System.String)">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="M:System.Runtime.Versioning.UnsupportedOSPlatformAttribute.#ctor(System.String)">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
             <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="M:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute.#ctor(System.String)">
             <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
             <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="M:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute.#ctor(System.String)">
             <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-<see langword="null"/> values.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have non-<see langword="null"/> values when returning with the specified return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value,
            the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">The field or property member that is promised to be not-<see langword="null"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value,
            the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:NanoByte.Common.Collections.ArrayBuffer`1">
            <summary>
            An array rented from the <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
            <param name="length">The desired array length.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayBuffer`1.#ctor(System.Int32)">
            <summary>
            An array rented from the <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
            <param name="length">The desired array length.</param>
        </member>
        <member name="P:NanoByte.Common.Collections.ArrayBuffer`1.Length">
            <summary>
            The requested length of the array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayBuffer`1.Dispose">
            <summary>
            Returns the array to the <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.ArrayBuffer`1.Array">
            <summary>
            The array.
            The length may be equal to or greater than the requested <see cref="P:NanoByte.Common.Collections.ArrayBuffer`1.Length"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:NanoByte.Common.Collections.ArrayBuffer`1.Dispose"/> has been called.</exception>
        </member>
        <member name="P:NanoByte.Common.Collections.ArrayBuffer`1.Segment">
            <summary>
            A view of the array with exactly the requested <see cref="P:NanoByte.Common.Collections.ArrayBuffer`1.Length"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:NanoByte.Common.Collections.ArrayBuffer`1.Dispose"/> has been called.</exception>
        </member>
        <member name="P:NanoByte.Common.Collections.ArrayBuffer`1.Span">
            <summary>
            A view of the array with exactly the requested <see cref="P:NanoByte.Common.Collections.ArrayBuffer`1.Length"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:NanoByte.Common.Collections.ArrayBuffer`1.Dispose"/> has been called.</exception>
        </member>
        <member name="T:NanoByte.Common.Collections.ArrayUtils">
            <summary>
            Provides array-related helper methods.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayUtils.Append``1(``0[],``0)">
            <summary>
            Appends an element to an array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayUtils.Prepend``1(``0[],``0)">
            <summary>
            Prepends an element to an array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayUtils.Concat``1(``0[],``0[])">
            <summary>
            Concatenates two array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayUtils.Concat``1(``0[][])">
            <summary>
            Concatenates multiple arrays.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayUtils.SequencedEquals``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two arrays contain the same elements in the same order.
            </summary>
            <param name="first">The first of the two collections to compare.</param>
            <param name="second">The first of the two collections to compare.</param>
            <param name="comparer">Controls how to compare elements; leave <c>null</c> for default comparer.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ArrayUtils.AsArray``1(System.ArraySegment{``0})">
            <summary>
            Converts an <see cref="T:System.ArraySegment`1"/> to an array. Avoids copying the underlying array if possible.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Collections.CollectionExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.ICollection`1"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.AddIfNew``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an element to the collection if it does not already <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> the element.
            </summary>
            <returns><c>true</c> if the element was added to the collection; <c>true</c> if the collection already contained the element.</returns>
            <remarks>This makes it possible to use a <see cref="T:System.Collections.Generic.ICollection`1"/> with semantics similar to a <see cref="T:System.Collections.Generic.HashSet`1"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.Add``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds multiple elements to the collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.Remove``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Removes multiple elements from the collection.
            </summary>
            <returns><c>true</c> if any elements where removed.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items from a <paramref name="collection"/> that match a specific <paramref name="condition"/>.
            </summary>
            <returns><c>true</c> if any elements where removed.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/>
        </member>
        <member name="T:NanoByte.Common.Collections.ConcurrentSet`1">
            <summary>
            Represents a thread-safe set of values.
            </summary>
            <typeparam name="T">The type of the values in the set.</typeparam>
            <remarks>This class is thread-safe.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.#ctor">
            <summary>
            Creates a new concurrent set.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new concurrent set.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the set concurrently</param>
            <param name="capacity">The initial number of elements that the set can contain.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new concurrent set.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing elements.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new concurrent set.
            </summary>
            <param name="collection">Elements to be copied to the new set.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new concurrent set.
            </summary>
            <param name="collection">Elements to be copied to the new set.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing elements.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new concurrent set.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the set concurrently</param>
            <param name="collection">Elements to be copied to the new set.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.ConcurrentSet`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Collections.ConcurrentSet`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Collections.ConcurrentSet`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Collections.CultureComparer">
            <summary>
            This compares two <see cref="T:System.Globalization.CultureInfo"/>s by alphabetically comparing their string representations.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.CultureComparer.Instance">
            <summary>A singleton instance of the comparer.</summary>
        </member>
        <member name="M:NanoByte.Common.Collections.CultureComparer.Compare(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Collections.DefaultComparer`1">
            <summary>
            Compares objects using their <see cref="T:System.IComparable"/> implementation.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.DefaultComparer`1.Instance">
            <summary>A singleton instance of the comparer.</summary>
        </member>
        <member name="T:NanoByte.Common.Collections.DictionaryExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.Dictionary`2"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.AddRange``4(System.Collections.Generic.IDictionary{``2,``3},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds multiple pairs to the dictionary in one go.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns an existing element with a specific key from a dictionary or the value type's default value if it is missing.
            </summary>
            <param name="dictionary">The dictionary to get an element from.</param>
            <param name="key">The key to look for in the <paramref name="dictionary"/>.</param>
            <returns>The existing element or the default value of <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Returns an existing element with a specific key from a dictionary or creates and adds a new element using a callback if it is missing.
            </summary>
            <param name="dictionary">The dictionary to get an element from or to add an element to.</param>
            <param name="key">The key to look for in the <paramref name="dictionary"/>.</param>
            <param name="valueFactory">A callback that provides the value to add to the <paramref name="dictionary"/> if the <paramref name="key"/> is not found.</param>
            <returns>The existing element or the newly created element.</returns>
            <remarks>No superfluous calls to <paramref name="valueFactory"/> occur. Not thread-safe!</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns an existing element with a specific key from a dictionary or creates and adds a new element using the default constructor if it is missing.
            </summary>
            <param name="dictionary">The dictionary to get an element from or to add an element to.</param>
            <param name="key">The key to look for in the <paramref name="dictionary"/>.</param>
            <returns>The existing element or the newly created element.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.GetOrAddAsync``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{System.Threading.Tasks.Task{``1}})">
            <summary>
            Returns an existing element with a specific key from a dictionary or creates and adds a new element using a callback if it is missing.
            </summary>
            <param name="dictionary">The dictionary to get an element from or to add an element to.</param>
            <param name="key">The key to look for in the <paramref name="dictionary"/>.</param>
            <param name="valueFactory">A callback that provides a task that provides the value to add to the <paramref name="dictionary"/> if the <paramref name="key"/> is not found.</param>
            <returns>The existing element or the newly created element.</returns>
            <remarks>Superfluous calls to <paramref name="valueFactory"/> may occur in case of read races. <see cref="M:System.IDisposable.Dispose"/> is called on superfluously created objects if implemented.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Attempts to add the specified key and value to the dictionary.
            </summary>
            <returns><c>true</c> if the key/value pair was added to the dictionary successfully; <c>false</c> false if the key already existed in the dictionary.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.ToMultiDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Builds a <see cref="T:NanoByte.Common.Collections.MultiDictionary`2"/> from an enumerable.
            </summary>
            <param name="elements">The elements to build the dictionary from.</param>
            <param name="keySelector">Selects the dictionary key from an input element.</param>
            <param name="valueSelector">Selects a dictionary value from an input element.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.UnsequencedEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Determines whether two dictionaries contain the same key-value pairs.
            </summary>
            <param name="first">The first of the two dictionaries to compare.</param>
            <param name="second">The first of the two dictionaries to compare.</param>
            <param name="valueComparer">Controls how to compare values; leave <c>null</c> for default comparer.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.GetUnsequencedHashCode``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Generates a hash code for the contents of the dictionary.
            </summary>
            <param name="dictionary">The dictionary to generate the hash for.</param>
            <param name="valueComparer">Controls how to compare values; leave <c>null</c> for default comparer.</param>
            <seealso cref="M:NanoByte.Common.Collections.DictionaryExtensions.UnsequencedEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})"/>
        </member>
        <member name="M:NanoByte.Common.Collections.DictionaryExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> like a tuple.
            </summary>
            <example>
            foreach (var (key, value) in dictionary)
            {/*...*/}
            </example>
        </member>
        <member name="T:NanoByte.Common.Collections.EnumerableExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.ContainsOrEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines whether the enumeration contains an element or is null.
            </summary>
            <param name="enumeration">The list to check.</param>
            <param name="element">The element to look for.</param>
            <remarks>Useful for lists that contain an OR-ed list of restrictions, where an empty list means no restrictions.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether one enumeration of elements contains any of the elements in another.
            </summary>
            <param name="first">The first of the two enumerations to compare.</param>
            <param name="second">The first of the two enumerations to compare.</param>
            <param name="comparer">Controls how to compare elements; leave <c>null</c> for default comparer.</param>
            <returns><c>true</c> if <paramref name="first"/> contains any element from <paramref name="second"/>. <c>false</c> if <paramref name="first"/> or <paramref name="second"/> is empty.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.SequencedEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two enumerations contain the same elements in the same order.
            </summary>
            <param name="first">The first of the two enumerations to compare.</param>
            <param name="second">The first of the two enumerations to compare.</param>
            <param name="comparer">Controls how to compare elements; leave <c>null</c> for default comparer.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.UnsequencedEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two enumerations contain the same elements disregarding the order they are in.
            </summary>
            <param name="first">The first of the two enumerations to compare.</param>
            <param name="second">The first of the two enumerations to compare.</param>
            <param name="comparer">Controls how to compare elements; leave <c>null</c> for default comparer.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.GetSequencedHashCode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Generates a hash code for the contents of the enumeration. Changing the elements' order will change the hash.
            </summary>
            <param name="enumeration">The enumeration to generate the hash for.</param>
            <param name="comparer">Controls how to compare elements; leave <c>null</c> for default comparer.</param>
            <seealso cref="M:NanoByte.Common.Collections.EnumerableExtensions.SequencedEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.GetUnsequencedHashCode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Generates a hash code for the contents of the enumeration. Changing the elements' order will not change the hash.
            </summary>
            <param name="enumeration">The enumeration to generate the hash for.</param>
            <param name="comparer">Controls how to compare elements; leave <c>null</c> for default comparer.</param>
            <seealso cref="M:NanoByte.Common.Collections.EnumerableExtensions.UnsequencedEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of elements to remove any that match the <paramref name="predicate"/>.
            The opposite of <see cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Filters a sequence of elements to remove any that are equal to <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a list of lists.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence of elements to remove any <c>null</c> values.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Determines the element in a list that maximizes a specified expression.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/>.</typeparam>
            <param name="enumeration">The elements to check.</param>
            <param name="expression">The expression to maximize.</param>
            <param name="comparer">Controls how to compare elements; leave <c>null</c> for default comparer.</param>
            <returns>The element that maximizes the expression.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="enumeration"/> contains no elements.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Determines the element in a list that minimizes a specified expression.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/>.</typeparam>
            <param name="enumeration">The elements to check.</param>
            <param name="expression">The expression to minimize.</param>
            <param name="comparer">Controls how to compare elements; leave <c>null</c> for default comparer.</param>
            <returns>The element that minimizes the expression.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="enumeration"/> contains no elements.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Filters a sequence of elements to remove any duplicates based on the equality of a key extracted from the elements.
            </summary>
            <param name="enumeration">The sequence of elements to filter.</param>
            <param name="keySelector">A function mapping elements to their respective equality keys.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.TrySelect``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``2})">
            <summary>
            Maps elements using a selector. Calls a handler for specific exceptions, skips the element and continues enumerating with the element.
            </summary>
            <typeparam name="TSource">The type of the input elements.</typeparam>
            <typeparam name="TResult">The type of the output elements.</typeparam>
            <typeparam name="TException">The type of exceptions to handle..</typeparam>
            <param name="source">The elements to map.</param>
            <param name="selector">The selector to execute for each <paramref name="source"/> element.</param>
            <param name="exceptionHandler">A Callback to be invoked when a <typeparamref name="TException"/> is caught.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.CloneElements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calls <see cref="M:NanoByte.Common.ICloneable`1.Clone"/> for every element in a enumeration and returns the results as a new enumeration.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs a topological sort of an object graph.
            </summary>
            <param name="nodes">The set of nodes to sort.</param>
            <param name="getDependencies">A function that retrieves all dependencies of a node.</param>
            <exception cref="T:System.IO.InvalidDataException">Cyclic dependency found.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.EnumerableExtensions.Permutate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates all possible permutations of a set of <paramref name="elements"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Collections.LanguageSet">
            <summary>
            A set of languages that can be serialized as a simple space-separated list of ISO language codes.
            </summary>
            <remarks>Uses Unix-style language codes with an underscore (_) separator.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.#ctor">
            <summary>
            Creates a new empty language collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.#ctor(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Creates a new language collection pre-filled with a set of languages.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.#ctor(System.String)">
            <summary>
            Deserializes a space-separated list of languages codes.
            </summary>
            <param name="value">A space-separated list of languages codes (in the same format as used by the LANG environment variable).</param>
            <remarks>Unknown language codes in <paramref name="value"/> are replaced with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> rather than raising an <see cref="T:System.ArgumentException"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.Add(System.String)">
            <summary>
            Adds a language identified by a string to the collection.
            </summary>
            <param name="langCode">The string identifying the language to add.</param>
            <returns><c>true</c> if the language could be added, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="langCode"/> is not a valid language code.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.ContainsAny(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo},System.Boolean)">
            <summary>
            Determines whether this language set contains any of a set of target languages.
            </summary>
            <param name="targets">The language set to match against.</param>
            <param name="ignoreCountry"><c>true</c> to compare only the two-letter language name; <c>false</c> to also compare the country code.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.LanguageSet.ToString">
            <summary>
            Serializes the list as a space-separated list of languages codes.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Collections.ListExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.List`1"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.ListExtensions.AddRange``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds multiple elements to the list.
            </summary>
            <remarks>This is a covariant wrapper for <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.ListExtensions.RemoveLast``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Removes the last n elements from the list.
            </summary>
            <param name="list">The list to remove the elements from.</param>
            <param name="number">The number of elements to remove.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.ListExtensions.AddOrReplace``2(System.Collections.Generic.List{``0},``0,System.Func{``0,``1})">
            <summary>
            Adds or replaces an element in a list using a key selector for comparison.
            </summary>
            <param name="list">The list to update.</param>
            <param name="element">The element to add or update.</param>
            <param name="keySelector">Used to map elements to keys for comparison</param>
            <returns></returns>
        </member>
        <member name="M:NanoByte.Common.Collections.ListExtensions.AddOrReplace``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Adds or replaces an element in a list.
            </summary>
            <param name="list">The list to update.</param>
            <param name="element">The element to add or update.</param>
            <returns></returns>
        </member>
        <member name="M:NanoByte.Common.Collections.ListExtensions.GetAddedElements``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Assumes two sorted lists. Determines which elements are present in <paramref name="newList"/> but not in <paramref name="oldList"/>.
            </summary>
            <param name="newList">The new list of elements; can be <c>null</c> (will be treated as an empty list).</param>
            <param name="oldList">The original list of elements; can be <c>null</c> (will be treated as an empty list).</param>
            <param name="comparer">An object that compares to elements to determine which one is bigger.</param>
            <returns>An list of elements that were added.</returns>
            <remarks>Elements that are present in <paramref name="oldList"/> but not in <paramref name="newList"/> are ignored. Elements that are equal for <see cref="M:System.IComparable`1.CompareTo(`0)"/> but have been otherwise modified will be added.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.ListExtensions.GetAddedElements``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Assumes two sorted lists. Determines which elements are present in <paramref name="newList"/> but not in <paramref name="oldList"/>.
            </summary>
            <param name="newList">The new list of elements; can be <c>null</c> (will be treated as an empty list).</param>
            <param name="oldList">The original list of elements; can be <c>null</c> (will be treated as an empty list).</param>
            <returns>An list of elements that were added.</returns>
            <remarks>Elements that are present in <paramref name="oldList"/> but not in <paramref name="newList"/> are ignored. Elements that are equal for <see cref="M:System.IComparable`1.CompareTo(`0)"/> but have been otherwise modified will be added.</remarks>
        </member>
        <member name="T:NanoByte.Common.Collections.LocalizableString">
            <summary>
            A string with an associated language that can be XML serialized to an element with an xml:lang tag.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.LocalizableString.DefaultLanguage">
            <summary>
            The default language: english with an invariant country.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.LocalizableString.Value">
            <summary>
            The actual string value to store.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.LocalizableString.Language">
            <summary>
            The language of the <see cref="P:NanoByte.Common.Collections.LocalizableString.Value"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.LocalizableString.LanguageString">
            <summary>Used for XML serialization.</summary>
            <seealso cref="P:NanoByte.Common.Collections.LocalizableString.Language"/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.Equals(NanoByte.Common.Collections.LocalizableString)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableString.Clone">
            <summary>
            Creates a plain copy of this string.
            </summary>
            <returns>The cloned string.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.LocalizableStringCollection">
            <summary>
            A collection of <see cref="T:NanoByte.Common.Collections.LocalizableString"/>s with language-search methods.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.Add(System.String,System.String)">
            <summary>
            Adds a new string with an associated language to the collection.
            </summary>
            <param name="language">The language of the <paramref name="value"/>.</param>
            <param name="value">The actual string value to store.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.Add(System.String)">
            <summary>
            Adds a new <c>en</c> string to the collection.
            </summary>
            <param name="value">The actual string value to store.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.ContainsExactLanguage(System.Globalization.CultureInfo)">
            <summary>
            Checks if the collection contains an entry exactly matching the specified language.
            </summary>
            <param name="language">The exact language to look for.</param>
            <returns><c>true</c> if an element with the specified language exists in the collection; <c>false</c> otherwise.</returns>
            <seealso cref="M:NanoByte.Common.Collections.LocalizableStringCollection.GetExactLanguage(System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.GetExactLanguage(System.Globalization.CultureInfo)">
            <summary>
            Returns the first string in the collection exactly matching the specified language.
            </summary>
            <param name="language">The exact language to look for.</param>
            <returns>The string value found in the collection; <c>null</c> if none was found.</returns>
            <seealso cref="M:NanoByte.Common.Collections.LocalizableStringCollection.ContainsExactLanguage(System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.GetBestLanguage(System.Globalization.CultureInfo)">
            <summary>
            Returns the best-fitting string in the collection for the specified language.
            </summary>
            <param name="language">The language to look for.</param>
            <returns>The best-fitting string value found in the collection; <c>null</c> if the collection is empty.</returns>
            <remarks>
            Language preferences in decreasing order:<br/>
            1. exact match<br/>
            2. same language with neutral culture<br/>
            3. en<br/>
            4. en-US<br/>
            5. first entry in collection
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.Set(System.Globalization.CultureInfo,System.String)">
            <summary>
            Adds a new string with an associated language to the collection. Preexisting entries with the same language are removed.
            </summary>
            <param name="language">The language of the <paramref name="value"/>.</param>
            <param name="value">The actual string value to store; <c>null</c> to remove existing entries.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.LocalizableStringCollection.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:NanoByte.Common.Collections.LocalizableStringCollection"/> (elements are cloned).
            </summary>
            <returns>The cloned <see cref="T:NanoByte.Common.Collections.LocalizableStringCollection"/>.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.MonitoredCollection`1">
            <summary>
            A collection that can easily be monitored for changes via events.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="E:NanoByte.Common.Collections.MonitoredCollection`1.Changed">
            <summary>
            Occurs whenever something in the collection changes.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Collections.MonitoredCollection`1.Added">
            <summary>
            Occurs when a new item has just been added to the collection.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Collections.MonitoredCollection`1.Removing">
            <summary>
            Occurs when an item is just about to be removed from the collection.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Collections.MonitoredCollection`1.Removed">
            <summary>
            Occurs when an item has just been removed from the collection.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.MonitoredCollection`1._dontRaiseEvents">
            <summary>Do not raise the <see cref="E:NanoByte.Common.Collections.MonitoredCollection`1.Added"/> and <see cref="E:NanoByte.Common.Collections.MonitoredCollection`1.Removed"/> events while <c>true</c>.
            <see cref="E:NanoByte.Common.Collections.MonitoredCollection`1.Removing"/> cannot be blocked!</summary>
        </member>
        <member name="P:NanoByte.Common.Collections.MonitoredCollection`1.MaxElements">
            <summary>
            The maximum number of elements; 0 for no limit.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.#ctor">
            <summary>
            Creates a new monitored collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.#ctor(System.Int32)">
            <summary>
            Creates a new monitored collection with an upper limit to the number of elements.
            </summary>
            <param name="maxElements">The maximum number of elements; 0 for no limit.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all the items in <paramref name="collection"/> to the collection that weren't already there.
            </summary>
            <param name="collection">A collection of items to add to the collection.</param>
            <remarks>
              <para>All events are raised en bloc after the items have been added.</para>
              <para>After calling this method this collection will contain a superset of the items in <paramref name="collection"/>, but not necessarily in the same order.</para>
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.MonitoredCollection`1.SetMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all the items in <paramref name="enumeration"/> to the collection that weren't already there and
            removes all items in the collection that are not in <paramref name="enumeration"/>.
            </summary>
            <param name="enumeration">An enumeration with items to add to the collection.</param>
            <remarks>
              <para>All events are raised en bloc after the items have been added.</para>
              <para>After calling this method this collection will contain the same items as <paramref name="enumeration"/>, but not necessarily in the same order.</para>
            </remarks>
        </member>
        <member name="T:NanoByte.Common.Collections.MultiDictionary`2">
            <summary>
            A dictionary that allows a key to reference multiple values.
            </summary>
            <typeparam name="TKey">The type to use as a key to identify entries in the dictionary.</typeparam>
            <typeparam name="TValue">The type to use as elements to store in the dictionary.</typeparam>
            <remarks>This structure internally uses hash maps, so most operations run in O(1).</remarks>
        </member>
        <member name="P:NanoByte.Common.Collections.MultiDictionary`2.Values">
            <summary>
            A collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.MultiDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.MultiDictionary`2.Remove(`0,`1)">
            <summary>
            Removes an element with the provided key and value from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value of the element to remove.</param>
            <returns><c>true</c> if any elements were successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:NanoByte.Common.Collections.MultiDictionary`2.Item(`0)">
            <summary>
            Gets a collection containing the values with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>A list of elements with the specified key. Empty list if the key was not found.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.NamedCollection`1">
            <summary>
            A keyed collection (pseudo-dictionary) of <see cref="T:NanoByte.Common.INamed"/> objects. Case-insensitive!
            </summary>
            <remarks>Elements are automatically maintained in an alphabetically sorted order. Suitable for XML serialization.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.#ctor">
            <summary>
            A keyed collection (pseudo-dictionary) of <see cref="T:NanoByte.Common.INamed"/> objects. Case-insensitive!
            </summary>
            <remarks>Elements are automatically maintained in an alphabetically sorted order. Suitable for XML serialization.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new named collection pre-filled with elements.
            </summary>
            <param name="elements">The elements to pre-fill the collection with. Must all have unique <see cref="P:NanoByte.Common.INamed.Name"/>s!</param>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.Rename(`0,System.String)">
            <summary>
            Renames an element in the list. Renaming an element in the list directly (without using this method) will prevent lookups from working properly!
            </summary>
            <param name="element">The element to rename.</param>
            <param name="newName">The new <see cref="P:NanoByte.Common.INamed.Name"/> for the element.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The <paramref name="element"/> is not in the collection.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="newName"/> is already taken by another element in the collection.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.Sort">
            <summary>
            Sorts all elements alphabetically by their <see cref="P:NanoByte.Common.INamed.Name"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.GetKeyForItem(`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.NamedCollection`1.Clone">
            <summary>
            Creates a shallow copy of this collection (elements are not cloned).
            </summary>
            <returns>The cloned collection.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.StackExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.Stack`1"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.StackExtensions.PopEach``1(System.Collections.Generic.Stack{``0},System.Action{``0})">
            <summary>
            <see cref="M:System.Collections.Generic.Stack`1.Pop"/>s each element of a <see cref="T:System.Collections.Generic.Stack`1"/> and performs an action with the resulting element.
            </summary>
            <param name="stack">The stack to pop elements from.</param>
            <param name="action">An action to be invoked for each element on the <paramref name="stack"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Collections.TransparentCache`2">
            <summary>
            Transparently caches retrieval requests, passed through to a callback on first request.
            </summary>
            <param name="retriever">The callback used to retrieve values not yet in the cache. Usually only called once per key. May be called multiple times in multi-threaded scenarios.</param>
            <typeparam name="TKey">The type of keys used to request values.</typeparam>
            <typeparam name="TValue">The type of values returned.</typeparam>
            <remarks>This class is thread-safe.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCache`2.#ctor(System.Func{`0,`1})">
            <summary>
            Transparently caches retrieval requests, passed through to a callback on first request.
            </summary>
            <param name="retriever">The callback used to retrieve values not yet in the cache. Usually only called once per key. May be called multiple times in multi-threaded scenarios.</param>
            <typeparam name="TKey">The type of keys used to request values.</typeparam>
            <typeparam name="TValue">The type of values returned.</typeparam>
            <remarks>This class is thread-safe.</remarks>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCache`2.Retrieve(`0)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Collections.TransparentCacheBase`2">
            <summary>
            Transparently caches retrieval requests, passed through to a template method on first request.
            </summary>
            <remarks>This class is thread-safe.</remarks>
            <typeparam name="TKey">The type of keys used to request values.</typeparam>
            <typeparam name="TValue">The type of values returned.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Collections.TransparentCacheBase`2.Item(`0)">
            <summary>
            Retrieves a value from the cache.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCacheBase`2.Retrieve(`0)">
            <summary>
            Template method used to retrieve values not yet in the cache. Usually only called once per key. May be called multiple times in multi-threaded scenarios.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCacheBase`2.Remove(`0)">
            <summary>
            Removes the the entry with the specified <paramref name="key"/> from the cache.
            </summary>
            <returns><c>true</c> if a matching entry was found and removed; <c>false</c> if no matching entry was in the cache.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.TransparentCacheBase`2.Clear">
            <summary>
            Removes all entries from the cache.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Collections.XmlDictionary">
            <summary>
            A string dictionary that supports data-binding and can be XML serialized.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.Add(System.String,System.String)">
            <summary>
            Adds a new value and links it to a key
            </summary>
            <param name="key">The key object</param>
            <param name="value">The value</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> already exists in the dictionary.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.InsertItem(System.Int32,NanoByte.Common.Collections.XmlDictionaryEntry)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.Remove(System.String)">
            <summary>
            Removes all values assigned to this key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns><c>true</c> if one or more elements were removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.ContainsKey(System.String)">
            <summary>
            Checks whether this collection contains a certain key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns><c>true</c> if the key was found.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.ContainsValue(System.String)">
            <summary>
            Checks whether this collection contains a certain value.
            </summary>
            <param name="value">The value to look for.</param>
            <returns><c>true</c> if the value was found.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.Sort">
            <summary>
            Sorts all entries alphabetically by their key.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.GetValue(System.String)">
            <summary>
            Returns the value associated to a specific key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The value associated to <paramref name="key"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> was not found in the collection.</exception>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.ToDictionary">
            <summary>
            Convert this <see cref="T:NanoByte.Common.Collections.XmlDictionary"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/> for better lookup-performance.
            </summary>
            <returns>A dictionary containing the same data as this collection.</returns>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionary.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:NanoByte.Common.Collections.XmlDictionary"/> (elements are cloned).
            </summary>
            <returns>The cloned <see cref="T:NanoByte.Common.Collections.XmlDictionary"/>.</returns>
        </member>
        <member name="T:NanoByte.Common.Collections.XmlDictionaryEntry">
            <summary>
            A key-value string pair for <see cref="T:NanoByte.Common.Collections.XmlDictionary"/>.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Collections.XmlDictionaryEntry.Parent">
            <summary>
            The collection that owns this entry - set to enable automatic duplicate detection!
            </summary>
        </member>
        <member name="P:NanoByte.Common.Collections.XmlDictionaryEntry.Key">
            <summary>
            The unique text key. Warning: If this is changed the <see cref="T:NanoByte.Common.Collections.XmlDictionary"/> must be rebuilt in order to update its internal hash table.
            </summary>
            <exception cref="T:System.InvalidOperationException">The new key value already exists in the <see cref="F:NanoByte.Common.Collections.XmlDictionaryEntry.Parent"/> dictionary.</exception>
        </member>
        <member name="P:NanoByte.Common.Collections.XmlDictionaryEntry.Value">
            <summary>
            The text value.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.#ctor">
            <summary>
            Base-constructor for XML serialization. Do not call manually!
            </summary>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.#ctor(System.String,System.String)">
            <summary>
            Creates a new entry for <see cref="T:NanoByte.Common.Collections.XmlDictionary"/>.
            </summary>
            <param name="key">The unique text key.</param>
            <param name="value">The text value.</param>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.Equals(NanoByte.Common.Collections.XmlDictionaryEntry)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Collections.XmlDictionaryEntry.Clone">
            <summary>
            Creates a plain copy of this entry.
            </summary>
            <returns>The cloned entry.</returns>
        </member>
        <member name="T:NanoByte.Common.Dispatch.AggregateDispatcher`1">
            <summary>
            Calls different action delegates based on the runtime types of objects.
            Calls multiple delegates when they all match a type (through inheritance).
            </summary>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Add``1(System.Action{``0})">
            <summary>
            Adds a dispatch delegate.
            </summary>
            <typeparam name="TSpecific">The specific type to call the delegate for. Matches all subtypes as well.</typeparam>
            <param name="action">The delegate to call.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Dispatch(`0)">
            <summary>
            Dispatches an element to all delegates matching the type. Set up with <see cref="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Add``1(System.Action{``0})"/> first.
            </summary>
            <param name="element">The element to be dispatched.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Dispatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dispatches for each element in a collection. Set up with <see cref="M:NanoByte.Common.Dispatch.AggregateDispatcher`1.Add``1(System.Action{``0})"/> first.
            </summary>
            <param name="elements">The elements to be dispatched.</param>
        </member>
        <member name="T:NanoByte.Common.Dispatch.AggregateDispatcher`2">
            <summary>
            Calls different function delegates (with enumerable return values) based on the runtime types of objects.
            Aggregates results when multiple delegates match a type (through inheritance).
            </summary>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
            <typeparam name="TResult">The enumerable return values of the delegates.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Add``1(System.Func{``0,System.Collections.Generic.IEnumerable{`1}})">
            <summary>
            Adds a dispatch delegate.
            </summary>
            <typeparam name="TSpecific">The specific type to call the delegate for. Matches all subtypes as well.</typeparam>
            <param name="function">The delegate to call.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Dispatch(`0)">
            <summary>
            Dispatches an element to all delegates matching the type. Set up with <see cref="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Add``1(System.Func{``0,System.Collections.Generic.IEnumerable{`1}})"/> first.
            </summary>
            <param name="element">The element to be dispatched.</param>
            <returns>The values returned by all matching delegates aggregated.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Dispatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dispatches for each element in a collection. Set up with <see cref="M:NanoByte.Common.Dispatch.AggregateDispatcher`2.Add``1(System.Func{``0,System.Collections.Generic.IEnumerable{`1}})"/> first.
            </summary>
            <param name="elements">The elements to be dispatched.</param>
            <returns>The values returned by the matching delegates.</returns>
        </member>
        <member name="T:NanoByte.Common.Dispatch.Bucketizer`1">
            <summary>
            Splits collections into multiple buckets based on predicate matching. The first matching predicate wins. Create with <see cref="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``1(System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
            <typeparam name="T">The common base type of all objects to be bucketized.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Splits collections into multiple buckets based on predicate matching. The first matching predicate wins. Create with <see cref="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``1(System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
            <typeparam name="T">The common base type of all objects to be bucketized.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`1.Add(System.Predicate{`0},System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds a new bucket rule.
            </summary>
            <param name="predicate">A condition to check elements against.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="predicate"/>.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`1.Run">
            <summary>
            Adds each element to the first bucket with a matching predicate (if any). Set up with <see cref="M:NanoByte.Common.Dispatch.Bucketizer`1.Add(System.Predicate{`0},System.Collections.Generic.ICollection{`0})"/> first.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.Bucketizer">
            <summary>
            Contains extension methods for creating bucketizers.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new predicate-matching bucketizer.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a new value-mapping bucketizer.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
            <param name="valueRetriever">A function to map elements to their according values used for bucketization.</param>
        </member>
        <member name="T:NanoByte.Common.Dispatch.Bucketizer`2">
            <summary>
            Splits collections into multiple buckets based on value-mapping. Create with <see cref="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
            <param name="valueRetriever">A function to map elements to their according values used for bucketization.</param>
            <typeparam name="TElement">The common base type of all objects to be bucketized.</typeparam>
            <typeparam name="TValue">The type of the values to be matched.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`1})">
            <summary>
            Splits collections into multiple buckets based on value-mapping. Create with <see cref="M:NanoByte.Common.Dispatch.Bucketizer.Bucketize``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
            <param name="elements">The elements to be bucketized.</param>
            <param name="valueRetriever">A function to map elements to their according values used for bucketization.</param>
            <typeparam name="TElement">The common base type of all objects to be bucketized.</typeparam>
            <typeparam name="TValue">The type of the values to be matched.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`2.Add(`1,System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds a new bucket rule.
            </summary>
            <param name="value">A value to compare with the result of the value retriever using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="value"/>.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Bucketizer`2.Run">
            <summary>
            Adds each element to the first bucket with a matching value (if any). Set up with <see cref="M:NanoByte.Common.Dispatch.Bucketizer`2.Add(`1,System.Collections.Generic.ICollection{`0})"/> first.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.BucketRule`1">
            <summary>
            A rule for <see cref="T:NanoByte.Common.Dispatch.Bucketizer`1"/>.
            </summary>
            <param name="predicate">A condition to check elements against.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="predicate"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.BucketRule`1.#ctor(System.Predicate{`0},System.Collections.Generic.ICollection{`0})">
            <summary>
            A rule for <see cref="T:NanoByte.Common.Dispatch.Bucketizer`1"/>.
            </summary>
            <param name="predicate">A condition to check elements against.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="predicate"/>.</param>
        </member>
        <member name="F:NanoByte.Common.Dispatch.BucketRule`1.Predicate">
            <summary>
            A condition to check elements against.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Dispatch.BucketRule`1.Bucket">
            <summary>
            The collection elements are added to if they match the <see cref="F:NanoByte.Common.Dispatch.BucketRule`1.Predicate"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.BucketRule`2">
            <summary>
            A rule for <see cref="T:NanoByte.Common.Dispatch.Bucketizer`2"/>.
            </summary>
            <param name="value">A value to compare with the result of the value retriever using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="value"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.BucketRule`2.#ctor(`1,System.Collections.Generic.ICollection{`0})">
            <summary>
            A rule for <see cref="T:NanoByte.Common.Dispatch.Bucketizer`2"/>.
            </summary>
            <param name="value">A value to compare with the result of the value retriever using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.</param>
            <param name="bucket">The collection elements are added to if they match the <paramref name="value"/>.</param>
        </member>
        <member name="F:NanoByte.Common.Dispatch.BucketRule`2.Value">
            <summary>
            A value to check elements against.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Dispatch.BucketRule`2.Bucket">
            <summary>
            The collection elements are added to if they match the <see cref="F:NanoByte.Common.Dispatch.BucketRule`2.Value"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.IChangeNotify`1">
            <summary>
            An object that can notify interested parties of changes in properties of interest.
            </summary>
            <typeparam name="TSender">The type of the class implementing this interface.</typeparam>
        </member>
        <member name="E:NanoByte.Common.Dispatch.IChangeNotify`1.Changed">
            <summary>
            Occurs when a property of interest has changed.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Dispatch.IChangeNotify`1.ChangedRebuild">
            <summary>
            Occurs when a property changed that requires visual representations to rebuilt from scratch.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.IMergeable`1">
            <summary>
            An equatable element that can be merged using 3-way merging.
            </summary>
            <typeparam name="T">The type the interface is being applied to.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Dispatch.IMergeable`1.MergeID">
            <summary>
            A unique identifier used when comparing for merging. Should always remain the same, even when the element is modified.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Dispatch.IMergeable`1.Timestamp">
            <summary>
            The time this element was last modified. This is used to determine precedence with sync conflicts.
            </summary>
            <remarks>This value should be ignored by clone and equality methods.</remarks>
        </member>
        <member name="T:NanoByte.Common.Dispatch.Merge">
            <summary>
            Provides utility methods for merging <see cref="T:System.Collections.Generic.ICollection`1"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.TwoWay``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Performs a 2-way merge on two collections. Changes required to <paramref name="theirs"/> to reflect <paramref name="mine"/> are emitted using callback delegates.
            </summary>
            <param name="theirs">The foreign list with changes that shall be merged in.</param>
            <param name="mine">The local list that shall be updated with foreign changes.</param>
            <param name="added">Called for every element that should be added to <paramref name="mine"/>.</param>
            <param name="removed">Called for every element that should be removed from <paramref name="mine"/>.</param>
            <remarks><paramref name="theirs"/> and <paramref name="mine"/> should use an internal hashmap for <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for better performance.</remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.TwoWay``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``1},System.Collections.Generic.ICollection{``2})">
            <summary>
            Performs a 2-way merge on two collections. Changes required to <paramref name="theirs"/> to reflect <paramref name="mine"/> are recorded using differential lists.
            </summary>
            <param name="theirs">The foreign list with changes that shall be merged in.</param>
            <param name="mine">The local list that shall be updated with foreign changes.</param>
            <param name="added">All elements that should be added to <paramref name="mine"/> are added to this list.</param>
            <param name="removed">All elements that should be removed from <paramref name="mine"/> are added to this list.</param>
            <remarks><paramref name="theirs"/> and <paramref name="mine"/> should use an internal hashmap for <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for better performance.</remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.ThreeWay``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Performs a 3-way merge on a set of collections. Changes between <paramref name="reference"/> and <paramref name="theirs"/> as they apply to <paramref name="mine"/> are emitted using callback delegates.
            </summary>
            <param name="reference">A common baseline from which both <paramref name="theirs"/> and <paramref name="mine"/> were modified.</param>
            <param name="theirs">The foreign list with changes that shall be merged in.</param>
            <param name="mine">The local list that shall be updated with foreign changes.</param>
            <param name="added">Called for every element that should be added to <paramref name="mine"/>.</param>
            <param name="removed">Called for every element that should be removed from <paramref name="mine"/>.</param>
            <remarks>Modified elements are handled by calling <paramref name="removed"/> for the old state and <paramref name="added"/> for the new state.</remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.ThreeWay``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``1},System.Collections.Generic.ICollection{``2})">
            <summary>
            Performs a 3-way merge on a set of collections. Changes between <paramref name="reference"/> and <paramref name="theirs"/> as they apply to <paramref name="mine"/> are recorded using differential lists.
            </summary>
            <param name="reference">A common baseline from which both <paramref name="theirs"/> and <paramref name="mine"/> were modified.</param>
            <param name="theirs">The foreign list with changes that shall be merged in.</param>
            <param name="mine">The local list that shall be updated with foreign changes.</param>
            <param name="added">All elements that should be added to <paramref name="mine"/> are added to this list.</param>
            <param name="removed">All elements that should be removed from <paramref name="mine"/> are added to this list.</param>
            <remarks>Modified elements are handled by adding to <paramref name="removed"/> for the old state and to <paramref name="added"/> for the new state.</remarks>
        </member>
        <member name="M:NanoByte.Common.Dispatch.Merge.FindMergeID``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Finds the first element in a list matching the specified <see cref="P:NanoByte.Common.Dispatch.IMergeable`1.MergeID"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Dispatch.ModelViewSync`2">
            <summary>
            Keeps two collections of different types in sync based on mapping rules.
            </summary>
            <typeparam name="TModel">The common base type of elements in the model.</typeparam>
            <typeparam name="TView">The common base type of representations in the view.</typeparam>
            <remarks>
            Useful for maintaining View representations for a set of mutable Model elements in a Model-View-Controller/Presenter design.
            Generated View representations will automatically be disposed on removal, if they implement <see cref="T:System.IDisposable"/>.
            </remarks>
            <param name="model">The Model that can change on its own accord.</param>
            <param name="view">The View that is to be automatically updated to reflect changes in the Model.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.#ctor(NanoByte.Common.Collections.MonitoredCollection{`0},System.Collections.Generic.ICollection{`1})">
            <summary>
            Keeps two collections of different types in sync based on mapping rules.
            </summary>
            <typeparam name="TModel">The common base type of elements in the model.</typeparam>
            <typeparam name="TView">The common base type of representations in the view.</typeparam>
            <remarks>
            Useful for maintaining View representations for a set of mutable Model elements in a Model-View-Controller/Presenter design.
            Generated View representations will automatically be disposed on removal, if they implement <see cref="T:System.IDisposable"/>.
            </remarks>
            <param name="model">The Model that can change on its own accord.</param>
            <param name="view">The View that is to be automatically updated to reflect changes in the Model.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.Initialize">
            <summary>
            Must be called once, after all relevant mapping rules have been registered.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Dispatch.ModelViewSync`2.Representations">
            <summary>
            All View representations created by the synchronizer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.Lookup(`1)">
            <summary>
            Looks up the Model element a View representation was created for.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There is no match.</exception>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.RegisterMultiple``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``0,``1})">
            <summary>
            Registers a mapping rule for a specific type of Model element.
            </summary>
            <param name="create">Callback that creates a set of 0..n View representations for a given Model element.</param>
            <param name="update">Callback that updates a specific View representation based on the state of a given Model element; can be <c>null</c>.</param>
        </member>
        <member name="M:NanoByte.Common.Dispatch.ModelViewSync`2.Register``2(System.Func{``0,``1},System.Action{``0,``1})">
            <summary>
            Registers a mapping rule for a specific type of Model element.
            </summary>
            <param name="create">Callback that creates a View representation for a given Model element.</param>
            <param name="update">Callback that updates a View representation based on the state of a given Model element; can be <c>null</c>.</param>
        </member>
        <member name="T:NanoByte.Common.Dispatch.PerTypeDispatcher`1">
            <summary>
            Calls different action delegates based on the runtime types of objects.
            Types must be exact matches. Inheritance is not considered.
            </summary>
            <param name="ignoreMissing"><c>true</c> to silently ignore dispatch attempts on unknown types; <c>false</c> to throw exceptions.</param>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.#ctor(System.Boolean)">
            <summary>
            Calls different action delegates based on the runtime types of objects.
            Types must be exact matches. Inheritance is not considered.
            </summary>
            <param name="ignoreMissing"><c>true</c> to silently ignore dispatch attempts on unknown types; <c>false</c> to throw exceptions.</param>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})">
            <summary>
            Adds a dispatch delegate.
            </summary>
            <typeparam name="TSpecific">The specific type to call the delegate for. Does not match subtypes</typeparam>
            <param name="action">The delegate to call.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Dispatch(`0)">
            <summary>
            Dispatches an element to the delegate matching the type. Set up with <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})"/> first.
            </summary>
            <param name="element">The element to be dispatched.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No delegate matching the <paramref name="element"/> type was <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})"/>ed.</exception>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Dispatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dispatches for each element in a collection. Set up with <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})"/> first.
            </summary>
            <param name="elements">The elements to be dispatched.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No delegate matching one of the element types was <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`1.Add``1(System.Action{``0})"/>ed.</exception>
        </member>
        <member name="T:NanoByte.Common.Dispatch.PerTypeDispatcher`2">
            <summary>
            Calls different function delegates (with return values) based on the runtime types of objects.
            Types must be exact matches. Inheritance is not considered.
            </summary>
            <typeparam name="TBase">The common base type of all objects to be dispatched.</typeparam>
            <typeparam name="TResult">The return value of the delegates.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})">
            <summary>
            Adds a dispatch delegate.
            </summary>
            <typeparam name="TSpecific">The specific type to call the delegate for. Does not match subtypes.</typeparam>
            <param name="function">The delegate to call.</param>
            <returns>The "this" pointer for use in a "Fluent API" style.</returns>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Dispatch(`0)">
            <summary>
            Dispatches an element to the delegate matching the type. Set up with <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})"/> first.
            </summary>
            <param name="element">The element to be dispatched.</param>
            <returns>The value returned by the matching delegate.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No delegate matching the <paramref name="element"/> type was <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})"/>ed.</exception>
        </member>
        <member name="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Dispatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dispatches for each element in a collection. Set up with <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})"/> first.
            </summary>
            <param name="elements">The elements to be dispatched.</param>
            <returns>The values returned by the matching delegates.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No delegate matching one of the element types was <see cref="M:NanoByte.Common.Dispatch.PerTypeDispatcher`2.Add``1(System.Func{``0,`1})"/>ed.</exception>
        </member>
        <member name="T:NanoByte.Common.Disposable">
            <summary>
            Invokes a callback on <see cref="M:NanoByte.Common.Disposable.Dispose"/>.
            </summary>
            <param name="callback">The callback to invoke on <see cref="M:NanoByte.Common.Disposable.Dispose"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Disposable.#ctor(System.Action)">
            <summary>
            Invokes a callback on <see cref="M:NanoByte.Common.Disposable.Dispose"/>.
            </summary>
            <param name="callback">The callback to invoke on <see cref="M:NanoByte.Common.Disposable.Dispose"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Disposable.Dispose">
            <summary>
            Invokes the callback.
            </summary>
        </member>
        <member name="T:NanoByte.Common.EncodingUtils">
            <summary>
            Helper methods for encoding strings, decoding byte arrays, calculating hashes, etc..
            </summary>
        </member>
        <member name="F:NanoByte.Common.EncodingUtils.Utf8">
            <summary>
            UTF-8 encoding without BOM (byte order marker).
            </summary>
        </member>
        <member name="M:NanoByte.Common.EncodingUtils.Hash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes the hash value of a string encoded as UTF-8.
            </summary>
            <param name="value">The string to hash.</param>
            <param name="algorithm">The hashing algorithm to use.</param>
            <returns>A hexadecimal string representation of the hash value.</returns>
        </member>
        <member name="M:NanoByte.Common.EncodingUtils.Base64Utf8Encode(System.String)">
            <summary>
            Encodes a string as UTF-8 in base64.
            </summary>
        </member>
        <member name="M:NanoByte.Common.EncodingUtils.Base64Utf8Decode(System.String)">
            <summary>
            Decodes a UTF-8 in base64 string.
            </summary>
            <exception cref="T:System.FormatException"><paramref name="value"/> is not a valid base 64 string.</exception>
        </member>
        <member name="M:NanoByte.Common.EncodingUtils.Base32Encode(System.Byte[])">
            <summary>
            Encodes a byte array in base32 without padding.
            </summary>
        </member>
        <member name="M:NanoByte.Common.EncodingUtils.Base16Encode(System.Byte[])">
            <summary>
            Encodes a byte array in base16 (hexadecimal).
            </summary>
        </member>
        <member name="M:NanoByte.Common.EncodingUtils.Base16Decode(System.String)">
            <summary>
            Decodes a base16 (hexadecimal) to a byte array.
            </summary>
        </member>
        <member name="T:NanoByte.Common.ExceptionUtils">
            <summary>
            Provides helper methods related to <see cref="T:System.Exception"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.GetMessageWithInner(System.Exception)">
            <summary>
            Recursively follows the <see cref="P:System.Exception.InnerException"/>s and combines all their <see cref="P:System.Exception.Message"/>s, removing duplicates.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.Rethrow(System.Exception)">
            <summary>
            Rethrows an <paramref name="exception"/> while preserving its original stack trace.
            </summary>
            <returns>This method never returns. You can "throw" the return value to satisfy the compiler's flow analysis if necessary.</returns>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.RethrowFirstInner(System.AggregateException)">
            <summary>
            Rethrows the first of the <see cref="P:System.AggregateException.InnerExceptions"/> and logs all others.
            </summary>
            <returns>This method never returns. You can "throw" the return value to satisfy the compiler's flow analysis if necessary.</returns>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.TryAny``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies an operation for the first possible element of a collection.
            If the operation succeeds the remaining elements are ignored. If the operation fails it is repeated for the next element.
            If the operation fails with <see cref="T:System.OperationCanceledException"/>s no further elements are tried.
            </summary>
            <typeparam name="T">The type of elements to operate on.</typeparam>
            <param name="elements">The elements to apply the action for.</param>
            <param name="action">The action to apply to an element.</param>
            <exception cref="T:System.Exception">The exception thrown by <paramref name="action"/> for the last element of <paramref name="elements"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.Retry``1(System.Action,System.Int32)">
            <summary>
            Executes a delegate and automatically retries it using exponential back-off if a specific type of exception was raised.
            </summary>
            <typeparam name="TException">The type of exception to trigger a retry.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="maxRetries">The maximum number of retries to attempt.</param>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.Retry``2(System.Func{``1},System.Int32)">
            <summary>
            Executes a delegate and automatically retries it using exponential back-off if a specific type of exception was raised.
            </summary>
            <typeparam name="TException">The type of exception to trigger a retry.</typeparam>
            <typeparam name="TResult">The type of result the <paramref name="function"/> produces.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="maxRetries">The maximum number of retries to attempt.</param>
            <returns>The result of <paramref name="function"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.TryAnyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Applies an operation for the first possible element of a collection.
            If the operation succeeds the remaining elements are ignored. If the operation fails it is repeated for the next element.
            </summary>
            <typeparam name="T">The type of elements to operate on.</typeparam>
            <param name="elements">The elements to apply the action for.</param>
            <param name="action">The action to apply to an element.</param>
            <exception cref="T:System.Exception">The exception thrown by <paramref name="action"/> for the last element of <paramref name="elements"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.RetryAsync``1(System.Func{System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Executes an asynchronous delegate and automatically retries it using exponential back-off if a specific type of exception was raised.
            </summary>
            <typeparam name="TException">The type of exception to trigger a retry.</typeparam>
            <param name="action">The action to execute.</param>
            <param name="maxRetries">The maximum number of retries to attempt.</param>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.Retry``2(System.Func{System.Threading.Tasks.Task{``1}},System.Int32)">
            <summary>
            Executes an asynchronous and automatically retries it using exponential back-off if a specific type of exception was raised.
            </summary>
            <typeparam name="TException">The type of exception to trigger a retry.</typeparam>
            <typeparam name="TResult">The type of result the <paramref name="function"/> produces.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="maxRetries">The maximum number of retries to attempt.</param>
            <returns>The result of <paramref name="function"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.ExceptionUtils.GetRandom">
            <summary>
            Uses process ID as a random seed to ensure we get different values than other competing processes on the same machine.
            </summary>
        </member>
        <member name="T:NanoByte.Common.ExitCodeException">
            <summary>
            Indicates that a <see cref="T:System.Diagnostics.Process"/> exited with an unexpected <see cref="P:System.Diagnostics.Process.ExitCode"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.ExitCodeException.ExitCode">
            <summary>
            The <see cref="P:System.Diagnostics.Process.ExitCode"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ExitCodeException.#ctor(System.Diagnostics.Process)">
            <summary>
            Creates a new exit code exception.
            </summary>
            <param name="process">The process that has exited.</param>
        </member>
        <member name="M:NanoByte.Common.ExitCodeException.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new exit code exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="exitCode">The <see cref="P:System.Diagnostics.Process.ExitCode"/>.</param>
        </member>
        <member name="M:NanoByte.Common.ExitCodeException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.ExitCodeException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.ExitCodeException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.ExitCodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes an exception.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ExitCodeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.ICloneable`1">
            <summary>
            Supports cloning.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ICloneable`1.Clone">
            <summary>Creates a new clone of this instance.</summary>
        </member>
        <member name="T:NanoByte.Common.IHighlightColor">
            <summary>
            An object that can be highlighted with a specific color in graphical representations.
            </summary>
        </member>
        <member name="P:NanoByte.Common.IHighlightColor.HighlightColor">
            <summary>
            The color to highlight this object with in graphical representations. <see cref="F:System.Drawing.Color.Empty"/> for no highlighting.
            </summary>
        </member>
        <member name="T:NanoByte.Common.INamed">
            <summary>
            An entity that has a unique name that can be used for identification in lists and trees.
            </summary>
            <see cref="T:NanoByte.Common.Collections.NamedCollection`1"/>
        </member>
        <member name="P:NanoByte.Common.INamed.Name">
            <summary>
            A unique name for the object.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Named">
            <summary>
            Static companion for <see cref="T:NanoByte.Common.INamed"/>.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Named.TreeSeparator">
            <summary>
            The default separator to use in <see cref="P:NanoByte.Common.INamed.Name"/> for tree hierarchies.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Info.AppInfo">
            <summary>
            Wraps information about an application in a serializer-friendly format.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Name">
            <summary>
            The name of the application.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.ProductName">
            <summary>
            The name of the product the application is a part of.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Version">
            <summary>
            The version number of the application.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.NameVersion">
            <summary>
            The <see cref="P:NanoByte.Common.Info.AppInfo.Name"/> and <see cref="P:NanoByte.Common.Info.AppInfo.Version"/> combined.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Copyright">
            <summary>
            The copyright information for the application.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Description">
            <summary>
            A description of the application.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Arguments">
            <summary>
            The command-line arguments the application was started with.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.Current">
            <summary>
            Information about the currently running application (looks at the entry assembly).
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.AppInfo.CurrentLibrary">
            <summary>
            Information about the currently running library (looks at the calling assembly).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Info.AppInfo.Load(System.Reflection.Assembly)">
            <summary>
            Loads application information for a specific <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Info.ExceptionInfo">
            <summary>
            Wraps information about an exception in a serializer-friendly format.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.ExceptionType">
            <summary>
            The type of exception.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.Message">
            <summary>
            The message describing the exception.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.Source">
            <summary>
            The name of the application or the object that causes the error.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.StackTrace">
            <summary>
            A string representation of the frames on the call stack at the time the exception was thrown.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.ExceptionInfo.InnerException">
            <summary>
            Information about the exception that originally caused the exception being described here.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Info.ExceptionInfo.#ctor">
            <summary>
            Base-constructor for XML serialization. Do not call manually!
            </summary>
        </member>
        <member name="M:NanoByte.Common.Info.ExceptionInfo.#ctor(System.Exception)">
            <summary>
            Creates an exception information based on an exception.
            </summary>
            <param name="ex">The exception whose information to extract.</param>
        </member>
        <member name="T:NanoByte.Common.Info.OSInfo">
            <summary>
            Wraps information about an operating system in a serializer-friendly format.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.Platform">
            <summary>
            The operating system platform (e.g. Windows NT).
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.OSInfo.OSArchitecture">
            <summary>
            The processor architecture of the operating system.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.OSInfo.ProcessArchitecture">
            <summary>
            The (potentially emulated) processor architecture of the running process.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.Version">
            <summary>
            The version of the operating system (e.g. 6.0 for Vista).
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.ServicePack">
            <summary>
            The service pack level (e.g. "Service Pack 1").
            </summary>
        </member>
        <member name="F:NanoByte.Common.Info.OSInfo.FrameworkVersion">
            <summary>
            The version of the operating system (e.g. 6.0 for Vista).
            </summary>
        </member>
        <member name="P:NanoByte.Common.Info.OSInfo.Current">
            <summary>
            Information about the current operating system.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Log">
            <summary>
            A simple logging system. Writes to an in-memory buffer and a plain text file.
            Allows additional handlers to be registered (e.g., for console or GUI output).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.GetBuffer">
            <summary>
            Returns the log lines collected in the in-memory buffer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.AddToBuffer(System.String)">
            <summary>
            Adds a line to the in-memory log buffer.
            Should only be called when <see cref="F:NanoByte.Common.Log._lock"/> is held.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.ResetBuffer">
            <summary>
            Resets the in-memory log buffer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Debug(System.String,System.Exception)">
            <summary>
            Writes information to help developers diagnose problems to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Debug(System.Exception)">
            <summary>
            Writes information to help developers diagnose problems to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Info(System.String,System.Exception)">
            <summary>
            Writes nice-to-know information to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Info(System.Exception)">
            <summary>
            Writes nice-to-know information to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Warn(System.String,System.Exception)">
            <summary>
            Writes a warning that doesn't have to be acted upon immediately to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Warn(System.Exception)">
            <summary>
            Writes a warning that doesn't have to be acted upon immediately to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Error(System.String,System.Exception)">
            <summary>
            Writes a critical error that should be attended to to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.Error(System.Exception)">
            <summary>
            Writes a critical error that should be attended to to the log.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.AddEntry(NanoByte.Common.LogSeverity,System.String,System.Exception)">
            <summary>
            Adds a log entry.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.GetLogLine(NanoByte.Common.LogSeverity,System.String,System.Exception)">
            <summary>
            Builds a log line containing timestamp, severity, message and exception information.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Log.ReadLastErrorFrom(System.String,System.Nullable{System.Int32})">
            <summary>
            Tries to read the last error log line written by another process.
            </summary>
            <param name="appName">The name of the app to get a log line for.</param>
            <param name="processId">The process ID to get a log line for. Leave <c>null</c> to get for any process ID.</param>
        </member>
        <member name="M:NanoByte.Common.Log.WriteToFile(System.String)">
            <summary>
            Appends a line to the log file.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Log.Handler">
            <summary>
            Invoked when a new entry is added to the log.
            Only the newest (last) registered handler is invoked.
            <see cref="T:System.Console"/> output is used as a fallback if no handlers are registered.
            </summary>
        </member>
        <member name="T:NanoByte.Common.LogEntryEventHandler">
            <summary>
            Describes an event relating to an entry in the <see cref="T:NanoByte.Common.Log"/>.
            </summary>
            <param name="severity">The type/severity of the entry.</param>
            <param name="message">The message of the entry.</param>
            <param name="exception">An optional exception associated with the entry.</param>
            <seealso cref="E:NanoByte.Common.Log.Handler"/>
        </member>
        <member name="T:NanoByte.Common.LogSeverity">
            <summary>
            Describes how severe/important a <see cref="T:NanoByte.Common.Log"/> entry is.
            </summary>
            <seealso cref="T:NanoByte.Common.LogEntryEventHandler"/>
        </member>
        <member name="F:NanoByte.Common.LogSeverity.Debug">
            <summary>Information to help developers diagnose problems.</summary>
        </member>
        <member name="F:NanoByte.Common.LogSeverity.Info">
            <summary>A nice-to-know piece of information.</summary>
        </member>
        <member name="F:NanoByte.Common.LogSeverity.Warn">
            <summary>A warning that doesn't have to be acted upon immediately.</summary>
        </member>
        <member name="F:NanoByte.Common.LogSeverity.Error">
            <summary>A critical error that should be attended to.</summary>
        </member>
        <member name="T:NanoByte.Common.MathUtils">
            <summary>
            Provides math-related utility functions.
            </summary>
        </member>
        <member name="M:NanoByte.Common.MathUtils.Modulo(System.Int32,System.Int32)">
            <summary>
            Calculates the mathematical modulo of a value.
            </summary>
        </member>
        <member name="M:NanoByte.Common.MathUtils.Modulo(System.Int64,System.Int64)">
            <summary>
            Calculates the mathematical modulo of a value.
            </summary>
        </member>
        <member name="M:NanoByte.Common.MathUtils.EqualsTolerance(System.Single,System.Single,System.Single)">
            <summary>
            Compares two floating-point values for equality, allowing for a certain <paramref name="tolerance"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.MathUtils.EqualsTolerance(System.Double,System.Double,System.Double)">
            <summary>
            Compares two floating-point values for equality, allowing for a certain <paramref name="tolerance"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.MathUtils.MultiplyAndRound(System.Drawing.Size,System.Drawing.SizeF)">
            <summary>
            Multiplies a <see cref="T:System.Drawing.Size"/> with a <see cref="T:System.Drawing.SizeF"/> and then rounds the components to integer values.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Native.AppMutex">
            <summary>
            Provides a cross-process object allowing easy detection of application instances (e.g., for use by installers and update tools).
            No-op on non-Windows platforms.
            </summary>
            <remarks>Use <see cref="T:System.Threading.Mutex"/> or <see cref="T:NanoByte.Common.Threading.MutexLock"/> instead for synchronizing access to shared resources.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.AppMutex.Create(System.String)">
            <summary>
            Creates or opens a mutex to signal that an application is running.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <returns>The handle for the mutex. Can be used to close it again. Will automatically be released once the process terminates.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.AppMutex.Dispose">
            <summary>
            Closes the mutex handle, allowing it to be released if no other instances are running.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.AppMutex.Probe(System.String)">
            <summary>
            Checks whether a specific mutex exists (local or global) without opening a lasting handle.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <returns><c>true</c> if an existing mutex was found; <c>false</c> if none existed.</returns>
        </member>
        <member name="T:NanoByte.Common.Native.CompilerUtils">
            <summary>
            Provides helper methods for compiling .NET code at runtime.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.CompilerUtils.CompileCSharp(System.CodeDom.Compiler.CompilerParameters,System.String,System.String)">
            <summary>
            Compiles a string of C# code using the newest C# compiler available on the system.
            </summary>
            <param name="compilerParameters">The compiler configuration (e.g. output file path).</param>
            <param name="code">The C# code to compile.</param>
            <param name="manifest">The contents of the Win32 manifest to apply to the output file. Will only be applied if a C# 3.0 or newer compiler is available.</param>
        </member>
        <member name="M:NanoByte.Common.Native.CompilerUtils.GetCSharpCompiler(System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Detects the best possible C# compiler version and instantiates it.
            </summary>
            <param name="compilerParameters">The compiler parameters to be used. Version-specific options may be set.</param>
            <param name="manifestFilePath">The path of an assembly file to be added to compiled binaries if possible.</param>
        </member>
        <member name="T:NanoByte.Common.Native.CygwinUtils">
            <summary>
            Provides access to Cygwin-related filesystem features. Cygwin provides Unix-like functionality on Windows systems.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.CygwinUtils.SymlinkCookie">
            <summary>
            Byte sequence used to mark the start of a Cygwin symlink file.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.CygwinUtils.IsSymlink(System.String)">
            <summary>
            Checks whether a file is a Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks).
            </summary>
            <param name="path">The path of the file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.CygwinUtils.IsSymlink(System.String,System.String@)">
            <summary>
            Checks whether a file is a Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks).
            </summary>
            <param name="path">The path of the file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <returns><c>true</c> if <paramref name="path"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.CygwinUtils.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a new Cygwin symbolic link (http://cygwin.com/cygwin-ug-net/using.html#pathnames-symlinks).
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The path of the existing file or directory to point to (relative to <paramref name="sourcePath"/>).</param>
            <exception cref="T:System.IO.IOException">There was an IO problem writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file was denied.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.IProcessLauncher">
            <summary>
            Runs an external process.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.IProcessLauncher.Start(System.String[])">
            <summary>
            Starts the process and runs it in parallel with this one.
            </summary>
            <param name="arguments">Command-line arguments to launch the process with.</param>
            <returns>The newly launched process.</returns>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.IProcessLauncher.Run(System.String[])">
            <summary>
            Runs the process and waits for it to exit.
            </summary>
            <param name="arguments">Command-line arguments to launch the process with.</param>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation.</exception>
            <exception cref="T:NanoByte.Common.ExitCodeException">The process exited with a non-zero <see cref="P:System.Diagnostics.Process.ExitCode"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.IProcessLauncher.RunAndCapture(System.Action{System.IO.StreamWriter},System.String[])">
            <summary>
            Runs the process, captures its stdout and stderr output and waits for it to exit.
            </summary>
            <param name="onStartup">A callback for writing to the process' stdin right after startup.</param>
            <param name="arguments">Command-line arguments to launch the process with.</param>
            <returns>The process' complete stdout output.</returns>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation.</exception>
            <exception cref="T:NanoByte.Common.ExitCodeException">The process exited with a non-zero <see cref="P:System.Diagnostics.Process.ExitCode"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.IProcessLauncher.GetStartInfo(System.String[])">
            <summary>
            Creates the <see cref="T:System.Diagnostics.ProcessStartInfo"/> used to launch the process.
            </summary>
            <param name="arguments">The arguments to pass to the process at startup.</param>
        </member>
        <member name="T:NanoByte.Common.Native.OSUtils">
            <summary>
            Provides helper methods related to operating system functionality across multiple platforms.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.OSUtils.ExpandVariables(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Expands/substitutes any Unix-style environment variables in the string.
            </summary>
            <param name="value">The string containing variables to be expanded.</param>
            <param name="variables">The list of variables available for expansion.</param>
            <remarks>Supports default values for unset variables (<c>${VAR-default}</c>) and for unset or empty variables (<c>${VAR:-default}</c>).</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.OSUtils.ExpandVariables(System.String,System.Collections.Specialized.StringDictionary)">
            <summary>
            Expands/substitutes any Unix-style environment variables in the string.
            </summary>
            <param name="value">The string containing variables to be expanded.</param>
            <param name="variables">The list of variables available for expansion.</param>
            <remarks>Supports default values for unset variables (<c>${VAR-default}</c>) and for unset or empty variables (<c>${VAR:-default}</c>).</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.OSUtils.PreventIdle(System.String)">
            <summary>
            Asks the operating system not to enter idle mode.
            Useful to avoid standby or hibernation during a long-running task.
            </summary>
            <param name="reason">Why the system should not enter idle mode.</param>
            <returns>Call <see cref="M:System.IDisposable.Dispose"/> to restore the original state.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.OSUtils.PreventDisplayOff(System.String)">
            <summary>
            Asks the operating system not to turn off the display.
            </summary>
            <param name="reason">Why the display should not be turned off.</param>
            <returns>Call <see cref="M:System.IDisposable.Dispose"/> to restore the original state.</returns>
        </member>
        <member name="T:NanoByte.Common.Native.ProcessLauncher">
            <summary>
            Runs a child process.
            </summary>
            <param name="fileName">The file name of the executable to run.</param>
            <param name="arguments">The default arguments to always pass to the executable.</param>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncher.#ctor(System.String,System.String)">
            <summary>
            Runs a child process.
            </summary>
            <param name="fileName">The file name of the executable to run.</param>
            <param name="arguments">The default arguments to always pass to the executable.</param>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncher.#ctor(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Creates a new process launcher.
            </summary>
            <param name="startInfo">Extracts <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"/> and <see cref="P:System.Diagnostics.ProcessStartInfo.Arguments"/>. Other options are ignored.</param>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncher.Start(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncher.Run(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncher.RunAndCapture(System.Action{System.IO.StreamWriter},System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncher.GetStartInfo(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncher.HandleExitCode(System.Diagnostics.Process,System.String)">
            <summary>
            Hook for handling exit codes.
            </summary>
            <param name="process">The process that has exited.</param>
            <param name="message">An optional error message.</param>
            <exception cref="T:NanoByte.Common.ExitCodeException"><see cref="P:System.Diagnostics.Process.ExitCode"/> had a non-zero value.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncher.OnStderr(System.String,System.IO.StreamWriter)">
            <summary>
            Hook for handling stderr messages from the process.
            </summary>
            <param name="line">The line written to stderr.</param>
            <param name="stdin">The stream writer providing access to stdin.</param>
        </member>
        <member name="T:NanoByte.Common.Native.ProcessLauncherExtensions">
            <summary>
            Extension methods for <see cref="T:NanoByte.Common.Native.IProcessLauncher"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncherExtensions.RunAndCapture(NanoByte.Common.Native.IProcessLauncher,System.String[])">
            <summary>
            Runs the sub process, captures its stdout and stderr output and waits for it to exit.
            </summary>
            <param name="processLauncher">The sub process.</param>
            <param name="arguments">Command-line arguments to launch the process with.</param>
            <returns>The process' complete stdout output.</returns>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation.</exception>
            <exception cref="T:NanoByte.Common.ExitCodeException">The process exited with a non-zero <see cref="P:System.Diagnostics.Process.ExitCode"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.ProcessLauncherExtensions.RunAndCapture(NanoByte.Common.Native.IProcessLauncher,System.ArraySegment{System.Byte},System.String[])">
            <summary>
            Runs the sub process, captures its stdout and stderr output and waits for it to exit.
            </summary>
            <param name="processLauncher">The sub process.</param>
            <param name="stdinData">Data to the process' stdin right after startup.</param>
            <param name="arguments">Command-line arguments to launch the process with.</param>
            <returns>The process' complete stdout output.</returns>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation.</exception>
            <exception cref="T:NanoByte.Common.ExitCodeException">The process exited with a non-zero <see cref="P:System.Diagnostics.Process.ExitCode"/>.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.RegistryUtils">
            <summary>
            Provides utility and extension methods for <see cref="T:Microsoft.Win32.Registry"/> access.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.GetDword(System.String,System.String,System.Int32)">
            <summary>
            Reads a DWORD value from the registry.
            </summary>
            <param name="keyName">The full path of the key to read from.</param>
            <param name="valueName">The name of the value to read.</param>
            <param name="defaultValue">The default value to return if the key or value does not exist.</param>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.SetDword(System.String,System.String,System.Int32)">
            <summary>
            Sets a DWORD value in the registry.
            </summary>
            <param name="keyName">The full path of the key to write to.</param>
            <param name="valueName">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.GetString(System.String,System.String,System.String)">
            <summary>
            Reads a string value from the registry.
            </summary>
            <param name="keyName">The full path of the key to read from.</param>
            <param name="valueName">The name of the value to read.</param>
            <param name="defaultValue">The default value to return if the key or value does not exist.</param>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string value in the registry.
            </summary>
            <param name="keyName">The full path of the key to write to.</param>
            <param name="valueName">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.GetSoftwareString(System.String,System.String,System.Boolean)">
            <summary>
            Reads a string value from one of the SOFTWARE keys in the registry.
            </summary>
            <param name="subkeyName">The path of the key relative to the SOFTWARE key.</param>
            <param name="valueName">The name of the value to read.</param>
            <param name="machineWide"><c>true</c> to read from HKLM/SOFTWARE (and HKLM/SOFTWARE/Wow6432Node if on 64-bit Windows); <c>false</c> to read from HCKU/SOFTWARE.</param>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.SetSoftwareString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets a string value in one or more of the SOFTWARE keys in the registry.
            </summary>
            <param name="subkeyName">The path of the key relative to the SOFTWARE key.</param>
            <param name="valueName">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="machineWide"><c>true</c> to write to HKLM/SOFTWARE (and HKLM/SOFTWARE/Wow6432Node if on 64-bit Windows); <c>false</c> to write to HCKU/SOFTWARE.</param>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.DeleteSoftwareValue(System.String,System.String,System.Boolean)">
            <summary>
            Deletes a value from one of the SOFTWARE keys in the registry.
            </summary>
            <remarks>Does not throw an exception for missing keys or values.</remarks>
            <param name="subkeyName">The path of the key relative to the SOFTWARE key.</param>
            <param name="valueName">The name of the value to delete.</param>
            <param name="machineWide"><c>true</c> to delete from HKLM/SOFTWARE (and HKLM/SOFTWARE/Wow6432Node if on 64-bit Windows); <c>false</c> to delete from HCKU/SOFTWARE.</param>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.GetValueNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves the names of all values within a specific subkey of a registry root.
            </summary>
            <param name="key">The root key to look within.</param>
            <param name="subkeyName">The path of the subkey below <paramref name="key"/>.</param>
            <returns>A list of value names; an empty array if the key does not exist.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.GetSubKeyNames(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves the names of all subkeys within a specific subkey of a registry root.
            </summary>
            <param name="key">The root key to look within.</param>
            <param name="subkeyName">The path of the subkey below <paramref name="key"/>.</param>
            <returns>A list of key names; an empty array if the key does not exist.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.TryOpenSubKey(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Trys to open a registry key with retries and mapping <see cref="T:System.Security.SecurityException"/>s to <see cref="T:System.UnauthorizedAccessException"/>s.
            </summary>
            <param name="key">The key to open a subkey in.</param>
            <param name="subkeyName">The name of the subkey to open.</param>
            <param name="writable"><c>true</c> for write-access to the key.</param>
            <returns>The opened subkey; <c>null</c> if it does not exist.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The requested access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.OpenSubKeyChecked(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Opens a registry key with retries and mapping <see cref="T:System.Security.SecurityException"/>s to <see cref="T:System.UnauthorizedAccessException"/>s.
            </summary>
            <param name="key">The key to open a subkey in.</param>
            <param name="subkeyName">The name of the subkey to open.</param>
            <param name="writable"><c>true</c> for write-access to the key.</param>
            <returns>The opened subkey.</returns>
            <exception cref="T:System.IO.IOException">The key does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The requested access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.CreateSubKeyChecked(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Creates a registry key with retries and mapping <see cref="T:System.Security.SecurityException"/>s to <see cref="T:System.UnauthorizedAccessException"/>s.
            </summary>
            <param name="key">The key to create a subkey in.</param>
            <param name="subkeyName">The name of the subkey to create.</param>
            <returns>The newly created subkey.</returns>
            <exception cref="T:System.IO.IOException">Failed to create the key.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the key is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.TryDeleteSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Recursively deletes a registry key. Does not throw exceptions.
            </summary>
            <param name="key">The key to containing the subkey to delete.</param>
            <param name="subkeyName">The name of the subkey to delete.</param>
            <returns><c>true</c> if the key was deleted or didn't exist; <c>false</c> if the deletion failed.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.RegistryUtils.OpenHklmKey(System.String,System.Boolean@)">
            <summary>
            Opens a HKEY_LOCAL_MACHINE key in the registry for reading, first trying to find the 64-bit version of it, then falling back to the 32-bit version.
            </summary>
            <param name="subkeyName">The path to the key below HKEY_LOCAL_MACHINE.</param>
            <param name="x64">Indicates whether a 64-bit key was opened.</param>
            <returns>The opened registry key.</returns>
            <exception cref="T:System.IO.IOException">The key does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the key is not permitted.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.UnixUtils">
            <summary>
            Provides helper methods for Unix-specific features of the Mono library.
            </summary>
            <remarks>
            This class has a dependency on <c>Mono.Posix</c>.
            Make sure to check <see cref="P:NanoByte.Common.Native.UnixUtils.IsUnix"/> before calling any methods in this class to avoid exceptions.
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.IsUnix">
            <summary>
            <c>true</c> if the current operating system is a Unixoid system (e.g. Linux or MacOS X).
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.IsLinux">
            <summary>
            <c>true</c> if the current operating system is Linux.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.IsFreeBSD">
            <summary>
            <c>true</c> if the current operating system is FreeBSD.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.IsMacOSX">
            <summary>
            <c>true</c> if the current operating system is MacOS X.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.HasGui">
            <summary>
            <c>true</c> if there is an X Server running or the current operating system is MacOS X.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.OSName">
            <summary>
            The operating system name as reported by the "uname" system call.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.UnixUtils.CpuType">
            <summary>
            The CPU type as reported by the "uname" system call (after applying some normalization).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a new Unix symbolic link to a file or directory.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The path of the existing file or directory to point to (relative to <paramref name="sourcePath"/>).</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.CreateHardlink(System.String,System.String)">
            <summary>
            Creates a new Unix hard link between two files.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The absolute path of the existing file to point to.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.GetInode(System.String)">
            <summary>
            Returns the Inode ID of a file.
            </summary>
            <param name="path">The path of the file.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.Rename(System.String,System.String)">
            <summary>
            Renames a file. Atomically replaces the destination if present.
            </summary>
            <param name="source">The path of the file to rename.</param>
            <param name="destination">The new path of the file. Must reside on the same file system as <paramref name="source"/>.</param>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.IsRegularFile(System.String)">
            <summary>
            Checks whether a file is a regular file (i.e. not a device file, symbolic link, etc.).
            </summary>
            <returns><c>true</c> if <paramref name="path"/> points to a regular file; <c>false</c> otherwise.</returns>
            <remarks>Will return <c>false</c> for non-existing files.</remarks>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.IsSymlink(System.String)">
            <summary>
            Checks whether a file is a Unix symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <remarks>Will return <c>false</c> for non-existing files.</remarks>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.IsSymlink(System.String,System.String@)">
            <summary>
            Checks whether a file is a Unix symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <returns><c>true</c> if <paramref name="path"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="F:NanoByte.Common.Native.UnixUtils.AllWritePermission">
            <summary>A combination of bit flags to grant everyone writing permissions.</summary>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.MakeReadOnly(System.String)">
            <summary>
            Removes write permissions for everyone on a filesystem object (file or directory).
            </summary>
            <param name="path">The filesystem object (file or directory) to make read-only.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.MakeWritable(System.String)">
            <summary>
            Sets write permissions for the owner on a filesystem object (file or directory).
            </summary>
            <param name="path">The filesystem object (file or directory) to make writable by the owner.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="F:NanoByte.Common.Native.UnixUtils.AllExecutePermission">
            <summary>A combination of bit flags to grant everyone executing permissions.</summary>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.IsExecutable(System.String)">
            <summary>
            Checks whether a file is marked as Unix-executable.
            </summary>
            <param name="path">The file to check for executable rights.</param>
            <returns><c>true</c> if <paramref name="path"/> points to an executable; <c>false</c> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <remarks>Will return <c>false</c> for non-existing files.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.SetExecutable(System.String,System.Boolean)">
            <summary>
            Marks a file as Unix-executable or not Unix-executable.
            </summary>
            <param name="path">The file to mark as executable or not executable.</param>
            <param name="executable"><c>true</c> to mark the file as executable, <c>true</c> to mark it as not executable.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.GetXattr(System.String,System.String)">
            <summary>
            Gets an extended file attribute.
            </summary>
            <param name="path">The path of the file to read the attribute from.</param>
            <param name="name">The name of the attribute to read.</param>
            <returns>The contents of the attribute as a byte array; <c>null</c> if there was a problem reading the file.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.SetXattr(System.String,System.String,System.Byte[])">
            <summary>
            Sets an extended file attribute.
            </summary>
            <param name="path">The path of the file to set the attribute for.</param>
            <param name="name">The name of the attribute to set.</param>
            <param name="data">The data to write to the attribute.</param>
            <exception cref="T:Mono.Unix.UnixIOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="M:NanoByte.Common.Native.UnixUtils.GetFileSystem(System.String)">
            <summary>
            Determines the file system type a file or directory is stored on.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The name of the file system in fstab format (e.g. ext3 or ntfs-3g); <c>null</c> if unable to determine.</returns>
            <remarks>Only works on Linux, not on other Unixes (e.g. MacOS X).</remarks>
            <exception cref="T:System.IO.IOException">The underlying Unix subsystem failed to process the request (e.g. because of insufficient rights).</exception>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsCredentials">
            <summary>
            Provides an interface to the Windows Credentials API. Supported on Windows XP or newer.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsCredentials.IsCredentialStored(System.String)">
            <summary>
            Determines whether there are any credentials stored for a specific target.
            </summary>
            <param name="target">A string uniquely identifying the target the credentials are intended for.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current platform does not support the Credentials API. Needs Windows XP or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsCredentials.PromptGui(System.String,NanoByte.Common.Native.WindowsCredentialsFlags,System.String,System.String,System.IntPtr)">
            <summary>
            Prompts the user for credentials using a GUI dialog.
            </summary>
            <param name="target">A string uniquely identifying the target the credentials are intended for.</param>
            <param name="flags">Flags for configuring the prompt.</param>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to display in the dialog.</param>
            <param name="owner">The parent window for the dialog; can be <c>null</c>.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current platform does not support the Credentials API. Needs Windows XP or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsCredentials.PromptCli(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <summary>
            Prompts the user for credentials using a command-line interface.
            </summary>
            <param name="target">A string uniquely identifying the target the credentials are intended for.</param>
            <param name="flags">Flags for configuring the prompt.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current platform does not support the Credentials API. Needs Windows XP or newer.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsMutex">
            <summary>
            Provides Windows-specific API calls for cross-process Mutexes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsMutex.Create(System.String,System.Boolean@)">
            <summary>
            Creates a new (or opens an existing) mutex.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <param name="alreadyExists"><c>true</c> if an existing mutex was opened; <c>false</c> if a new one was created.</param>
            <returns>The handle for the mutex. Can be used in <see cref="M:NanoByte.Common.Native.WindowsMutex.Close(System.IntPtr)"/>. Will automatically be released once the process terminates.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">The native subsystem reported a problem.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsMutex.Probe(System.String)">
            <summary>
            Checks whether a specific mutex exists without opening a lasting handle.
            </summary>
            <param name="name">The name to be used as a mutex identifier.</param>
            <returns><c>true</c> if an existing mutex was found; <c>false</c> if none existed.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">The native subsystem reported a problem.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsMutex.Close(System.IntPtr)">
            <summary>
            Closes an existing mutex handle. The mutex is destroyed if this is the last handle.
            </summary>
            <param name="handle">The mutex handle to be closed.</param>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsRestartManager">
            <summary>
            Provides an interface to the Windows Restart Manager. Supported on Windows Vista or newer.
            </summary>
            <remarks>
            See https://msdn.microsoft.com/en-us/library/windows/desktop/cc948910
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.BuildException(System.Int32)">
            <summary>
            Builds a suitable <see cref="T:System.Exception"/> for a given <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.#ctor">
            <summary>
            Starts a new Restart Manager session.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current platform does not support the Restart Manager. Needs Windows Vista or newer.</exception>
            <exception cref="T:System.DllNotFoundException">The Restart Manager API is missing.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.Dispose">
            <summary>
            Ends the Restart Manager session.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.Finalize">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.RegisterResources(System.String[])">
            <summary>
            Registers resources to the Restart Manager session. The Restart Manager uses the list of resources registered with the session to determine which applications and services must be shut down and restarted.
            </summary>
            <param name="files">An array of full filename paths.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.ListApps(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all applications that are currently using resources that have been registered with <see cref="M:NanoByte.Common.Native.WindowsRestartManager.RegisterResources(System.String[])"/>.
            </summary>
            <param name="cancellationToken">Used to signal cancellation requests.</param>
            <exception cref="T:System.IO.IOException">The Restart Manager could not access the registry.</exception>
            <exception cref="T:System.TimeoutException">The Restart Manager could not obtain a Registry write mutex in the allotted time. A system restart is recommended.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.ListAppProblems(System.Boolean@)">
            <summary>
            Gets a list of all applications that have caused problems with <see cref="M:NanoByte.Common.Native.WindowsRestartManager.ShutdownApps(NanoByte.Common.Tasks.ITaskHandler)"/> or <see cref="M:NanoByte.Common.Native.WindowsRestartManager.RestartApps(NanoByte.Common.Tasks.ITaskHandler)"/>.
            </summary>
            <param name="permissionDenied">Indicates whether trying again as administrator may help.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.ShutdownApps(NanoByte.Common.Tasks.ITaskHandler)">
            <summary>
            Initiates the shutdown of applications that are currently using resources that have been registered with <see cref="M:NanoByte.Common.Native.WindowsRestartManager.RegisterResources(System.String[])"/>.
            </summary>
            <param name="handler">A callback object used to report progress to the user and allow cancellation.</param>
            <exception cref="T:System.UnauthorizedAccessException">One or more applications could not be shut down. Trying again as administrator may help.</exception>
            <exception cref="T:System.IO.IOException">One or more applications could not be shut down. A system reboot may be required.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsRestartManager.RestartApps(NanoByte.Common.Tasks.ITaskHandler)">
            <summary>
            Restarts applications that have been shut down by <see cref="M:NanoByte.Common.Native.WindowsRestartManager.ShutdownApps(NanoByte.Common.Tasks.ITaskHandler)"/> and that have been registered to be restarted.
            </summary>
            <param name="handler">A callback object used to report progress to the user and allow cancellation.</param>
            <exception cref="T:System.IO.IOException">One or more applications could not be automatically restarted.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The Restart Manager API returned an error.</exception>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsTaskbar">
            <summary>
            Provides helper methods and API calls specific to the Windows 7 or newer taskbar.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState">
            <summary>
            Represents the thumbnail progress bar state.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.NoProgress">
            <summary>
            No progress is displayed.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.Indeterminate">
            <summary>
            The progress is indeterminate (marquee).
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.Normal">
            <summary>
            Normal progress is displayed.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.Error">
            <summary>
            An error occurred (red).
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ProgressBarState.Paused">
            <summary>
            The operation is paused (yellow).
            </summary>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsTaskbar.ShellLink">
            <summary>
            Represents a shell link targeting a file.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.Title">
            <summary>The title/name of the task link.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.Path">
            <summary>The target path the link shall point to.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.Arguments">
            <summary>Additional arguments for <see cref="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.Title"/>; can be <c>null</c>.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.IconPath">
            <summary>The path of the icon for the link.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.IconIndex">
            <summary>The resource index within the file specified by <see cref="F:NanoByte.Common.Native.WindowsTaskbar.ShellLink.IconPath"/>.</summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.ShellLink.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new shell link structure.
            </summary>
            <param name="title">The title/name of the task link.</param>
            <param name="path">The target path the link shall point to and to get the icon from.</param>
            <param name="arguments">Additional arguments for <paramref name="title"/>; can be <c>null</c>.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.ShellLink.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new shell link structure
            </summary>
            <param name="title">The title/name of the task link.</param>
            <param name="path">The target path the link shall point to.</param>
            <param name="arguments">Additional arguments for <paramref name="title"/>; can be <c>null</c>.</param>
            <param name="iconPath">The path of the icon for the link.</param>
            <param name="iconIndex">The resource index within the file specified by <paramref name="iconPath"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.SetProgressState(System.IntPtr,NanoByte.Common.Native.WindowsTaskbar.ProgressBarState)">
            <summary>
            Sets the state of the taskbar progress indicator.
            </summary>
            <param name="handle">The handle of the window whose taskbar button contains the progress indicator.</param>
            <param name="state">The state of the progress indicator.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.SetProgressValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Sets the value of the taskbar progress indicator.
            </summary>
            <param name="handle">The handle of the window whose taskbar button contains the progress indicator.</param>
            <param name="currentValue">The current value of the progress indicator.</param>
            <param name="maximumValue">The value <paramref name="currentValue"/> will have when the operation is complete.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.SetWindowAppID(System.IntPtr,System.String,System.String,System.String,System.String)">
            <summary>
            Sets a specific window's explicit application user model ID.
            </summary>
            <param name="hwnd">A handle to the window to set the ID for.</param>
            <param name="appID">The application ID to set.</param>
            <param name="relaunchCommand">The command to use for relaunching this specific window if it was pinned to the taskbar; can be <c>null</c>.</param>
            <param name="relaunchIcon">The icon to use for pinning this specific window to the taskbar (written as Path,ResourceIndex); can be <c>null</c>.</param>
            <param name="relaunchName">The user-friendly name to associate with <paramref name="relaunchCommand"/>; can be <c>null</c>.</param>
            <remarks>The application ID is used to group related windows in the taskbar.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.AddTaskLinks(System.String,System.Collections.Generic.IEnumerable{NanoByte.Common.Native.WindowsTaskbar.ShellLink})">
            <summary>
            Adds user-task links to the taskbar jumplist. Any existing task links are removed.
            </summary>
            <param name="appID">The application ID of the jumplist to add the task to.</param>
            <param name="links">The links to add to the jumplist.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.PreventPinning(System.IntPtr)">
            <summary>
            Prevents a specific window from being pinned to the taskbar.
            </summary>
            <param name="hwnd">A handle to the window to prevent from being pinned.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.ConvertShellLink(NanoByte.Common.Native.WindowsTaskbar.ShellLink)">
            <summary>
            Converts a managed shell link structure to a COM object.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.GetWindowPropertyStore(System.IntPtr)">
            <summary>
            Retrieves the property store for a window.
            </summary>
            <param name="hwnd">A handle to the window to retrieve the property store for.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsTaskbar.SetPropertyValue(NanoByte.Common.Native.WindowsTaskbar.IPropertyStore,NanoByte.Common.Native.WindowsTaskbar.PropertyKey,System.String)">
            <summary>
            Sets a property value.
            </summary>
            <param name="propertyStore">The property store to set the property in.</param>
            <param name="property">The property to set.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="T:NanoByte.Common.Native.WindowsUtils">
            <summary>
            Provides helper methods and API calls specific to the Windows platform.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorFileNotFound">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that a file was not found.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorAccessDenied">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that access to a resource was denied.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorWriteFault">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that write access to a resource failed.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorSemTimeout">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that an operation timed out.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorAlreadyExists">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that an element (e.g. a file) already exists.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorMoreData">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that more data is available and the query should be repeated with a larger output buffer/array.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorRequestedOperationRequiresElevation">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that the requested application needs UAC elevation.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorCancelled">
            <summary>
            The <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/> value indicating that an operation was cancelled by the user.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.Win32ErrorNotAReparsePoint">
            <summary>
            The file or directory is not a reparse point.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.BuildException(System.Int32)">
            <summary>
            Builds a suitable <see cref="T:System.Exception"/> for a given <see cref="P:System.ComponentModel.Win32Exception.NativeErrorCode"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows">
            <summary>
            <c>true</c> if the current operating system is Windows (9x- or NT-based); <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindowsNT">
            <summary>
            <c>true</c> if the current operating system is a modern Windows version (NT-based); <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindowsXP">
            <summary>
            <c>true</c> if the current operating system is Windows XP or newer; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindowsVista">
            <summary>
            <c>true</c> if the current operating system is Windows Vista or newer; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows7">
            <summary>
            <c>true</c> if the current operating system is Windows 7 or newer; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows8">
            <summary>
            <c>true</c> if the current operating system is Windows 8 or newer; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows10">
            <summary>
            <c>true</c> if the current operating system is Windows 10 or newer; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows10Redstone">
            <summary>
            <c>true</c> if the current operating system is Windows 10 Anniversary Update (Redstone 1) or newer; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows102004">
            <summary>
            <c>true</c> if the current operating system is Windows 10, Version 2004 or newer; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsWindows11">
            <summary>
            <c>true</c> if the current operating system is Windows 11 or newer; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.HasUac">
            <summary>
            <c>true</c> if the current operating system supports UAC and it is enabled; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsAdministrator">
            <summary>
            Indicates whether the current user is an administrator. Always returns <c>true</c> on non-Windows NT systems.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.IsGuiSession">
            <summary>
            Indicates whether the current process is running in a GUI session (rather than, e.g., as a service or in an SSH session).
            </summary>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.CurrentProcessPath">
            <summary>
            Determines the path of the executable the current process was launched from.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.NetFx20">
            <summary>The directory version number for .NET Framework 2.0. This release includes the C# 2.0 compiler and the CLR 2.0 runtime.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.NetFx30">
            <summary>The directory version number for .NET Framework 3.0.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.NetFx35">
            <summary>The directory version number for .NET Framework 3.5. This release includes the C# 3.0 compiler.</summary>
        </member>
        <member name="F:NanoByte.Common.Native.WindowsUtils.NetFx40">
            <summary>The directory version number for .NET Framework 4.x.  This release includes a C# 4.0+ compiler and the CLR 4.0 runtime.</summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.GetNetFxDirectory(System.String)">
            <summary>
            Returns the .NET Framework root directory for a specific version of the .NET Framework. Does not verify the directory actually exists!
            </summary>
            <param name="version">The full .NET version number including the leading "v". Use predefined constants when possible.</param>
            <returns>The path to the .NET Framework root directory.</returns>
            <remarks>Returns 64-bit directories if on 64-bit Windows is <c>true</c>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.SplitArgs(System.String)">
            <summary>
            Tries to split a command-line into individual arguments.
            </summary>
            <param name="commandLine">The command-line to be split.</param>
            <returns>
            An array of individual arguments.
            Will return the entire command-line as one argument when not running on Windows or if splitting failed for some other reason.
            </returns>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.AttachConsole">
            <summary>
            Tries to attach to a command-line console owned by the parent process.
            </summary>
            <returns><c>true</c> if the console was successfully attached; <c>false</c> if the parent process did not own a console.</returns>
        </member>
        <member name="P:NanoByte.Common.Native.WindowsUtils.AbsoluteTime">
            <summary>
            A time index in seconds that continuously increases.
            </summary>
            <remarks>Depending on the operating system this may be the time of the system clock or the time since the system booted.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.GetFolderPath(System.Environment.SpecialFolder)">
            <summary>
            Gets the path to the specified system folder.
            Uses well-known environment variables and hard-coded paths as fallbacks when necessary.
            </summary>
            <exception cref="T:System.IO.IOException">The folder could not be resolved to a path.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.ReadAllBytes(System.String)">
            <summary>
            Reads the entire contents of a file using the Win32 API.
            </summary>
            <param name="path">The path of the file to read.</param>
            <returns>The contents of the file as a byte array; <c>null</c> if there was a problem reading the file.</returns>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
            <remarks>This method works like <see cref="M:System.IO.File.ReadAllBytes(System.String)"/>, but bypasses .NET's file path validation logic.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes the entire contents of a byte array to a file using the Win32 API. Existing files with the same name are overwritten.
            </summary>
            <param name="path">The path of the file to write to.</param>
            <param name="data">The data to write to the file.</param>
            <exception cref="T:System.IO.IOException">There was an IO problem writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file was denied.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">There was a problem writing the file.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows.</exception>
            <remarks>This method works like <see cref="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])"/>, but bypasses .NET's file path validation logic.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a symbolic link for a file or directory.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The path of the existing file or directory to point to (relative to <paramref name="sourcePath"/>).</param>
            <exception cref="T:System.IO.IOException">There was an IO problem creating the symlink.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the symbolic link.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The symbolic link creation failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows NT 6.0 (Vista) or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.IsSymlink(System.String)">
            <summary>
            Checks whether a file is an NTFS symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <remarks>Will return <c>false</c> for non-existing files.</remarks>
            <exception cref="T:System.IO.IOException">There was an IO problem getting link information.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to get link information.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Getting link information failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows NT 6.0 (Vista) or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.IsSymlink(System.String,System.String@)">
            <summary>
            Checks whether a file is an NTFS symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <returns><c>true</c> if <paramref name="path"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.IOException">There was an IO problem getting link information.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to get link information.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Getting link information failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows NT 6.0 (Vista) or newer.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.CreateHardlink(System.String,System.String)">
            <summary>
            Creates a hard link between two files.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The absolute path of the existing file to point to.</param>
            <remarks>Only available on Windows 2000 or newer.</remarks>
            <exception cref="T:System.IO.IOException">There was an IO problem creating the hard link.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the hard link.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">The hard link creation failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows NT.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.GetFileID(System.String)">
            <summary>
            Returns the file ID of a file.
            </summary>
            <param name="path">The path of the file.</param>
            <exception cref="T:System.IO.IOException">There was an IO problem checking the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to check the files.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Checking the file failed.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a platform other than Windows NT.</exception>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.MoveFileOnReboot(System.String,System.String)">
            <summary>
            Moves a file on the next reboot of the OS. Replaces existing files.
            </summary>
            <param name="sourcePath">The source path to move the file from.</param>
            <param name="destinationPath">The destination path to move the file to. <c>null</c> to delete the file instead of moving it.</param>
            <remarks>Useful for replacing in-use files.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.SetCurrentProcessAppID(System.String)">
            <summary>
            Sets the current process' explicit application user model ID.
            </summary>
            <param name="appID">The application ID to set.</param>
            <remarks>The application ID is used to group related windows in the taskbar.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.NotifyAssocChanged">
            <summary>
            Informs the Windows shell that changes were made to the file association data in the registry.
            </summary>
            <remarks>This should be called immediately after the changes in order to trigger a refresh of the Explorer UI.</remarks>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.NotifyEnvironmentChanged">
            <summary>
            Informs all GUI applications that changes where made to the environment variables (e.g. PATH) and that they should re-pull them.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.RegisterWindowMessage(System.String)">
            <summary>
            Registers a new message type that can be sent to windows.
            </summary>
            <param name="message">A unique string used to identify the message type session-wide.</param>
            <returns>A unique ID number used to identify the message type session-wide.</returns>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.BroadcastMessage(System.Int32)">
            <summary>
            Sends a message of a specific type to all windows in the current session.
            </summary>
            <param name="messageID">A unique ID number used to identify the message type session-wide.</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.RegisterApplicationRestart(System.String)">
            <summary>
            Registers the current application for automatic restart after updates or crashes.
            </summary>
            <param name="arguments">The command-line arguments to pass to the application on restart. Must not be empty!</param>
        </member>
        <member name="M:NanoByte.Common.Native.WindowsUtils.UnregisterApplicationRestart">
            <summary>
            Unregisters the current application for automatic restart after updates or crashes.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.Connectivity">
            <summary>
            State of a network connection.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Net.Connectivity.Normal">
            <summary>
            Normal connection available.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Net.Connectivity.Metered">
            <summary>
            Metered (potentially expensive) connection available.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Net.Connectivity.None">
            <summary>
            No connection available.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.DownloadFile">
            <summary>
            Downloads a file from a specific internet address to a stream.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadFile.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadFile.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadFile.BytesMaximum">
            <summary>
            The maximum number of bytes to download.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadFile.Source">
            <summary>
            The URL the file is to be downloaded from.
            </summary>
            <remarks>This value may change once <see cref="F:NanoByte.Common.Tasks.TaskState.Data"/> has been reached, based on HTTP redirections.</remarks>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadFile.NoCache">
            <summary>
            Set to <c>true</c> to add a No-Cache header to the request for any intermediate proxy servers.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.DownloadFile.ContentStarted">
            <summary>
            Indicates whether the server has started sending content.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadFile.#ctor(System.Uri,System.Action{System.IO.Stream},System.Int64)">
            <summary>
            Creates a new download task.
            </summary>
            <param name="source">The URL the file is to be downloaded from.</param>
            <param name="callback">Called with a stream providing the download content.</param>
            <param name="bytesTotal">The number of bytes the file to be downloaded is long. The file will be rejected if it does not have this length. -1 if the size is unknown.</param>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadFile.#ctor(System.Uri,System.String,System.Int64)">
            <summary>
            Creates a new download task.
            </summary>
            <param name="source">The URL the file is to be downloaded from.</param>
            <param name="target">The local path to save the file to. A preexisting file will be overwritten.</param>
            <param name="bytesTotal">The number of bytes the file to be downloaded is long. The file will be rejected if it does not have this length. -1 if the size is unknown.</param>
        </member>
        <member name="F:NanoByte.Common.Net.DownloadFile._credentials">
            <summary>
            The HTTP Basic Auth credentials to use for downloading the file.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.DownloadFile.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.HttpClientExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Net.Http.HttpClient"/> and related classes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.HttpClientExtensions.Send(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request and waits for the result is synchronously.
            </summary>
            <exception cref="T:System.Net.Http.HttpRequestException">The request failed due to a network, DNS or certificate issue.</exception>
        </member>
        <member name="M:NanoByte.Common.Net.HttpClientExtensions.Send(System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request and waits for the result is synchronously.
            </summary>
            <exception cref="T:System.Net.Http.HttpRequestException">The request failed due to a network, DNS or certificate issue.</exception>
        </member>
        <member name="M:NanoByte.Common.Net.HttpClientExtensions.ReadAsStream(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Reads the content as a stream.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.HttpClientExtensions.AsWebException(System.Net.Http.HttpRequestException)">
            <summary>
            Converts a <see cref="T:System.Net.Http.HttpRequestException"/> into a <see cref="T:System.Net.WebException"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.HttpServer">
            <summary>
            A simple HTTP server.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.HttpServer.Port">
            <summary>
            The TCP port the server is listing on.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.HttpServer.#ctor(System.UInt16,System.Boolean)">
            <summary>
            Gets ready to serve HTTP requests.
            Call <see cref="M:NanoByte.Common.Net.HttpServer.StartHandlingRequests"/> after completing any additional setup.
            </summary>
            <param name="port">The TCP port to listen on; <c>0</c> to automatically pick free port.</param>
            <param name="localOnly"><c>true</c> to only respond to requests from the local machine instead of the network.</param>
            <exception cref="T:System.Net.WebException">Unable to serve on the specified <paramref name="port"/>.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">Needs admin rights to serve HTTP requests.</exception>
        </member>
        <member name="M:NanoByte.Common.Net.HttpServer.StartHandlingRequests">
            <summary>
            To be called by derived constructor when setup is complete.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.HttpServer.HandleRequest(System.Net.HttpListenerContext)">
            <summary>
            Handles a single HTTP request.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.HttpServer.Dispose">
            <summary>
            Stops serving HTTP requests.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.ICredentialProvider">
            <summary>
            Asks the user or a keyring for <see cref="T:System.Net.NetworkCredential"/>s for specific <see cref="T:System.Uri"/>s.
            </summary>
            <remarks>Implementations of this interface are thread-safe.</remarks>
        </member>
        <member name="M:NanoByte.Common.Net.ICredentialProvider.GetCredential(System.Uri,System.Boolean)">
            <summary>
            Returns <see cref="T:System.Net.NetworkCredential"/>s for a specific <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The URI that the client is providing authentication for.</param>
            <param name="previousIncorrect">Reports that the credentials previously returned by this provider were incorrect.</param>
        </member>
        <member name="T:NanoByte.Common.Net.MicroServer">
            <summary>
            A minimalistic HTTP server that only serves a single file on localhost. Useful for unit tests.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.MicroServer.ServerUri">
            <summary>
            The URL under which the server root can be reached. Usually you should use <see cref="P:NanoByte.Common.Net.MicroServer.FileUri"/> instead.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.MicroServer.FileUri">
            <summary>
            The complete URL under which the server provides its file.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.MicroServer.FileContent">
            <summary>
            The content of the file to be served under <see cref="P:NanoByte.Common.Net.MicroServer.FileUri"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.MicroServer.Slow">
            <summary>
            Wait for twenty seconds every time before finishing a response.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.MicroServer.#ctor(System.String,System.IO.Stream)">
            <summary>
            Starts serving a single file via HTTP on localhost.
            </summary>
            <param name="resourceName">The HTTP resource name under which to provide the content.</param>
            <param name="fileContent">The content of the file to serve.</param>
        </member>
        <member name="T:NanoByte.Common.Net.Netrc">
            <summary>
            Represents data loaded from a .netrc file as a map from host names to credentials.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Net.Netrc.DefaultPath">
            <summary>
            The default path for the <c>.netrc</c> file. Usually in the home directory. Can be overriden via <c>NETRC</c> environment variable.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.Netrc.Load(System.String)">
            <summary>
            Loads credentials from a .netrc file.
            </summary>
            <param name="path">The path of the file to load.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while loading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Net.Netrc.LoadSafe">
            <summary>
            Loads credentials from <see cref="P:NanoByte.Common.Net.Netrc.DefaultPath"/>. Catches any exceptions and returns empty <see cref="T:NanoByte.Common.Net.Netrc"/> instead.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.NetrcCredentialProvider">
            <summary>
            Gets credentials from <see cref="T:NanoByte.Common.Net.Netrc"/> if possible. Falls back to another provider otherwise.
            </summary>
            <param name="innerProvider">The provider to fall back to if no suitable credentials can be found in <see cref="T:NanoByte.Common.Net.Netrc"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Net.NetrcCredentialProvider.#ctor(NanoByte.Common.Net.ICredentialProvider)">
            <summary>
            Gets credentials from <see cref="T:NanoByte.Common.Net.Netrc"/> if possible. Falls back to another provider otherwise.
            </summary>
            <param name="innerProvider">The provider to fall back to if no suitable credentials can be found in <see cref="T:NanoByte.Common.Net.Netrc"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Net.NetrcCredentialProvider.GetCredential(System.Uri,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.NetUtils">
            <summary>
            Provides helper methods for the <see cref="N:System.Net"/> subsystem.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.NetUtils.ApplyProxy">
            <summary>
            Applies environment variable HTTP proxy server configuration if present.
            </summary>
            <remarks>Uses classic Linux environment variables: http_proxy, http_proxy_user, http_proxy_pass</remarks>
        </member>
        <member name="M:NanoByte.Common.Net.NetUtils.ConfigureTls">
            <summary>
            Enables TLS 1.2 and TLS 1.3 support if available.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.NetUtils.TrustCertificates(System.String[])">
            <summary>
            Makes the SSL validation subsystem trust a set of certificates, even if their certificate chain is not trusted.
            </summary>
            <param name="publicKeys">The public keys of the certificates to trust.</param>
            <remarks>This method affects the global state of the <see cref="T:System.AppDomain"/>. Calling it more than once is not cumulative and will overwrite previous certificates. You should call this method exactly once near the beginning of your application.</remarks>
        </member>
        <member name="M:NanoByte.Common.Net.NetUtils.GetInternetConnectivity">
            <summary>
            Returns the current state of the internet connection.
            When unsure assumes a connection is available.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.NetworkCredentialExtension">
            <summary>
            Provides extension methods for <see cref="T:System.Net.NetworkCredential"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.NetworkCredentialExtension.ToBasicAuth(System.Net.NetworkCredential)">
            <summary>
            Creates a HTTP basic authentication header from the provided credentials.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.UriExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Uri"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.ToStringRfc(System.Uri)">
            <summary>
            An alternate version of <see cref="M:System.Uri.ToString"/> that produces results escaped according to RFC 2396.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.EnsureTrailingSlash(System.Uri)">
            <summary>
            Adds a trailing slash to the URI if it does not already have one.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.ReparseAsAbsolute(System.Uri)">
            <summary>
            Reparses a URI (generated via conversion) to ensure it is a valid absolute URI.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.GetLocalFileName(System.Uri)">
            <summary>
            Extracts the file-name portion of an URI and ensures it is a valid file-name on the local OS.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.UriExtensions.GetRoot(System.Uri)">
            <summary>
            Removes everything except the schema, host and port from the URI. Returns the original URI if it is not an absolute URI.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Net.WindowsCliCredentialProvider">
            <summary>
            Asks the user for <see cref="T:System.Net.NetworkCredential"/>s using the Windows Credential Manager command-line interface.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCliCredentialProvider.#ctor(System.Action)">
            <summary>
            Creates a new Windows CLI credential provider.
            </summary>
            <param name="beforePrompt">An optional callback to be invoked right before the user is prompted for credentials</param>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCliCredentialProvider.GetCredential(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.WindowsCredentialProvider">
            <summary>
            Gets <see cref="T:System.Net.NetworkCredential"/>s using the Windows Credential Manager.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCredentialProvider.GetCredential(System.Uri,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsCredentialProvider.GetCredential(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <summary>
            Performs the actual <see cref="T:NanoByte.Common.Native.WindowsCredentials"/> API call to prompt the user or the credential store for credentials.
            </summary>
            <param name="target">A string identifying the target the credentials are intended for.</param>
            <param name="flags">Flags for configuring the prompt.</param>
        </member>
        <member name="T:NanoByte.Common.Net.WindowsGuiCredentialProvider">
            <summary>
            Asks the user for <see cref="T:System.Net.NetworkCredential"/>s using the Windows Credential Manager GUI.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsGuiCredentialProvider.GetCredential(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Net.WindowsNonInteractiveCredentialProvider">
            <summary>
            Gets <see cref="T:System.Net.NetworkCredential"/>s stored in the Windows Credential Manager. Does not prompt for new credentials.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Net.WindowsNonInteractiveCredentialProvider.GetCredential(System.String,NanoByte.Common.Native.WindowsCredentialsFlags)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.NotAdminException">
            <summary>
            Like a <see cref="T:System.UnauthorizedAccessException"/> but with the additional hint that retrying the operation as an administrator would fix the problem.
            </summary>
        </member>
        <member name="M:NanoByte.Common.NotAdminException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NotAdminException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NotAdminException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.NotAdminException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.ProcessUtils">
            <summary>
            Provides methods for launching child processes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Start(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Starts a new <see cref="T:System.Diagnostics.Process"/> and runs it in parallel with this one. Handles and wraps <see cref="T:System.ComponentModel.Win32Exception"/>s.
            </summary>
            <returns>The newly launched process.</returns>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation but the UAC prompt could not be displayed because <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <c>false</c>.</exception>
            <exception cref="T:System.OperationCanceledException">The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled.</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Start(System.String,System.String[])">
            <summary>
            Starts a new <see cref="T:System.Diagnostics.Process"/> and runs it in parallel with this one. Handles and wraps <see cref="T:System.ComponentModel.Win32Exception"/>s.
            </summary>
            <param name="fileName">The path of the file to open or executable to launch.</param>
            <param name="arguments">The command-line arguments to pass to the executable.</param>
            <returns>The newly launched process; <c>null</c> if an existing process was reused.</returns>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation but the UAC prompt could not be displayed because <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <c>false</c>.</exception>
            <exception cref="T:System.OperationCanceledException">The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled.</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Run(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Starts a new <see cref="T:System.Diagnostics.Process"/> and waits for it to complete. Handles and wraps <see cref="T:System.ComponentModel.Win32Exception"/>s.
            </summary>
            <returns>The exit code of the process.</returns>
            <exception cref="T:System.IO.IOException">There was a problem launching the executable.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The executable file could not be found.</exception>
            <exception cref="T:NanoByte.Common.NotAdminException">The target process requires elevation but the UAC prompt could not be displayed because <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute"/> is <c>false</c>.</exception>
            <exception cref="T:System.OperationCanceledException">The user was asked for intervention by the OS (e.g. a UAC prompt) and the user cancelled.</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.WaitForExitCode(System.Diagnostics.Process)">
            <summary>
            Waits for a running <see cref="T:System.Diagnostics.Process"/> to complete.
            </summary>
            <returns>The exit code of the process.</returns>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.WaitForSuccess(System.Diagnostics.Process)">
            <summary>
            Waits for a running <see cref="T:System.Diagnostics.Process"/> to complete with an exit code of zero.
            </summary>
            <exception cref="T:NanoByte.Common.ExitCodeException">The process exited with a non-zero <see cref="P:System.Diagnostics.Process.ExitCode"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Assembly(System.String,System.String[])">
            <summary>
            Creates a <see cref="T:System.Diagnostics.ProcessStartInfo"/> for launching an assembly located in <see cref="P:NanoByte.Common.Storage.Locations.InstallBase"/>.
            </summary>
            <param name="name">The name of the assembly to launch (without the file extension).</param>
            <param name="arguments">The command-line arguments to pass to the assembly.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified assembly could not be found.</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.AsAdmin(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Modifies a <see cref="T:System.Diagnostics.ProcessStartInfo"/> to request elevation to Administrator on Windows using UAC.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system does not support UAC or it is disabled..</exception>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.SanitizeEnvironmentVariables">
            <summary>
            Workaround for environment variable problems, such variable names that differ only in casing when running on Windows.
            </summary>
            <remarks>Call this before any access to <see cref="P:System.Diagnostics.ProcessStartInfo.EnvironmentVariables"/> to avoid <see cref="T:System.ArgumentException"/>s.</remarks>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.JoinEscapeArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines multiple strings into one for use as a command-line argument using <see cref="M:NanoByte.Common.ProcessUtils.EscapeArgument(System.String)"/>.
            </summary>
            <param name="parts">The strings to be combined.</param>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.EscapeArgument(System.String)">
            <summary>
            Escapes a string for use as a command-line argument, making sure it is encapsulated within <c>"</c> if it contains whitespace characters.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.ToCommandLine(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Converts a start into a command-line with proper escaping.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.FromCommandLine(System.String)">
            <summary>
            Converts a command-line into a start info.
            </summary>
        </member>
        <member name="M:NanoByte.Common.ProcessUtils.Deconstruct(System.Diagnostics.ProcessStartInfo,System.String@,System.String@)">
            <summary>
            Deconstructs a <see cref="T:System.Diagnostics.ProcessStartInfo"/> like a tuple.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Back">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.CannotAddCollectionToSelf">
            <summary>
              Looks up a localized string similar to The collection cannot be added to itself..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.CannotCanonicalizeDacl">
            <summary>
              Looks up a localized string similar to The DACL cannot be canonicalized since it would potentially result in a loss of information..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Comment">
            <summary>
              Looks up a localized string similar to &amp;Comment:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.CopyFiles">
            <summary>
              Looks up a localized string similar to Copying files.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.CopyToClipboard">
            <summary>
              Looks up a localized string similar to &amp;Copy to clipboard.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.DestinationDirExist">
            <summary>
              Looks up a localized string similar to The destination directory already exists..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Downloading">
            <summary>
              Looks up a localized string similar to Downloading {0}.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ErrorReportComment">
            <summary>
              Looks up a localized string similar to If you wish, you can use this field to provide additional information about the problem, such as a description of what you were doing when the crash occurred..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ErrorReport">
            <summary>
              Looks up a localized string similar to Error report.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ErrorReportCancel">
            <summary>
              Looks up a localized string similar to Do &amp;not report.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ErrorReportInfo">
            <summary>
              Looks up a localized string similar to An unexpected error has occurred in this application. You can help us fix the problem by reporting it. If there is already a known fix for your problem it will be displayed right after sending the report..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ErrorReportSend">
            <summary>
              Looks up a localized string similar to &amp;Report.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ErrorReportSent">
            <summary>
              Looks up a localized string similar to The error report was sent successfully..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FailedToDownload">
            <summary>
              Looks up a localized string similar to Failed to download {0}..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FailedToOpenRegistrySubkey">
            <summary>
              Looks up a localized string similar to Failed to open registry subkey &apos;{0}&apos; in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FailedToRollback">
            <summary>
              Looks up a localized string similar to Failed to rollback &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FailedToStart">
            <summary>
              Looks up a localized string similar to Failed to start &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FileNotExpectedSize">
            <summary>
              Looks up a localized string similar to The file that was supposed to be downloaded from {0} doesn&apos;t have the expected size. Was supposed to be {1} bytes but was actually {2} bytes..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.FileNotFound">
            <summary>
              Looks up a localized string similar to The file &quot;{0}&quot; could not be found..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.InvalidConfigDir">
            <summary>
              Looks up a localized string similar to The configuration directory &apos;{0}&apos; is probably invalid..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.InvalidCredentials">
            <summary>
              Looks up a localized string similar to The login credentials for {0} are incorrect..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.KeyAlreadyPresent">
            <summary>
              Looks up a localized string similar to The key was already present in the dictionary..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.LaunchNeedsAdmin">
            <summary>
              Looks up a localized string similar to Launching &apos;{0}&apos; requires Administrator privileges..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.MaxElementsExceeded">
            <summary>
              Looks up a localized string similar to The maximum amount of elements in the collection has been exceeded..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.MissingDispatchAction">
            <summary>
              Looks up a localized string similar to No action registered for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.NoSystemConfigInPortableMode">
            <summary>
              Looks up a localized string similar to System configuration cannot be edited in portable mode..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.OnlyAvailableOnWindows">
            <summary>
              Looks up a localized string similar to This method is only available on Windows..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Password">
            <summary>
              Looks up a localized string similar to Password:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.PleaseEnterCredentials">
            <summary>
              Looks up a localized string similar to Please enter login credentials for {0}:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ProblemLoading">
            <summary>
              Looks up a localized string similar to There was a problem loading &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ProcessExitCode">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; exited with exit code {1}..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ProcessExitCodeUnexpected">
            <summary>
              Looks up a localized string similar to A process exited with an unexpected exit code..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ReadingFile">
            <summary>
              Looks up a localized string similar to Reading file {0}.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.RedoNotAvailable">
            <summary>
              Looks up a localized string similar to This command cannot be performed again until the undo command has been performed..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ResetValue">
            <summary>
              Looks up a localized string similar to &amp;Reset value.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.RestartingApps">
            <summary>
              Looks up a localized string similar to Restarting applications.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.RetryDelay">
            <summary>
              Looks up a localized string similar to Retrying in {0} milliseconds because of:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Search">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.SearchingFileReferences">
            <summary>
              Looks up a localized string similar to Searching for open file references.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.SeekOffsetTooLarge">
            <summary>
              Looks up a localized string similar to Attempted to read from position {0}. This is {1} bytes away from the underlying stream position {2}, but the seek buffer can only accomodate a difference of {3} bytes..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.ShuttingDownApps">
            <summary>
              Looks up a localized string similar to Shutting down applications.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.SourceDestinationEqual">
            <summary>
              Looks up a localized string similar to Source and destination are equal..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateComplete">
            <summary>
              Looks up a localized string similar to Complete.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateData">
            <summary>
              Looks up a localized string similar to Processing data.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateHeader">
            <summary>
              Looks up a localized string similar to Getting headers.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateIOError">
            <summary>
              Looks up a localized string similar to IO error.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateReady">
            <summary>
              Looks up a localized string similar to Ready.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.StateWebError">
            <summary>
              Looks up a localized string similar to Web error.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.TargetsOldValuesLength">
            <summary>
              Looks up a localized string similar to Length of targets must be equal to Length of oldValues.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.TechnicalDetails">
            <summary>
              Looks up a localized string similar to Technical details:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Tls12SupportMissing">
            <summary>
              Looks up a localized string similar to Your version of .NET does not support TLS 1.2. This may cause connection errors when downloading content via HTTPS. Please run Windows Update to install the necessary patches..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UnableToLocateAssembly">
            <summary>
              Looks up a localized string similar to The assembly named &quot;{0}&quot; could not be located..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UnableToReadBytesFromStream">
            <summary>
              Looks up a localized string similar to Unable to read {0} bytes from the stream..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UndoNotAvailable">
            <summary>
              Looks up a localized string similar to This undo command cannot be performed until the actual command has been performed..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UnixSubsystemFail">
            <summary>
              Looks up a localized string similar to The Unix subsystem failed to process the request. You may have insufficient rights..
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.UserName">
            <summary>
              Looks up a localized string similar to User name:.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Properties.Resources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:NanoByte.Common.PropertyPointer`1">
            <summary>
            Wraps delegate-based access to a property.
            </summary>
            <param name="getValue">A delegate that returns the current value.</param>
            <param name="setValue">A delegate that sets the value.</param>
            <typeparam name="T">The type of value the property contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            Wraps delegate-based access to a property.
            </summary>
            <param name="getValue">A delegate that returns the current value.</param>
            <param name="setValue">A delegate that sets the value.</param>
            <typeparam name="T">The type of value the property contains.</typeparam>
        </member>
        <member name="P:NanoByte.Common.PropertyPointer`1.Value">
            <summary>
            Transparent access to the wrapper value.
            </summary>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer`1.SetTemp(`0)">
            <summary>
            Temporarily changes the value of the property.
            </summary>
            <returns>Call <see cref="M:System.IDisposable.Dispose"/> to restore the original value of the property.</returns>
            <example>
            <code>
            using (PropertyPointer.For(() => someProperty).SetTemp(someValue))
            {
               // ...
            }
            </code>
            </example>
        </member>
        <member name="T:NanoByte.Common.PropertyPointer">
            <summary>
            Provides factory methods for <see cref="T:NanoByte.Common.PropertyPointer`1"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.For``1(System.Func{``0},System.Action{``0})">
            <summary>
            Creates a property pointer.
            </summary>
            <typeparam name="T">The type of value the property contains.</typeparam>
            <param name="getValue">A delegate that returns the current value.</param>
            <param name="setValue">A delegate that sets the value.</param>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.ForNullable``1(System.Func{``0},System.Action{``0})">
            <summary>
            Creates a property pointer for a nullable value.
            </summary>
            <typeparam name="T">The type of value the property contains.</typeparam>
            <param name="getValue">A delegate that returns the current value.</param>
            <param name="setValue">A delegate that sets the value.</param>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.For``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a property pointer.
            </summary>
            <typeparam name="T">The type of value the property contains.</typeparam>
            <param name="expression">An expression pointing to the property.</param>
            <exception cref="T:System.ArgumentException">The expression does not point to a property with a setter.</exception>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.ForNullable``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a property pointer for a nullable value.
            </summary>
            <typeparam name="T">The type of value the property contains.</typeparam>
            <param name="expression">An expression pointing to the property.</param>
            <exception cref="T:System.ArgumentException">The expression does not point to a property with a setter.</exception>
        </member>
        <member name="M:NanoByte.Common.PropertyPointer.ToSetValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Converts an expression pointing to a property into a delegate for setting the property's value.
            </summary>
            <exception cref="T:System.ArgumentException">The expression does not point to a property with a setter.</exception>
        </member>
        <member name="T:NanoByte.Common.StagedOperation">
            <summary>
            Common base class for operations that are first staged and then either committed or rolled back.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StagedOperation.Stage">
            <summary>
            Stages changes for later <see cref="M:NanoByte.Common.StagedOperation.Commit"/> or rollback.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StagedOperation.OnStage">
            <summary>
            Template method to stage changes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StagedOperation.Commit">
            <summary>
            Commits the <see cref="M:NanoByte.Common.StagedOperation.Stage"/>d changes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StagedOperation.OnCommit">
            <summary>
            Template method to commit the changes made by <see cref="M:NanoByte.Common.StagedOperation.OnStage"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StagedOperation.Dispose">
            <summary>
            Performs a rollback of all changes made by <see cref="M:NanoByte.Common.StagedOperation.Stage"/> if <see cref="M:NanoByte.Common.StagedOperation.Commit"/> has not been called and completed yet.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StagedOperation.OnRollback">
            <summary>
            Template method to revert any changes made by <see cref="M:NanoByte.Common.StagedOperation.OnStage"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.AtomicRead">
            <summary>
            Ensures that a read operation for a file does not conflict with an <see cref="T:NanoByte.Common.Storage.AtomicWrite"/> for the same file.
            </summary>
            <param name="path">The path of the file that will be read.</param>
            <example><code>
            using (new AtomicRead(filePath))
                return File.ReadAllBytes(filePath);
            </code></example>
        </member>
        <member name="M:NanoByte.Common.Storage.AtomicRead.#ctor(System.String)">
            <summary>
            Ensures that a read operation for a file does not conflict with an <see cref="T:NanoByte.Common.Storage.AtomicWrite"/> for the same file.
            </summary>
            <param name="path">The path of the file that will be read.</param>
            <example><code>
            using (new AtomicRead(filePath))
                return File.ReadAllBytes(filePath);
            </code></example>
        </member>
        <member name="M:NanoByte.Common.Storage.AtomicRead.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Storage.AtomicWrite">
            <summary>
            Provides a temporary path to write to and atomically inserts it at the destination location on disposal (if <see cref="M:NanoByte.Common.Storage.AtomicWrite.Commit"/> was called).
            </summary>
            <example><code>
            using (var atomic = new AtomicWrite(filePath))
            {
                File.WriteAllBytes(atomic.WritePath, fileData);
                atomic.Commit();
            }
            </code></example>
            <seealso cref="T:NanoByte.Common.Storage.AtomicRead"/>
        </member>
        <member name="P:NanoByte.Common.Storage.AtomicWrite.DestinationPath">
            <summary>
            The file path of the final destination.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.AtomicWrite.WritePath">
            <summary>
            The temporary file path to write to.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.AtomicWrite.IsCommitted">
            <summary>
            <c>true</c> if <see cref="M:NanoByte.Common.Storage.AtomicWrite.Commit"/> has been called.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.AtomicWrite.#ctor(System.String)">
            <summary>
            Prepares an atomic write operation.
            </summary>
            <param name="path">The file path of the final destination.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.AtomicWrite.Commit">
            <summary>
            Allows the new file to be deployed upon <see cref="M:NanoByte.Common.Storage.AtomicWrite.Dispose"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.AtomicWrite.Dispose">
            <summary>
            Replaces <see cref="P:NanoByte.Common.Storage.AtomicWrite.DestinationPath"/> with the contents of <see cref="P:NanoByte.Common.Storage.AtomicWrite.WritePath"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.BinaryStorage">
            <summary>
            Provides easy serialization to binary files (optionally wrapped in ZIP archives).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.BinaryStorage.LoadBinary``1(System.IO.Stream)">
            <summary>
            Loads an object from a binary file.
            </summary>
            <typeparam name="T">The type of object the binary stream shall be converted into.</typeparam>
            <param name="stream">The binary file to be loaded.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the binary data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.BinaryStorage.LoadBinary``1(System.String)">
            <summary>
            Loads an object from a binary file.
            </summary>
            <typeparam name="T">The type of object the binary stream shall be converted into.</typeparam>
            <param name="path">The binary file to be loaded.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file is not permitted.</exception>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the binary data.</exception>
            <remarks>Uses see cref="AtomicRead"/> internally.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.BinaryStorage.SaveBinary``1(``0,System.IO.Stream)">
            <summary>
            Saves an object in a binary stream.
            </summary>
            <typeparam name="T">The type of object to be saved in a binary stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="stream">The binary file to be written.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.BinaryStorage.SaveBinary``1(``0,System.String)">
            <summary>
            Saves an object in a binary file.
            </summary>
            <remarks>This method performs an atomic write operation when possible.</remarks>
            <typeparam name="T">The type of object to be saved in a binary stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="path">The binary file to be written.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file is not permitted.</exception>
            <remarks>Uses <see cref="T:NanoByte.Common.Storage.AtomicWrite"/> internally.</remarks>
        </member>
        <member name="T:NanoByte.Common.Storage.CopyDirectory">
            <summary>
            Copies the content of a directory to a new location preserving file timestamps, symlinks and hard links.
            </summary>
            <param name="sourcePath">The path of source directory. Must exist!</param>
            <param name="destinationPath">The path of the target directory.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.#ctor(System.String,System.String)">
            <summary>
            Copies the content of a directory to a new location preserving file timestamps, symlinks and hard links.
            </summary>
            <param name="sourcePath">The path of source directory. Must exist!</param>
            <param name="destinationPath">The path of the target directory.</param>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Storage.CopyDirectory.Overwrite">
            <summary>
            Overwrite existing files and directories at the destination path. This will even replace read-only files!
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.Execute">
            <inheritdoc />
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.HandleDirectory(System.IO.DirectoryInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.HandleFile(System.IO.FileInfo,System.IO.FileInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.CopyFile(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Copies a single file from one location to another. Can be overridden to modify the copying behavior.
            </summary>
            <exception cref="T:System.IO.IOException">A problem occurred while copying the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the <paramref name="sourceFile"/> or write access to the <paramref name="destinationFile"/> is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.CopyDirectory.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a symbolic link.
            </summary>
            <param name="linkPath">The path of the link to create.</param>
            <param name="linkTarget">The path of the existing file or directory to point to (relative to <paramref name="linkPath"/>).</param>
            <exception cref="T:System.IO.IOException">A problem occurred while creating the symlink.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the <paramref name="linkPath"/> is not permitted.</exception>
        </member>
        <member name="T:NanoByte.Common.Storage.FileUtils">
            <summary>
            Provides filesystem-related helper methods.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.PathEquals(System.String,System.String)">
            <summary>
            Determines whether two file-system paths point to the same location.
            </summary>
            <remarks>Applies path normalization. Does not resolve symlinks. Case-insensitive on Windows and macOS.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ToNativePath(System.String)">
            <summary>
            Replaces Unix-style directory slashes with <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ToUnixPath(System.String)">
            <summary>
            Replaces <see cref="F:System.IO.Path.DirectorySeparatorChar"/> with Unix-style directory slashes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsBreakoutPath(System.String)">
            <summary>
            Determines whether a path might escape its parent directory (by being absolute or using ..).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.RelativeTo(System.IO.FileSystemInfo,System.IO.FileSystemInfo)">
            <summary>
            Returns a relative path pointing to <paramref name="target"/> from <paramref name="baseRef"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ExistsCaseSensitive(System.String)">
            <summary>
            Like <see cref="M:System.IO.File.Exists(System.String)"/> but case-sensitive, even on Windows.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.Touch(System.String)">
            <summary>
            Sets the "last modified" timestamp for a file to now. Creates a new empty file if it does not exist yet.
            </summary>
            <exception cref="T:System.IO.IOException">Creating the file or updating its timestamp failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the file or update its timestamp.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.Create(System.String,System.Int64)">
            <summary>
            Creates or replaces a file. Pre-allocates the expected size of the file if possible.
            </summary>
            <returns>A stream for writing the file. No read access.</returns>
            <param name="path">The path of the file.</param>
            <param name="expectedSize">The initial allocation size in bytes for the file.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.DetermineTimeAccuracy(System.String)">
            <summary>
            Determines the accuracy with which the filesystem underlying a specific directory can store file-changed times.
            </summary>
            <param name="path">The path of the directory to check.</param>
            <returns>The accuracy in number of seconds. (i.e. 0 = perfect, 1 = may be off by up to one second)</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory doesn't exist.</exception>
            <exception cref="T:System.IO.IOException">Writing to the directory fails.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to write to the directory.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.Replace(System.String,System.String)">
            <summary>
            Replaces one file with another. Rolls back in case of problems. If the destination file does not exist yet, this acts like a simple rename.
            </summary>
            <param name="sourcePath">The path of source directory.</param>
            <param name="destinationPath">The path of the target directory. Must reside on the same filesystem as <paramref name="sourcePath"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePath"/> and <paramref name="destinationPath"/> are equal.</exception>
            <exception cref="T:System.IO.IOException">The file could not be replaced.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The read or write access to one of the files was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ReadFirstLine(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Reads the first line of text from a file.
            </summary>
            <param name="file">The file to read from.</param>
            <param name="encoding">The text encoding to use for reading.</param>
            <returns>The first line of text in the file; <c>null</c> if decoding does not work on the contents.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.Walk(System.IO.FileSystemInfo,System.Action{System.IO.DirectoryInfo},System.Action{System.IO.FileInfo},System.Boolean)">
            <summary>
            Walks a directory structure recursively and performs an action for every directory and file encountered.
            </summary>
            <param name="element">The directory (or single file) to walk.</param>
            <param name="dirAction">The action to perform for every found directory (including the starting <paramref name="element"/>); can be <c>null</c>.</param>
            <param name="fileAction">The action to perform for every found file; can be <c>null</c>.</param>
            <param name="followDirSymlinks">If <c>true</c> recurse into directory symlinks; if <c>false</c> only execute <paramref name="dirAction"/> for directory symlinks but do not recurse.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.WalkThroughPrefix(System.IO.DirectoryInfo)">
            <summary>
            Skips through any directories that only contain a single subdirectory and no files.
            </summary>
            <remarks>Ignores files that start with a dot.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.GetFilesRecursive(System.String,System.Boolean)">
            <summary>
            Returns the full paths of all files in a directory and its subdirectories.
            </summary>
            <param name="path">The path of the directory to search for files.</param>
            <param name="followDirSymlinks">If <c>true</c> recurse into directory symlinks.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ResetAcl(System.IO.DirectoryInfo)">
            <summary>
            Removes any custom ACLs a user may have set, restores ACL inheritance and sets the Administrators group as the owner.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ResetAcl``1(System.Func{``0},System.Action{``0})">
            <summary>
            Helper method for <see cref="M:NanoByte.Common.Storage.FileUtils.ResetAcl(System.IO.DirectoryInfo)"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.CanonicalizeAcl(System.Security.AccessControl.ObjectSecurity)">
            <summary>
            Fixes ACLs that are not canonical (not ordered correctly).
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.EnableWriteProtection(System.String)">
            <summary>
            Uses the best means the current platform provides to prevent further write access to a directory (read-only attribute, ACLs, Unix octals, etc.).
            </summary>
            <remarks>May do nothing if the platform doesn't provide any known protection mechanisms.</remarks>
            <param name="path">The directory to protect.</param>
            <exception cref="T:System.IO.IOException">There was a problem applying the write protection.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to apply the write protection.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.DisableWriteProtection(System.String)">
            <summary>
            Removes whatever means the current platform provides to prevent write access to a directory (read-only attribute, ACLs, Unix octals, etc.).
            </summary>
            <remarks>May do nothing if the platform doesn't provide any known protection mechanisms.</remarks>
            <param name="path">The directory to unprotect.</param>
            <exception cref="T:System.IO.IOException">There was a problem removing the write protection.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to remove the write protection.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.CreateSymlink(System.String,System.String)">
            <summary>
            Creates a new symbolic link to a file or directory.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The path of the existing file or directory to point to (relative to <paramref name="sourcePath"/>).</param>
            <exception cref="T:System.IO.IOException">Creating the symbolic link failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the symbolic link.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a system with no symbolic link support.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.CreateHardlink(System.String,System.String)">
            <summary>
            Creates a new hard link between two files.
            </summary>
            <param name="sourcePath">The path of the link to create.</param>
            <param name="targetPath">The absolute path of the existing file to point to.</param>
            <exception cref="T:System.IO.IOException">Creating the hard link failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to create the hard link.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a system with no hard link support.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.AreHardlinked(System.String,System.String)">
            <summary>
            Determines whether two files are hardlinked.
            </summary>
            <param name="path1">The path of the first file.</param>
            <param name="path2">The path of the second file.</param>
            <exception cref="T:System.IO.IOException">There was an IO problem checking the files.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to check the files.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.GetFileID(System.String)">
            <summary>
            Returns the file ID (on Windows) or Inode (on Unix) of a file.
            </summary>
            <param name="path">The path of the file.</param>
            <exception cref="T:System.IO.IOException">There was an IO problem checking the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to check the files.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.GetFileID(System.IO.FileInfo)">
            <summary>
            Returns the file ID (on Windows) or Inode (on Unix) of a file.
            </summary>
            <param name="file">The file.</param>
            <exception cref="T:System.IO.IOException">There was an IO problem checking the files.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to check the files.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsRegularFile(System.String)">
            <summary>
            Checks whether a file is a regular file (i.e. not a device file, symbolic link, etc.).
            </summary>
            <returns><c>true</c> if <paramref name="path"/> points to a regular file; <c>false</c> otherwise.</returns>
            <remarks>Will return <c>false</c> for non-existing files.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to query the file's properties.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsSymlink(System.String)">
            <summary>
            Checks whether a file is a symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <returns><c>true</c> if <paramref name="path"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsSymlink(System.String,System.String@)">
            <summary>
            Checks whether a file is a symbolic link.
            </summary>
            <param name="path">The path of the file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <returns><c>true</c> if <paramref name="path"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsSymlink(System.IO.FileSystemInfo,System.String@)">
            <summary>
            Checks whether a file is a Unix symbolic link.
            </summary>
            <param name="item">The file to check.</param>
            <param name="target">Returns the target the symbolic link points to if it exists.</param>
            <returns><c>true</c> if <paramref name="item"/> points to a symbolic link; <c>false</c> otherwise.</returns>
            <exception cref="T:System.IO.IOException">There was an IO problem reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file was denied.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsExecutable(System.String)">
            <summary>
            Checks whether a file is marked as Unix-executable.
            </summary>
            <returns><c>true</c> if <paramref name="path"/> points to an executable; <c>false</c> otherwise.</returns>
            <remarks>Will return <c>false</c> for non-existing files. Will always return <c>false</c> on non-Unixoid systems.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to query the file's properties.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.SetExecutable(System.String,System.Boolean)">
            <summary>
            Marks a file as Unix-executable or not Unix-executable. Only works on Unixoid systems!
            </summary>
            <param name="path">The file to mark as executable or not executable.</param>
            <param name="executable"><c>true</c> to mark the file as executable, <c>true</c> to mark it as not executable.</param>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> points to a file that does not exist or cannot be accessed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to change the file's properties.</exception>
            <exception cref="T:System.PlatformNotSupportedException">This method is called on a non-Unixoid system.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.IsUnixFS(System.String)">
            <summary>
            Checks whether a directory is located on a filesystem with support for Unixoid features such as executable bits.
            </summary>
            <returns><c>true</c> if <paramref name="path"/> points to directory on a Unixoid filesystem; <c>false</c> otherwise.</returns>
            <remarks>
            Will always return <c>false</c> on non-Unixoid systems.
            Only requires read access on Linux to determine file system.
            Requires write access on other Unixes (e.g. MacOS X).
            </remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory doesn't exist.</exception>
            <exception cref="T:System.IO.IOException">Checking the directory failed.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient right to stat to the directory.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.SupportsExecutableBits(System.String)">
            <summary>
            Checks whether a directory is located on a filesystem with support for executable bits by setting and reading them back.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.ReadExtendedMetadata(System.String,System.String)">
            <summary>
            Reads metadata from an NTFS Alternate Data Stream (Windows) or extended file attribute (Unixoid).
            </summary>
            <param name="path">The path of the file the Alternate Data Stream is associated with.</param>
            <param name="name">The name of the metadata stream.</param>
            <returns>The contents of the metadata stream; <c>null</c> if the file exists but the stream specified by <paramref name="name"/> does not.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> does not exist.</exception>
            <exception cref="T:System.IO.IOException">There was a problem reading the metadata stream.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system provides no method for storing extended metadata.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.FileUtils.WriteExtendedMetadata(System.String,System.String,System.Byte[])">
            <summary>
            Writes metadata to an NTFS Alternate Data Stream (Windows) or extended file attribute (Unixoid).
            </summary>
            <param name="path">The path of the file to associate the metadata with.</param>
            <param name="name">The name of the metadata stream.</param>
            <param name="data">The data to write to the metadata stream.</param>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> does not exist.</exception>
            <exception cref="T:System.IO.IOException">There was a problem writing the metadata stream.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You have insufficient rights to write the metadata.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system provides no method for storing extended metadata.</exception>
        </member>
        <member name="T:NanoByte.Common.Storage.JsonStorage">
            <summary>
            Provides easy serialization to JSON files.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.LoadJson``1(System.IO.Stream)">
            <summary>
            Loads an object from an JSON file.
            </summary>
            <typeparam name="T">The type of object the JSON stream shall be converted into.</typeparam>
            <param name="stream">The stream to read the encoded JSON data from.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the JSON data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.LoadJson``1(System.String)">
            <summary>
            Loads an object from an JSON file.
            </summary>
            <typeparam name="T">The type of object the JSON stream shall be converted into.</typeparam>
            <param name="path">The path of the file to load.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file is not permitted.</exception>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the JSON data.</exception>
            <remarks>Uses <see cref="T:NanoByte.Common.Storage.AtomicRead"/> internally.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.FromJsonString``1(System.String)">
            <summary>
            Loads an object from an JSON string.
            </summary>
            <typeparam name="T">The type of object the JSON string shall be converted into.</typeparam>
            <param name="data">The JSON string to be parsed.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the JSON data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.FromJsonString``1(System.String,``0)">
            <summary>
            Loads an object from an JSON string using an anonymous type as the target.
            </summary>
            <typeparam name="T">The type of object the JSON string shall be converted into.</typeparam>
            <param name="data">The JSON string to be parsed.</param>
            <param name="anonymousType">An instance of the anonymous type to parse to.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.SaveJson``1(``0,System.IO.Stream)">
            <summary>
            Saves an object in an JSON stream.
            </summary>
            <typeparam name="T">The type of object to be saved in an JSON stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="stream">The stream to write the encoded JSON data to.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.SaveJson``1(``0,System.String)">
            <summary>
            Saves an object in an JSON file.
            </summary>
            <remarks>This method performs an atomic write operation when possible.</remarks>
            <typeparam name="T">The type of object to be saved in an JSON stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="path">The path of the file to write.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file is not permitted.</exception>
            <remarks>Uses <see cref="T:NanoByte.Common.Storage.AtomicWrite"/> internally.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.ToJsonString``1(``0)">
            <summary>
            Returns an object as an JSON string.
            </summary>
            <typeparam name="T">The type of object to be saved in an JSON string.</typeparam>
            <param name="data">The object to be stored.</param>
            <returns>A string containing the JSON code.</returns>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.ReparseAsJson``1(System.Object)">
            <summary>
            Reparses an object previously deserialized from JSON into a different representation.
            </summary>
            <typeparam name="T">The type of object the data shall be converted into.</typeparam>
            <param name="data">The object to be parsed again.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:NanoByte.Common.Storage.JsonStorage.ReparseAsJson``1(System.Object,``0)">
            <summary>
            Reparses an object previously deserialized from JSON into a different representation using an anonymous type as the target.
            </summary>
            <typeparam name="T">The type of object the data shall be converted into.</typeparam>
            <param name="data">The object to be parsed again.</param>
            <param name="anonymousType">An instance of the anonymous type to parse to.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:NanoByte.Common.Storage.Locations">
            <summary>
            Provides easy access to platform-specific common directories for storing settings and application data.
            </summary>
            <remarks>
            Uses <see cref="T:System.Environment.SpecialFolder"/> on Windows and the freedesktop.org basedir spec (XDG) on Linux.
            See http://freedesktop.org/wiki/Standards/basedir-spec
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.InstallBase">
            <summary>
            The directory the application binaries are located in.
            </summary>
            <remarks>
            Uses the location of the NanoByte.Common DLL, not the calling EXE. Walks up one directory level if placed within a dir called "lib".
            Works with ngened and shadow copied assemblies. Does not work with GACed assemblies.
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.OverrideInstallBase(System.String)">
            <summary>
            Override the automatically determined <see cref="P:NanoByte.Common.Storage.Locations.InstallBase"/> with a custom <paramref name="path"/>.
            </summary>
            <remarks>Use with caution. Be aware of possible race conditions. Intended for unit testing, runtime relocation, etc..</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.Redirect(System.String)">
            <summary>
            Temporarily overrides <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> and <see cref="P:NanoByte.Common.Storage.Locations.PortableBase"/> for the current thread or async flow. Useful for unit tests.
            </summary>
            <param name="path">The <see cref="P:NanoByte.Common.Storage.Locations.PortableBase"/> value to set.</param>
            <returns>Call <see cref="M:System.IDisposable.Dispose"/> to restore the original values of <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> and <see cref="P:NanoByte.Common.Storage.Locations.PortableBase"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This method has already been called on this thread.</exception>
        </member>
        <member name="F:NanoByte.Common.Storage.Locations.PortableFlagName">
            <summary>
            The name of the flag file whose existence determines whether <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.IsPortable">
            <summary>
            Indicates whether the application is currently operating in portable mode.
            </summary>
            <remarks>
              <para>Portable mode is activated by placing a file named <see cref="F:NanoByte.Common.Storage.Locations.PortableFlagName"/> in <see cref="P:NanoByte.Common.Storage.Locations.InstallBase"/>.</para>
              <para>When portable mode is active files are stored and loaded from <see cref="P:NanoByte.Common.Storage.Locations.PortableBase"/> instead of the user profile and system directories.</para>
            </remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.PortableBase">
            <summary>
            The directory used for storing files if <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <c>true</c>.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Storage.Locations._secureSharedAcl">
            <summary>
            ACL that gives normal users read and execute access and admins and the the system full access.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.CreateSecureMachineWideDir(System.String)">
            <summary>
            Creates a directory with ACLs that block write-access for regular users.
            </summary>
            <exception cref="T:NanoByte.Common.NotAdminException">A directory does not exist yet and the user is not an administrator.</exception>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.HomeDir">
            <summary>
            The home/profile directory of the current user.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.UserConfigDir">
            <summary>
            The directory to store per-user settings (can roam across different machines).
            </summary>
            <remarks>On Windows this is <c>%appdata%</c>, on Linux it usually is <c>~/.config</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.UserDataDir">
            <summary>
            The directory to store per-user data files (should not roam across different machines).
            </summary>
            <remarks>On Windows this is <c>%localappdata%</c>, on Linux it usually is <c>~/.local/share</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.UserCacheDir">
            <summary>
            The directory to store per-user non-essential data (should not roam across different machines).
            </summary>
            <remarks>On Windows this is <c>%localappdata%</c>, on Linux it usually is <c>~/.cache</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.SystemConfigDirs">
            <summary>
            The directories to store machine-wide settings.
            </summary>
            <returns>Directories separated by <see cref="F:System.IO.Path.PathSeparator"/> sorted by decreasing importance.</returns>
            <remarks>On Windows this is <c>CommonApplicationData</c>, on Linux it usually is <c>/etc/xdg</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.SystemDataDirs">
            <summary>
            The directories to store machine-wide data files (should not roam across different machines).
            </summary>
            <returns>Directories separated by <see cref="F:System.IO.Path.PathSeparator"/> sorted by decreasing importance.</returns>
            <remarks>On Windows this is <c>CommonApplicationData</c>, on Linux it usually is <c>/usr/local/share:/usr/share</c>.</remarks>
        </member>
        <member name="P:NanoByte.Common.Storage.Locations.SystemCacheDir">
            <summary>
            The directory to store machine-wide non-essential data.
            </summary>
            <remarks>On Windows this is <c>CommonApplicationData</c>, on Linux it is <c>/var/cache</c>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetCacheDirPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for a cache directory (should not roam across different machines).
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <c>true</c>.</param>
            <param name="machineWide"><c>true</c> if the directory should be machine-wide.</param>
            <param name="resource">The directory name of the resource to be stored.</param>
            <returns>A fully qualified directory path. The directory is guaranteed to already exist.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetSaveConfigPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for storing a configuration resource (can roam across different machines).
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <c>true</c>.</param>
            <param name="isFile"><c>true</c> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be stored.</param>
            <returns>A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetSaveSystemConfigPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for storing a system-wide configuration resource.
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <c>true</c>.</param>
            <param name="isFile"><c>true</c> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be stored.</param>
            <returns>A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetLoadConfigPaths(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a list of paths for loading a configuration resource.
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <c>true</c>.</param>
            <param name="isFile"><c>true</c> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be loaded.</param>
            <returns>
            A list of fully qualified paths to use to load the resource sorted by decreasing importance.
            This list will always reflect the current state in the filesystem and can not be modified! It may be empty.
            </returns>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetSaveDataPath(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a path for storing a data resource (should not roam across different machines).
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <c>true</c>.</param>
            <param name="isFile"><c>true</c> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be stored.</param>
            <returns>A fully qualified path to use to store the resource. Directories are guaranteed to already exist; files are not.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while creating a directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetLoadDataPaths(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a list of paths for loading a data resource (should not roam across different machines).
            </summary>
            <param name="appName">The name of application. Used as part of the path, unless <see cref="P:NanoByte.Common.Storage.Locations.IsPortable"/> is <c>true</c>.</param>
            <param name="isFile"><c>true</c> if the last part of <paramref name="resource"/> refers to a file instead of a directory.</param>
            <param name="resource">The path elements (directory and/or file names) of the resource to be loaded.</param>
            <returns>
            A list of fully qualified paths to use to load the resource sorted by decreasing importance.
            This list will always reflect the current state in the filesystem and can not be modified! It may be empty.
            </returns>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.GetInstalledFilePath(System.String)">
            <summary>
            Tries to locate a file either in <see cref="P:NanoByte.Common.Storage.Locations.InstallBase"/>, the location of the NanoByte.Common.dll or in the PATH.
            </summary>
            <param name="fileName">The file name of the file to search for.</param>
            <returns>The fully qualified path of the first located instance of the file.</returns>
            <exception cref="T:System.IO.IOException">The file could not be found.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.Locations.PathCombine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.MoveDirectory">
            <summary>
            Moves the content of a directory to a new location preserving file timestamps, symlinks and hard links.
            </summary>
            <param name="sourcePath">The path of source directory. Must exist!</param>
            <param name="destinationPath">The path of the target directory. May exist.</param>>
        </member>
        <member name="M:NanoByte.Common.Storage.MoveDirectory.#ctor(System.String,System.String)">
            <summary>
            Moves the content of a directory to a new location preserving file timestamps, symlinks and hard links.
            </summary>
            <param name="sourcePath">The path of source directory. Must exist!</param>
            <param name="destinationPath">The path of the target directory. May exist.</param>>
        </member>
        <member name="M:NanoByte.Common.Storage.MoveDirectory.CopyFile(System.IO.FileInfo,System.IO.FileInfo)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Storage.Paths">
            <summary>
            Helper methods for resolving file system paths.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.Paths.ResolveFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Resolves paths to absolute file paths with wildcard support.
            </summary>
            <param name="paths">The paths to resolve.</param>
            <param name="defaultPattern">The default pattern to use for finding files when a directory is specified.</param>
            <returns>Handles to all matching files that were found</returns>
            <exception cref="T:System.IO.FileNotFoundException">A file that was explicitly specified in <paramref name="paths"/> (no wildcards) could not be found.</exception>
            <remarks><paramref name="paths"/> are first interpreted as files, then as directories. Directories are searched using the <paramref name="defaultPattern"/>. * and ? characters are considered as wildcards.</remarks>
        </member>
        <member name="T:NanoByte.Common.Storage.ReadDirectoryBase">
            <summary>
            Recursively iterates over all elements in a directory.
            </summary>
            <param name="path">The path of the directory to read.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.ReadDirectoryBase.#ctor(System.String)">
            <summary>
            Recursively iterates over all elements in a directory.
            </summary>
            <param name="path">The path of the directory to read.</param>
        </member>
        <member name="F:NanoByte.Common.Storage.ReadDirectoryBase.Source">
            <summary>
            The directory to read.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.ReadDirectoryBase.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Storage.ReadDirectoryBase.FollowSymlinks">
            <summary>
            Controls whether to follow symlinks.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.ReadDirectoryBase.Execute">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Storage.ReadDirectoryBase.HandleDirectory(System.IO.DirectoryInfo)">
            <summary>
            Called once for every sub-directory below <see cref="F:NanoByte.Common.Storage.ReadDirectoryBase.Source"/>.
            </summary>
            <param name="directory">The directory to handle.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.ReadDirectoryBase.HandleFile(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Called once for every file below <see cref="F:NanoByte.Common.Storage.ReadDirectoryBase.Source"/>.
            </summary>
            <param name="file">The file to handle.</param>
            <param name="hardlinkTarget">A previously handled file that is hardlinked to <paramref name="file"/>. May be <c>null</c>.</param>
        </member>
        <member name="T:NanoByte.Common.Storage.ReadFile">
            <summary>
            Reads a file from disk to a stream.
            </summary>
            <param name="path">The path of the file to read.</param>
            <param name="callback">Called with a stream providing the file content.</param>
            <param name="name">A name describing the task in human-readable form.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.ReadFile.#ctor(System.String,System.Action{System.IO.Stream},System.String)">
            <summary>
            Reads a file from disk to a stream.
            </summary>
            <param name="path">The path of the file to read.</param>
            <param name="callback">Called with a stream providing the file content.</param>
            <param name="name">A name describing the task in human-readable form.</param>
        </member>
        <member name="P:NanoByte.Common.Storage.ReadFile.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Storage.ReadFile.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Storage.ReadFile.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Storage.TemporaryDirectory">
            <summary>
            Represents a temporary directory that is automatically deleted when the object is disposed.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.TemporaryDirectory.Path">
            <summary>
            The fully qualified path of the temporary directory.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryDirectory.ToString">
            <summary>Returns <see cref="P:NanoByte.Common.Storage.TemporaryDirectory.Path"/>.</summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryDirectory.#ctor(System.String,System.String)">
            <summary>
            Creates a uniquely named, empty temporary directory on disk.
            </summary>
            <param name="prefix">A short string the directory name should start with.</param>
            <param name="parentDirectory">The path of the parent directory the new directory should be created in. Leave <c>null</c> to use the default temp directory.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while creating the temporary directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a directory in <see cref="M:System.IO.Path.GetTempPath"/> is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryDirectory.Dispose">
            <summary>
            Deletes the temporary directory.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.TemporaryFile">
            <summary>
            Represents a temporary file that is automatically deleted when the object is disposed.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.TemporaryFile.Path">
            <summary>
            The fully qualified path of the temporary file.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryFile.ToString">
            <summary>Returns <see cref="P:NanoByte.Common.Storage.TemporaryFile.Path"/>.</summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryFile.#ctor(System.String,System.String)">
            <summary>
            Creates a uniquely named, empty temporary file on disk.
            </summary>
            <param name="prefix">A short string the directory name should start with.</param>
            <param name="parentDirectory">The path of the directory the file should be created in. Leave <c>null</c> to use the default temp directory.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while creating the temporary file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Creating a file in <see cref="M:System.IO.Path.GetTempPath"/> is not permitted.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryFile.Dispose">
            <summary>
            Deletes the temporary file.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.TemporaryFlagFile">
            <summary>
            A temporary directory with a file that may or may not exist to indicate whether a certain condition is true or false.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryFlagFile.#ctor(System.String)">
            <summary>
            A temporary directory with a file that may or may not exist to indicate whether a certain condition is true or false.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.TemporaryFlagFile.Path">
            <summary>
            The fully qualified path of the flag file.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryFlagFile.ToString">
            <summary>Returns <see cref="P:NanoByte.Common.Storage.TemporaryFlagFile.Path"/>.</summary>
        </member>
        <member name="P:NanoByte.Common.Storage.TemporaryFlagFile.Set">
            <summary>
            Indicates or controls whether the file exists.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.TemporaryWorkingDirectory">
            <summary>
            Like <see cref="T:NanoByte.Common.Storage.TemporaryDirectory"/> but also sets the current working directory to <see cref="P:NanoByte.Common.Storage.TemporaryDirectory.Path"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.TemporaryWorkingDirectory.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Storage.WorkingDirectory">
            <summary>
            Changes the current working working directory until the object is disposed.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.WorkingDirectory.#ctor(System.String)">
            <summary>
            Changes the current working directory to <paramref name="path"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.WorkingDirectory.Dispose">
            <summary>
            Restores the previous working directory.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Storage.XmlNamespaceAttribute">
            <summary>
            Allows you to specify a <see cref="T:System.Xml.XmlQualifiedName"/> (namespace short-name) for <see cref="T:NanoByte.Common.Storage.XmlStorage"/> to use.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Storage.XmlNamespaceAttribute.QualifiedName">
            <summary>
            The <see cref="T:System.Xml.XmlQualifiedName"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlNamespaceAttribute.#ctor(System.String,System.String)">
            <summary>
            Specified a <see cref="T:System.Xml.XmlQualifiedName"/> (namespace short-name) for <see cref="T:NanoByte.Common.Storage.XmlStorage"/> to use.
            </summary>
            <param name="name">The short-name.</param>
            <param name="ns">The full namespace URI.</param>
        </member>
        <member name="T:NanoByte.Common.Storage.XmlStorage">
            <summary>
            Provides easy serialization to XML files.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Storage.XmlStorage.XsiNamespace">
            <summary>
            The XML namespace used for XML Schema instance.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.LoadXml``1(System.IO.Stream)">
            <summary>
            Loads an object from an XML file.
            </summary>
            <typeparam name="T">The type of object the XML stream shall be converted into.</typeparam>
            <param name="stream">The stream to read the encoded XML data from.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the XML data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.LoadXml``1(System.String)">
            <summary>
            Loads an object from an XML file.
            </summary>
            <typeparam name="T">The type of object the XML stream shall be converted into.</typeparam>
            <param name="path">The path of the file to load.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.IOException">A problem occurred while reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file is not permitted.</exception>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the XML data.</exception>
            <remarks>Uses <see cref="T:NanoByte.Common.Storage.AtomicRead"/> internally.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.FromXmlString``1(System.String)">
            <summary>
            Loads an object from an XML string.
            </summary>
            <typeparam name="T">The type of object the XML string shall be converted into.</typeparam>
            <param name="data">The XML string to be parsed.</param>
            <returns>The loaded object.</returns>
            <exception cref="T:System.IO.InvalidDataException">A problem occurred while deserializing the XML data.</exception>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.SaveXml(System.Object,System.IO.Stream,System.String)">
            <summary>
            Saves an object in an XML stream ending with a line break.
            </summary>
            <param name="data">The object to be stored.</param>
            <param name="stream">The stream to write the encoded XML data to.</param>
            <param name="stylesheet">The path of an XSL stylesheet; can be <c>null</c>.</param>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.SaveXml``1(``0,System.String,System.String)">
            <summary>
            Saves an object in an XML file ending with a line break.
            </summary>
            <remarks>This method performs an atomic write operation when possible.</remarks>
            <typeparam name="T">The type of object to be saved in an XML stream.</typeparam>
            <param name="data">The object to be stored.</param>
            <param name="path">The path of the file to write.</param>
            <param name="stylesheet">The path of an XSL stylesheet for <typeparamref name="T"/>; can be <c>null</c>.</param>
            <exception cref="T:System.IO.IOException">A problem occurred while writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file is not permitted.</exception>
            <remarks>Uses <see cref="T:NanoByte.Common.Storage.AtomicWrite"/> internally.</remarks>
        </member>
        <member name="M:NanoByte.Common.Storage.XmlStorage.ToXmlString(System.Object,System.String)">
            <summary>
            Returns an object as an XML string ending with a line break.
            </summary>
            <param name="data">The object to be stored.</param>
            <param name="stylesheet">The path of an XSL stylesheet; can be <c>null</c>.</param>
            <returns>A string containing the XML code.</returns>
        </member>
        <member name="T:NanoByte.Common.Streams.DelegatingStream">
            <summary>
            Forwards all requests to another <see cref="T:System.IO.Stream"/>s. Useful as a base class for decorators/wrappers.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.#ctor(System.IO.Stream)">
            <summary>
            Forwards all requests to another <see cref="T:System.IO.Stream"/>s. Useful as a base class for decorators/wrappers.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
        </member>
        <member name="F:NanoByte.Common.Streams.DelegatingStream.UnderlyingStream">
            <summary>
            Underlying stream to delegate to.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Streams.DelegatingStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DelegatingStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DelegatingStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DelegatingStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DelegatingStream.CanTimeout">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DelegatingStream.ReadTimeout">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DelegatingStream.WriteTimeout">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.DelegatingStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.DelegatingStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Streams.NonSeekableStream">
            <summary>
            Decorator that prevents a stream from being seeked.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.NonSeekableStream.#ctor(System.IO.Stream)">
            <summary>
            Decorator that prevents a stream from being seeked.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
        </member>
        <member name="P:NanoByte.Common.Streams.NonSeekableStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.NonSeekableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.NonSeekableStream.Position">
            <inheritdoc />
        </member>
        <member name="T:NanoByte.Common.Streams.OffsetStream">
            <summary>
            Decorator that transparently applies an offset to another <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.#ctor(System.IO.Stream)">
            <summary>
            Decorator that transparently applies an offset to another <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.ApplyOffset(System.Int32)">
            <summary>
            Applies an offset to the underlying stream.
            </summary>
            <param name="offset">The number of bytes to offset by. Must not be negative.</param>
            <exception cref="T:System.IO.IOException">The underlying stream was shorter than the specified <paramref name="offset"/>.</exception>
        </member>
        <member name="P:NanoByte.Common.Streams.OffsetStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.OffsetStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.OffsetStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Streams.ProgressStream">
            <summary>
            Decorator that adds progress-tracking and cancellation to another <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
            <param name="progress">Used to report back the number of bytes that have been read or written.</param>
            <param name="cancellationToken">Used to signal when the user wants to cancel the stream. If signaled read an write requests will start throwing <see cref="T:System.OperationCanceledException"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.ProgressStream.#ctor(System.IO.Stream,System.IProgress{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Decorator that adds progress-tracking and cancellation to another <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
            <param name="progress">Used to report back the number of bytes that have been read or written.</param>
            <param name="cancellationToken">Used to signal when the user wants to cancel the stream. If signaled read an write requests will start throwing <see cref="T:System.OperationCanceledException"/>.</param>
        </member>
        <member name="P:NanoByte.Common.Streams.ProgressStream.Length">
            <summary>
            The length of the underlying stream if <see cref="P:System.IO.Stream.CanSeek"/> is <c>true</c>. Otherwise, the number of bytes read or written so far.
            This value can also be overriden by <see cref="M:NanoByte.Common.Streams.ProgressStream.SetLength(System.Int64)"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.ProgressStream.SetLength(System.Int64)">
            <summary>
            Overrides the value returned by <see cref="P:NanoByte.Common.Streams.ProgressStream.Length"/>. Does not affect the underlying stream.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.ProgressStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.ProgressStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.ProgressStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.ProgressStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.ProgressStream.Report(System.Int32)">
            <summary>
            Reports the current progress.
            </summary>
            <param name="count">Number of bytes read or written in the current operation.</param>
            <returns><paramref name="count"/></returns>
            <exception cref="T:System.OperationCanceledException">Cancellation has been requested.</exception>
        </member>
        <member name="T:NanoByte.Common.Streams.ReadStream">
            <summary>
            Reads the contents of a stream.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="stream">The stream to read.</param>
            <param name="callback">Called with a <see cref="T:NanoByte.Common.Streams.ProgressStream"/> wrapped around the <paramref name="stream"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.ReadStream.#ctor(System.String,System.IO.Stream,System.Action{System.IO.Stream})">
            <summary>
            Reads the contents of a stream.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="stream">The stream to read.</param>
            <param name="callback">Called with a <see cref="T:NanoByte.Common.Streams.ProgressStream"/> wrapped around the <paramref name="stream"/>.</param>
        </member>
        <member name="P:NanoByte.Common.Streams.ReadStream.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.ReadStream.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.ReadStream.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Streams.SeekBufferStream">
            <summary>
            Decorator that adds seek buffering to another <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
            <param name="bufferSize">The maximum number of bytes to buffer for seeking backwards. Set this to 0 to allow forward but no backward seeking.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.SeekBufferStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Decorator that adds seek buffering to another <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
            <param name="bufferSize">The maximum number of bytes to buffer for seeking backwards. Set this to 0 to allow forward but no backward seeking.</param>
        </member>
        <member name="F:NanoByte.Common.Streams.SeekBufferStream.DefaultBufferSize">
            <summary>
            The default for the maximum number of bytes to buffer for seeking backwards.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Streams.SeekBufferStream._buffer">
            <summary>Stores already read bytes as a ring buffer.</summary>
        </member>
        <member name="M:NanoByte.Common.Streams.SeekBufferStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.SeekBufferStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Streams.SeekBufferStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.SeekBufferStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="F:NanoByte.Common.Streams.SeekBufferStream._underlyingPosition">
            <summary>The current position of the <see cref="F:NanoByte.Common.Streams.DelegatingStream.UnderlyingStream"/>.</summary>
        </member>
        <member name="M:NanoByte.Common.Streams.SeekBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.SeekBufferStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="F:NanoByte.Common.Streams.SeekBufferStream._nextWriteIndex">
            <summary>The index of the next byte to be written in the <see cref="F:NanoByte.Common.Streams.SeekBufferStream._buffer"/>.</summary>
        </member>
        <member name="M:NanoByte.Common.Streams.SeekBufferStream.TryReadFromBuffer(System.Span{System.Byte},System.Int32@)">
            <summary>
            Tries to read data from the buffer to <paramref name="output"/>.
            </summary>
            <param name="output">The span to read the data to.</param>
            <param name="read">The number of bytes that were read.</param>
            <returns><c>true</c> if data was read from the buffer; <c>false</c> if <see cref="F:NanoByte.Common.Streams.DelegatingStream.UnderlyingStream"/> should be used instead.</returns>
            <exception cref="T:System.IO.IOException">Tried to read data outside of the buffered range.</exception>
        </member>
        <member name="P:NanoByte.Common.Streams.SeekBufferStream.MaxRead">
            <summary>
            The maximum number of bytes that may be read consecutively.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.SeekBufferStream.WriteToBuffer(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes <paramref name="data"/> to the buffer.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Streams.ShadowingStream">
            <summary>
            Decorator that copies all bytes read from a <see cref="T:System.IO.Stream"/> to another <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
            <param name="shadowStream">The stream to copy all read bytes to.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.ShadowingStream.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decorator that copies all bytes read from a <see cref="T:System.IO.Stream"/> to another <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="underlyingStream">Underlying stream to delegate to. Will be disposed together with this stream.</param>
            <param name="shadowStream">The stream to copy all read bytes to.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.ShadowingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Streams.ShadowingStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Streams.StreamConsumer">
            <summary>
            Continuously reads lines from a <see cref="T:System.IO.StreamReader"/> using a background thread while providing them to a foreground thread on demand.
            </summary>
            <remarks>Useful for processing <see cref="P:System.Diagnostics.Process.StandardOutput"/> and <see cref="P:System.Diagnostics.Process.StandardError"/> without risking deadlocks.</remarks>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamConsumer.#ctor(System.IO.StreamReader)">
            <summary>
            Starts reading from the stream in a background thread.
            </summary>
            <param name="reader">The stream to read from.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamConsumer.ReadLine">
            <summary>
            Returns the next pending line; <c>null</c> if there are no pending lines.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamConsumer.WaitForEnd">
            <summary>
            Waits for <see cref="P:System.IO.StreamReader.EndOfStream"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamConsumer.ToString">
            <summary>
            Returns all buffered lines that have not been read yet.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Streams.StreamUtils">
            <summary>
            Provides <see cref="T:System.IO.Stream"/>-related helper methods.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.Read(System.IO.Stream,System.Int32)">
            <summary>
            Reads a fixed number of bytes from a stream starting from the current offset.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The bytes read from the stream.</returns>
            <exception cref="T:System.IO.IOException">The desired number of bytes could not be read from the stream.</exception>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.Read(System.IO.Stream,System.ArraySegment{System.Byte})">
            <summary>
            Reads a sequence of bytes from the stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="buffer">The buffer to read the bytes into.</param>
            <returns>The bytes read from the stream.</returns>
            <exception cref="T:System.IO.IOException">The desired number of bytes could not be read from the stream.</exception>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.TryRead(System.IO.Stream,System.Int32)">
            <summary>
            Reads a fixed number of bytes from a stream starting from the current offset.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The bytes read from the stream; <c>null</c> if the desired number of bytes could not be read from the stream.</returns>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ReadAll(System.IO.Stream)">
            <summary>
            Reads the entire content of a stream. Seeks to the beginning of the stream if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The entire content of the stream.</returns>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.Skip(System.IO.Stream,System.Int32)">
            <summary>
            Skips a number of bytes in the stream.
            Uses <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> if supported, <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> otherwise.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="count">The number of bytes to skip.</param>
            <exception cref="T:System.IO.IOException">The desired number of bytes could not be skipped in the stream.</exception>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Writes the entire contents of an array to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="data">The array containing the bytes to write.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.Write(System.IO.Stream,System.ArraySegment{System.Byte})">
            <summary>
            Writes the entire contents of a buffer to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="buffer">The buffer containing the bytes to write.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.AsArray(System.IO.Stream)">
            <summary>
            The entire content of a stream as an array. Seeks to the beginning of the stream if <see cref="P:System.IO.Stream.CanSeek"/>. Avoids copying the underlying array if possible.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ToMemory(System.IO.Stream)">
            <summary>
            Copies the entire content of a stream to a <see cref="T:System.IO.MemoryStream"/>. Seeks to the beginning of the stream if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>A new stream or the original <paramref name="stream"/> if it was already a <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.CopyToEx(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the content of one stream to another. Seeks to the beginning of the <paramref name="source"/> stream if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="source">The source stream to copy from.</param>
            <param name="destination">The destination stream to copy to.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.CopyToFile(System.IO.Stream,System.String)">
            <summary>
            Writes the entire content of a stream to a file. Seeks to the beginning of the <paramref name="stream"/> if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="path">The path of the file to write.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.WithSeekBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Adds seek buffering to a stream unless it already <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="stream">The stream.</param>
            <param name="bufferSize">The maximum number of bytes to buffer for seeking backwards. Set this to 0 to allow forward but no backward seeking.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.WithLength(System.IO.Stream,System.Int64)">
            <summary>
            Overrides the value returned by <see cref="P:System.IO.Stream.Length"/>.
            </summary>
            <param name="stream">The stream.</param>
            <param name="length">The value to return for <see cref="P:System.IO.Stream.Length"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ReadToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads the entire content of a stream as string data. Seeks to the beginning of the stream if <see cref="P:System.IO.Stream.CanSeek"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="encoding">The encoding of the string; leave <c>null</c> to default to <see cref="F:NanoByte.Common.EncodingUtils.Utf8"/>.</param>
            <returns>A entire content of the stream.</returns>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ToStream(System.String,System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:System.IO.MemoryStream"/> and fills it with string data.
            </summary>
            <param name="data">The data to fill the stream with.</param>
            <param name="encoding">The encoding of the string; leave <c>null</c> to default to <see cref="F:NanoByte.Common.EncodingUtils.Utf8"/>.</param>
            <returns>A filled stream with the position set to zero.</returns>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ToStream(System.Byte[],System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.IO.MemoryStream"/> using the existing array as the underlying storage.
            </summary>
            <param name="array">The array to create the stream from.</param>
            <param name="writable">Controls whether the stream is writable (i.e., can modify the array).</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.ToStream(System.ArraySegment{System.Byte},System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.IO.MemoryStream"/> using the existing array segment as the underlying storage.
            </summary>
            <param name="segment">The array segment to create the stream from.</param>
            <param name="writable">Controls whether the stream is writable (i.e., can modify the array).</param>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.GetEmbeddedStream(System.Type,System.String)">
            <summary>
            Returns an embedded resource as a stream.
            </summary>
            <param name="type">A type that is located in the same namespace as the embedded resource.</param>
            <param name="name">The name of the embedded resource.</param>
            <exception cref="T:System.ArgumentException">The specified embedded resource does not exist.</exception>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.GetEmbeddedBytes(System.Type,System.String)">
            <summary>
            Returns an embedded resource as a byte array.
            </summary>
            <param name="type">A type that is located in the same namespace as the embedded resource.</param>
            <param name="name">The name of the embedded resource.</param>
            <exception cref="T:System.ArgumentException">The specified embedded resource does not exist.</exception>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.GetEmbeddedString(System.Type,System.String,System.Text.Encoding)">
            <summary>
            Returns an embedded resource as a string.
            </summary>
            <param name="type">A type that is located in the same namespace as the embedded resource.</param>
            <param name="name">The name of the embedded resource.</param>
            <param name="encoding">The encoding of the string; leave <c>null</c> to default to <see cref="F:NanoByte.Common.EncodingUtils.Utf8"/>.</param>
            <exception cref="T:System.ArgumentException">The specified embedded resource does not exist.</exception>
        </member>
        <member name="M:NanoByte.Common.Streams.StreamUtils.CopyEmbeddedToFile(System.Type,System.String,System.String)">
            <summary>
            Copies an embedded resource to a file.
            </summary>
            <param name="type">A type that is located in the same namespace as the embedded resource.</param>
            <param name="name">The name of the embedded resource.</param>
            <param name="path">The path of the file to write.</param>
            <exception cref="T:System.ArgumentException">The specified embedded resource does not exist.</exception>
        </member>
        <member name="T:NanoByte.Common.StringUtils">
            <summary>
            Provides additional or simplified string functions.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Compares strings using case-insensitive comparison.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EqualsIgnoreCase(System.Char,System.Char)">
            <summary>
            Compares chars using case-insensitive comparison.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EqualsEmptyNull(System.String,System.String)">
            <summary>
            Compares strings using case sensitive, invariant culture comparison and considering <c>null</c> and <see cref="F:System.String.Empty"/> equal.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether a string contains <paramref name="searchFor"/> using case-insensitive comparison.
            </summary>
            <param name="value">The string to search.</param>
            <param name="searchFor">The string to search for in <paramref name="value"/>.</param>
        </member>
        <member name="M:NanoByte.Common.StringUtils.ContainsWhitespace(System.String)">
            <summary>
            Determines whether a string contains any whitespace characters.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.StartsWith(System.String,System.String,System.String@)">
            <summary>
            Determines whether a string starts with <paramref name="searchFor"/> and, if so, returns the <paramref name="rest"/> that comes after.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EndsWith(System.String,System.String,System.String@)">
            <summary>
            Determines whether a string starts with <paramref name="searchFor"/> and, if so, returns the <paramref name="rest"/> that comes before.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether a string starts with <paramref name="searchFor"/> with case-insensitive comparison.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether a string ends with <paramref name="searchFor"/> with case-insensitive comparison.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.RemoveCharacters(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Removes all occurrences of a specific set of characters from a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.TrimOverflow(System.String,System.Int32)">
            <summary>
            Cuts off strings longer than <paramref name="maxLength"/> and replaces the rest with ellipsis (...).
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.SplitMultilineText(System.String)">
            <summary>
            Splits a multiline string to several strings and returns the result as a string array.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines multiple strings into one, placing a <paramref name="separator"/> between the <paramref name="parts"/>.
            </summary>
            <param name="separator">The separator characters to place between the <paramref name="parts"/>.</param>
            <param name="parts">The strings to be combined.</param>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetLeftPartAtFirstOccurrence(System.String,System.Char)">
            <summary>
            Get everything to the left of the first occurrence of a character.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetRightPartAtFirstOccurrence(System.String,System.Char)">
            <summary>
            Get everything to the right of the first occurrence of a character.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetLeftPartAtLastOccurrence(System.String,System.Char)">
            <summary>
            Get everything to the left of the last occurrence of a character.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetRightPartAtLastOccurrence(System.String,System.Char)">
            <summary>
            Get everything to the right of the last occurrence of a character.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetLeftPartAtFirstOccurrence(System.String,System.String)">
            <summary>
            Get everything to the left of the first occurrence of a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetRightPartAtFirstOccurrence(System.String,System.String)">
            <summary>
            Get everything to the right of the first occurrence of a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetLeftPartAtLastOccurrence(System.String,System.String)">
            <summary>
            Get everything to the left of the last occurrence of a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GetRightPartAtLastOccurrence(System.String,System.String)">
            <summary>
            Get everything to the right of the last occurrence of a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.StringUtils.FormatBytes(System.Int64,System.IFormatProvider)">
            <summary>
            Formats a byte number in human-readable form (KB, MB, GB).
            </summary>
            <param name="value">The value in bytes.</param>
            <param name="provider">Provides culture-specific formatting information.</param>
        </member>
        <member name="M:NanoByte.Common.StringUtils.GeneratePassword(System.Int32)">
            <summary>
            Returns a string filled with random human-readable ASCII characters based on a cryptographic random number generator.
            </summary>
            <param name="length">The length of the string to be generated.</param>
        </member>
        <member name="T:NanoByte.Common.Tasks.ActionTask">
            <summary>
            A task that executes an <see cref="T:System.Action"/>. Only completion is reported, no intermediate progress.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">An optional callback to be called when cancellation is requested via a <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.ActionTask.#ctor(System.String,System.Action,System.Action)">
            <summary>
            A task that executes an <see cref="T:System.Action"/>. Only completion is reported, no intermediate progress.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">An optional callback to be called when cancellation is requested via a <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="P:NanoByte.Common.Tasks.ActionTask.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.ActionTask.CanCancel">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.ActionTask.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.ActionTask.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.CliProgress">
            <summary>
            Reports task progress updates using console output.
            </summary>
            <seealso cref="M:NanoByte.Common.Tasks.CliTaskHandler.RunTask(NanoByte.Common.Tasks.ITask)"/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliProgress.Report(NanoByte.Common.Tasks.TaskSnapshot)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.CliTaskHandler">
            <summary>
            Informs the user about the progress of tasks and ask questions using console output.
            </summary>
            <remarks>This class is thread-safe.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.#ctor">
            <summary>
            Creates a new CLI task handler.
            Registers a <see cref="E:NanoByte.Common.Log.Handler"/> and a <see cref="E:System.Console.CancelKeyPress"/> handler.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.Dispose">
            <summary>
            Unregisters the <see cref="E:NanoByte.Common.Log.Handler"/> and the <see cref="E:System.Console.CancelKeyPress"/> handler.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.CancelKeyPressHandler(System.Object,System.ConsoleCancelEventArgs)">
            <summary>
            Handles Ctrl+C key presses.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.DisplayLogEntry(NanoByte.Common.LogSeverity,System.String)">
            <summary>
            Prints <see cref="T:NanoByte.Common.Log"/> entries to the <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.GetLogColor(NanoByte.Common.LogSeverity)">
            <summary>
            Determines the color to use for a log entry based on the <see cref="T:NanoByte.Common.LogSeverity"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.CliTaskHandler.CredentialProvider">
            <inheritdoc />
        </member>
        <member name="P:NanoByte.Common.Tasks.CliTaskHandler.IsInteractive">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.RunTask(NanoByte.Common.Tasks.ITask)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.AskInteractive(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.Output(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.CliTaskHandler.Error(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.DeferredProgress`1">
            <summary>
            Remembers the latest call made to <see cref="M:NanoByte.Common.Tasks.DeferredProgress`1.Report(`0)"/>. Forwards that call (if any) and all future calls to a target <see cref="T:System.IProgress`1"/> implementation once it is set.
            </summary>
            <typeparam name="T">The type of progress update value.</typeparam>
            <remarks>
            If <see cref="M:NanoByte.Common.Tasks.DeferredProgress`1.Report(`0)"/> and <see cref="M:NanoByte.Common.Tasks.DeferredProgress`1.SetTarget(System.IProgress{`0})"/> are called on different threads individual progress reports may be lost.
            This tradeoff is made intentionally to avoid locking for better performance.
            </remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.DeferredProgress`1.SetTarget(System.IProgress{`0})">
            <summary>
            Sets the target <see cref="T:System.IProgress`1"/> implementation to forward <see cref="M:NanoByte.Common.Tasks.DeferredProgress`1.Report(`0)"/> calls to.
            </summary>
            <exception cref="T:System.InvalidOperationException">The target is already set.</exception>
        </member>
        <member name="M:NanoByte.Common.Tasks.DeferredProgress`1.Report(`0)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.ForEachTask`1">
            <summary>
            A task that executes an action once for each element of a collection.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.ForEachTask`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.ForEachTask`1.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.ForEachTask`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},System.Action{`0},System.Action{`0})">
            <summary>
            Creates a new task that executes an action once for each element of a collection.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="target">A list of objects to execute the action for. Cancellation is possible between any two elements.</param>
            <param name="action">The action to be executed once per element in <paramref name="target"/>.</param>
            <param name="rollback">
            An optional action to try to undo changes made by <paramref name="action"/> in case one of the invocations failed or the task was cancelled.
            Called once for each element for which <paramref name="action"/> was called (even if it failed), in reverse order. Any exceptions thrown here are logged and then ignored.
            </param>
        </member>
        <member name="M:NanoByte.Common.Tasks.ForEachTask`1.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.ForEachTask">
            <summary>
            Provides a static factory method for <see cref="T:NanoByte.Common.Tasks.ForEachTask`1"/> as an alternative to calling the constructor to exploit type inference.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.ForEachTask.Create``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Creates a new task that executes an action once for each element of a collection.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="target">A list of objects to execute the action for. Cancellation is possible between any two elements.</param>
            <param name="action">The action to be executed once per element in <paramref name="target"/>.</param>
            <param name="rollback">
            An optional action to try to undo changes made by <paramref name="action"/> in case one of the invocations failed or the task was cancelled.
            Called once for each element for which <paramref name="action"/> was called (even if it failed), in reverse order. Any exceptions thrown here are logged and then ignored.
            </param>
        </member>
        <member name="T:NanoByte.Common.Tasks.IResultTask`1">
            <summary>
            A task the provides a result.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.IResultTask`1.Result">
            <summary>
            The result of the task.
            </summary>
            <exception cref="T:System.InvalidOperationException">The task is not <see cref="F:NanoByte.Common.Tasks.TaskState.Complete"/>.</exception>
        </member>
        <member name="T:NanoByte.Common.Tasks.ITask">
            <summary>
            Represents an operation that can be cancelled and have its progress tracked.
            </summary>
            <seealso cref="T:NanoByte.Common.Tasks.ITaskHandler"/>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITask.Run(System.Threading.CancellationToken,NanoByte.Common.Net.ICredentialProvider,System.IProgress{NanoByte.Common.Tasks.TaskSnapshot})">
            <summary>
            Runs the task and blocks until it is complete.
            </summary>
            <param name="cancellationToken">Used to receive a signal (e.g. from another thread) when the user wants to cancel the task.</param>
            <param name="credentialProvider">Object used to retrieve credentials for specific <see cref="T:System.Uri"/>s on demand; can be <c>null</c>.</param>
            <param name="progress">Used to report back the task's progress (e.g. to another thread).</param>
            <exception cref="T:System.OperationCanceledException">The task was canceled from another thread.</exception>
            <exception cref="T:System.IO.IOException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.IOError"/>.</exception>
            <exception cref="T:System.Net.WebException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.WebError"/>.</exception>
            <seealso cref="M:NanoByte.Common.Tasks.ITaskHandler.RunTask(NanoByte.Common.Tasks.ITask)"/>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITask.Name">
            <summary>
            A name describing the task in human-readable form.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITask.Tag">
            <summary>
            An object used to associate the task with a specific process; can be <c>null</c>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITask.CanCancel">
            <summary>
            Indicates whether this task can be canceled once it has been started.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Tasks.ITaskHandler">
            <summary>
            Used to run and track <see cref="T:NanoByte.Common.Tasks.ITask"/>s and ask the user questions. Specific implementations provide different kinds of user interfaces.
            </summary>
            <remarks>Implementations of this interface are thread-safe.</remarks>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITaskHandler.CancellationToken">
            <summary>
            Used to signal when the user wants to cancel the entire current process (and any <see cref="T:NanoByte.Common.Tasks.ITask"/>s it includes).
            </summary>
            <remarks>Once this has been signalled this <see cref="T:NanoByte.Common.Tasks.ITaskHandler"/> cannot be reused, since any subsequently started <see cref="T:NanoByte.Common.Tasks.ITask"/>s will be cancelled immediately.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.RunTask(NanoByte.Common.Tasks.ITask)">
            <summary>
            Runs an <see cref="T:NanoByte.Common.Tasks.ITask"/> and tracks its progress. Returns once the task has been completed.
            </summary>
            <param name="task">The task to be run. (<see cref="M:NanoByte.Common.Tasks.ITask.Run(System.Threading.CancellationToken,NanoByte.Common.Net.ICredentialProvider,System.IProgress{NanoByte.Common.Tasks.TaskSnapshot})"/> or equivalent is called on it.)</param>
            <exception cref="T:System.OperationCanceledException">The user canceled the task.</exception>
            <exception cref="T:System.IO.IOException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.IOError"/>.</exception>
            <exception cref="T:System.Net.WebException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.WebError"/>.</exception>
        </member>
        <member name="P:NanoByte.Common.Tasks.ITaskHandler.Verbosity">
            <summary>
            The detail level of messages displayed to the user.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Ask(System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Asks the user a Yes/No/Cancel question.
            </summary>
            <param name="question">The question and comprehensive information to help the user make an informed decision.</param>
            <param name="defaultAnswer">The default answer to preselect. May be chosen automatically if the user cannot be asked. <c>null</c> if the user must make the choice themselves.</param>
            <param name="alternateMessage">A message to output with <see cref="M:NanoByte.Common.Log.Warn(System.String,System.Exception)"/> when the <paramref name="defaultAnswer"/> is used instead of asking the user.</param>
            <returns><c>true</c> if the user answered with 'Yes'; <c>false</c> if the user answered with 'No'.</returns>
            <exception cref="T:System.OperationCanceledException">Throw if the user answered with 'Cancel' or if no answer can be obtained.</exception>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Output(System.String,System.String)">
            <summary>
            Displays multi-line text to the user.
            </summary>
            <param name="title">A title for the message.</param>
            <param name="message">The string to display. Trailing linebreaks are appropriately handled or ignored.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Output``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Displays tabular data to the user.
            </summary>
            <param name="title">A title for the data.</param>
            <param name="data">The data to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Output``1(System.String,NanoByte.Common.Collections.NamedCollection{``0})">
            <summary>
            Displays tree-like data to the user.
            </summary>
            <param name="title">A title for the data.INamed</param>
            <param name="data">The data to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.ITaskHandler.Error(System.Exception)">
            <summary>
            Displays an error message to the user.
            </summary>
            <param name="exception">The exception representing the error that occurred.</param>
        </member>
        <member name="T:NanoByte.Common.Tasks.PercentProgressCallback">
            <summary>
            A callback to be called by a workload to report its progress in percent.
            </summary>
            <param name="percent">The workload's progress in percent.</param>
        </member>
        <member name="T:NanoByte.Common.Tasks.PercentageTask">
            <summary>
            A task that executes an <see cref="T:System.Action`1"/> and reports progress in percent.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task. Is given a callback to report progress in percent. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">An optional callback to be called when cancellation is requested via a <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.PercentageTask.#ctor(System.String,System.Action{NanoByte.Common.Tasks.PercentProgressCallback},System.Action)">
            <summary>
            A task that executes an <see cref="T:System.Action`1"/> and reports progress in percent.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task. Is given a callback to report progress in percent. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">An optional callback to be called when cancellation is requested via a <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="P:NanoByte.Common.Tasks.PercentageTask.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.PercentageTask.CanCancel">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.PercentageTask.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.PercentageTask.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.ResultTask`1">
            <summary>
            A task that executes a callback and the provides a result. Only completion is reported, no intermediate progress.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task that provides a result. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">An optional callback to be called when cancellation is requested via a <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.ResultTask`1.#ctor(System.String,System.Func{`0},System.Action)">
            <summary>
            A task that executes a callback and the provides a result. Only completion is reported, no intermediate progress.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task that provides a result. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">An optional callback to be called when cancellation is requested via a <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="P:NanoByte.Common.Tasks.ResultTask`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.ResultTask`1.Result">
            <inheritdoc/>
        </member>
        <member name="F:NanoByte.Common.Tasks.ResultTask`1._cancellationCallback">
            <summary>An optional callback to be called when cancellation is requested via a <see cref="T:System.Threading.CancellationToken"/>.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.ResultTask`1.CanCancel">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.ResultTask`1.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.ResultTask`1.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.ResultTask">
            <summary>
            Provides a static factory method for <see cref="T:NanoByte.Common.Tasks.ResultTask`1"/> as an alternative to calling the constructor to exploit type inference.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.ResultTask.Create``1(System.String,System.Func{``0},System.Action)">
            <summary>
            Creates a new task that executes a callback and the provides a result. Only completion is reported, no intermediate progress.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="work">The code to be executed by the task that provides a result. May throw <see cref="T:System.Net.WebException"/>, <see cref="T:System.IO.IOException"/> or <see cref="T:System.OperationCanceledException"/>.</param>
            <param name="cancellationCallback">An optional callback to be called when cancellation is requested via a <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Tasks.SilentTaskHandler">
            <summary>
            Executes tasks silently and suppresses any questions.
            </summary>
            <remarks>This class is thread-safe.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.SilentTaskHandler.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Cancel">
            <summary>
            Cancels currently running <see cref="T:NanoByte.Common.Tasks.ITask"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.RunTask(NanoByte.Common.Tasks.ITask)">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.SilentTaskHandler.Verbosity">
            <summary>
            Always returns <see cref="F:NanoByte.Common.Tasks.Verbosity.Batch"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Ask(System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Returns <paramref name="defaultAnswer"/> if specified or <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Output(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Output``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Output``1(System.String,NanoByte.Common.Collections.NamedCollection{``0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.SilentTaskHandler.Error(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskBase">
            <summary>
            Abstract base class for <see cref="T:NanoByte.Common.Tasks.ITask"/> implementations.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.Tag">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.CanCancel">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.PreventIdle">
            <summary>
            Indicates whether this task should prevent the system from entering idle mode.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskBase.CancellationToken">
            <summary>Signaled when the user wants to cancel the task execution.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskBase._progress">
            <summary>Used to report back the task's progress.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskBase.CredentialProvider">
            <summary>Used to retrieve credentials for specific <see cref="T:System.Uri"/>s on demand; can be <c>null</c>.</summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskBase.Run(System.Threading.CancellationToken,NanoByte.Common.Net.ICredentialProvider,System.IProgress{NanoByte.Common.Tasks.TaskSnapshot})">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.State">
            <summary>The current State of the task.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.UnitsByte">
            <summary>
            <c>true</c> if <see cref="P:NanoByte.Common.Tasks.TaskBase.UnitsProcessed"/> and <see cref="P:NanoByte.Common.Tasks.TaskBase.UnitsTotal"/> are measured in bytes;
            <c>false</c> if they are measured in generic units.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.UnitsProcessed">
            <summary>The number of units that have been processed so far.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskBase.UnitsTotal">
            <summary>The total number of units that are to be processed; -1 for unknown.</summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskBase.OnProgressChanged">
            <summary>
            Informs the caller of the current progress, if a callback was registered.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskBase.OnProgressChangedThrottled">
            <summary>
            Informs the caller of the current progress, if a callback was registered. Limits the rate of progress updates.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskBase.Execute">
            <summary>
            The actual code to be executed.
            </summary>
            <remarks>
            <see cref="P:NanoByte.Common.Tasks.TaskBase.State"/> is automatically set
            to <see cref="F:NanoByte.Common.Tasks.TaskState.Started"/> before calling this method,
            to <see cref="F:NanoByte.Common.Tasks.TaskState.Complete"/> after a successful exit and
            to an appropriate error state in case on an exception.
            You can set additional <see cref="T:NanoByte.Common.Tasks.TaskState"/>s during execution.
            </remarks>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <exception cref="T:System.IO.IOException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.IOError"/>.</exception>
            <exception cref="T:System.Net.WebException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.WebError"/>.</exception>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskHandlerBase">
            <summary>
            Common base class for <see cref="T:NanoByte.Common.Tasks.ITaskHandler"/> implementations.
            </summary>
            <remarks>This class is thread-safe.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.#ctor">
            <summary>
            Registers a <see cref="E:NanoByte.Common.Log.Handler"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Dispose">
            <summary>
            Unregisters the <see cref="E:NanoByte.Common.Log.Handler"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.LogHandler(NanoByte.Common.LogSeverity,System.String,System.Exception)">
            <summary>
            Called for each <see cref="T:NanoByte.Common.Log"/> entry. Handles exception messages.
            </summary>
            <param name="severity">The type/severity of the entry.</param>
            <param name="message">The message of the entry.</param>
            <param name="exception">An optional exception associated with the entry.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.DisplayLogEntry(NanoByte.Common.LogSeverity,System.String)">
            <summary>
            Hook called when a <see cref="T:NanoByte.Common.Log"/> entry should be shown to the user.
            </summary>
            <param name="severity">The type/severity of the entry.</param>
            <param name="message">The message of the entry including.</param>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskHandlerBase.CancellationTokenSource">
            <summary>
            Used to signal the <see cref="P:NanoByte.Common.Tasks.TaskHandlerBase.CancellationToken"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskHandlerBase.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskHandlerBase.CredentialProvider">
            <summary>
            Used to ask the user or a keyring for <see cref="T:System.Net.NetworkCredential"/>s for specific <see cref="T:System.Uri"/>s; can be <c>null</c>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskHandlerBase.Verbosity">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskHandlerBase.IsInteractive">
            <summary>
            Indicates whether the user can provide input.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.RunTask(NanoByte.Common.Tasks.ITask)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Ask(System.String,System.Nullable{System.Boolean},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.AskInteractive(System.String,System.Boolean)">
            <summary>
            Asks the user a Yes/No/Cancel question.
            </summary>
            <param name="question">The question and comprehensive information to help the user make an informed decision.</param>
            <param name="defaultAnswer">The default answer to preselect.</param>
            <returns><c>true</c> if the user answered with 'Yes'; <c>false</c> if the user answered with 'No'.</returns>
            <exception cref="T:System.OperationCanceledException">Throw if the user answered with 'Cancel'.</exception>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Output(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Output``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Output``1(System.String,NanoByte.Common.Collections.NamedCollection{``0})">
            <inheritdoc />
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerBase.Error(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskHandlerExtensions">
            <summary>
            Extension methods for <see cref="T:NanoByte.Common.Tasks.ITaskHandler"/>
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerExtensions.RunTaskAndReturn``1(NanoByte.Common.Tasks.ITaskHandler,NanoByte.Common.Tasks.ResultTask{``0})">
            <summary>
            Runs an <see cref="T:NanoByte.Common.Tasks.IResultTask`1"/> and returns it's result once it has been completed.
            </summary>
            <param name="handler">The task handler.</param>
            <param name="task">The task to be run. (<see cref="M:NanoByte.Common.Tasks.ITask.Run(System.Threading.CancellationToken,NanoByte.Common.Net.ICredentialProvider,System.IProgress{NanoByte.Common.Tasks.TaskSnapshot})"/> or equivalent is called on it.)</param>
            <returns>The <see cref="P:NanoByte.Common.Tasks.IResultTask`1.Result"/>.</returns>
            <exception cref="T:System.OperationCanceledException">The user canceled the task.</exception>
            <exception cref="T:System.IO.IOException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.IOError"/>.</exception>
            <exception cref="T:System.Net.WebException">The task ended with <see cref="F:NanoByte.Common.Tasks.TaskState.WebError"/>.</exception>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerExtensions.OutputLow(NanoByte.Common.Tasks.ITaskHandler,System.String,System.String)">
            <summary>
            Displays multi-line text to the user unless <see cref="T:NanoByte.Common.Tasks.Verbosity"/> is <see cref="F:NanoByte.Common.Tasks.Verbosity.Batch"/>.
            </summary>
            <param name="handler">The underlying <see cref="T:NanoByte.Common.Tasks.ITaskHandler"/>.</param>
            <param name="title">A title for the message.</param>
            <param name="message">The string to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerExtensions.OutputLow``1(NanoByte.Common.Tasks.ITaskHandler,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Displays tabular data to the user unless <see cref="T:NanoByte.Common.Tasks.Verbosity"/> is <see cref="F:NanoByte.Common.Tasks.Verbosity.Batch"/>.
            </summary>
            <param name="handler">The underlying <see cref="T:NanoByte.Common.Tasks.ITaskHandler"/>.</param>
            <param name="title">A title for the data.</param>
            <param name="data">The data to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskHandlerExtensions.OutputLow``1(NanoByte.Common.Tasks.ITaskHandler,System.String,NanoByte.Common.Collections.NamedCollection{``0})">
            <summary>
            Displays tree-like data to the user unless <see cref="T:NanoByte.Common.Tasks.Verbosity"/> is <see cref="F:NanoByte.Common.Tasks.Verbosity.Batch"/>.
            </summary>
            <param name="handler">The underlying <see cref="T:NanoByte.Common.Tasks.ITaskHandler"/>.</param>
            <param name="title">A title for the data.INamed</param>
            <param name="data">The data to display.</param>
            <remarks>Implementations may close the UI as a side effect. Therefore this should be your last call on the handler.</remarks>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskSnapshot">
            <summary>
            Represents a progress snapshot of an <see cref="T:NanoByte.Common.Tasks.ITask"/>.
            </summary>
            <param name="State">The current State of the task.</param>
            <param name="UnitsByte"><c>true</c> if <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsProcessed"/> and <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsTotal"/> are measured in bytes; <c>false</c> if they are measured in generic units.</param>
            <param name="UnitsProcessed">The number of units that have been processed so far.</param>
            <param name="UnitsTotal">The total number of units that are to be processed; -1 for unknown.</param>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskSnapshot.#ctor(NanoByte.Common.Tasks.TaskState,System.Boolean,System.Int64,System.Int64)">
            <summary>
            Represents a progress snapshot of an <see cref="T:NanoByte.Common.Tasks.ITask"/>.
            </summary>
            <param name="State">The current State of the task.</param>
            <param name="UnitsByte"><c>true</c> if <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsProcessed"/> and <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsTotal"/> are measured in bytes; <c>false</c> if they are measured in generic units.</param>
            <param name="UnitsProcessed">The number of units that have been processed so far.</param>
            <param name="UnitsTotal">The total number of units that are to be processed; -1 for unknown.</param>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.State">
            <summary>The current State of the task.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsByte">
            <summary><c>true</c> if <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsProcessed"/> and <see cref="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsTotal"/> are measured in bytes; <c>false</c> if they are measured in generic units.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsProcessed">
            <summary>The number of units that have been processed so far.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.UnitsTotal">
            <summary>The total number of units that are to be processed; -1 for unknown.</summary>
        </member>
        <member name="P:NanoByte.Common.Tasks.TaskSnapshot.Value">
            <summary>
            The progress of the task as a value between 0 and 1; -1 when unknown.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Tasks.TaskSnapshot.ToString">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Tasks.TaskState">
            <summary>
            Represents different states a (usually Web- or IO-related) task can be in.
            </summary>
            <seealso cref="P:NanoByte.Common.Tasks.TaskSnapshot.State"/>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Ready">
            <summary>The task is ready to begin.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Started">
            <summary>The task has just been started.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Header">
            <summary>Handling the header.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Data">
            <summary>Handling the actual data.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Complete">
            <summary>The task has been completed successfully.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.WebError">
            <summary>An error occurred during the task.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.IOError">
            <summary>An error occurred while writing the file.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.TaskState.Canceled">
            <summary>The task was canceled by the user before completion.</summary>
        </member>
        <member name="T:NanoByte.Common.Tasks.Verbosity">
            <seealso cref="P:NanoByte.Common.Tasks.ITaskHandler.Verbosity"/>
        </member>
        <member name="F:NanoByte.Common.Tasks.Verbosity.Batch">
            <summary>Automatically answer questions with defaults when possible. Avoid non-essential output and questions.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.Verbosity.Normal">
            <summary>Normal interactive operation.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.Verbosity.Verbose">
            <summary>Display additional information for troubleshooting.</summary>
        </member>
        <member name="F:NanoByte.Common.Tasks.Verbosity.Debug">
            <summary>Display detailed information for debugging.</summary>
        </member>
        <member name="T:NanoByte.Common.Threading.ActionExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Action`1"/>
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.ActionExtensions.ToMarshalByRef``1(System.Action{``0})">
            <summary>
            Wraps a delegate so that it is marshalled by reference when passed via .NET Remoting.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.ActionExtensions.ActionByRef`1">
            <summary>
            A generic wrapper to pass a value by reference when using .NET remoting.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.CancellationGuard">
            <summary>
            Ensures that a block of code running on a background thread cleanly exits before a <see cref="M:System.Threading.CancellationTokenSource.Cancel"/> call completes.
            </summary>
            <remarks>Do not use this if <see cref="M:System.Threading.CancellationTokenSource.Cancel"/> is called from the same <see cref="T:System.Threading.SynchronizationContext"/> the guarded code is running under. This could lead to deadlocks.</remarks>
            <example>
            This class is best used in a using-block:
            <code>
            using (new CancellationGuard(cancellationToken))
            {
                // Your code
            }
            </code>
            </example>
        </member>
        <member name="M:NanoByte.Common.Threading.CancellationGuard.#ctor(System.Threading.CancellationToken)">
            <summary>
            Registers a callback for the <paramref name="cancellationToken"/> that blocks calls to <see cref="M:System.Threading.CancellationTokenSource.Cancel"/> until <see cref="M:NanoByte.Common.Threading.CancellationGuard.Dispose"/> has been called.
            </summary>
            <param name="cancellationToken">Used to signal cancellation requests.</param>
        </member>
        <member name="M:NanoByte.Common.Threading.CancellationGuard.#ctor(System.Threading.CancellationToken,System.TimeSpan)">
            <summary>
            Registers a callback for the <paramref name="cancellationToken"/> that blocks calls to <see cref="M:System.Threading.CancellationTokenSource.Cancel"/> until <see cref="M:NanoByte.Common.Threading.CancellationGuard.Dispose"/> has been called.
            </summary>
            <param name="cancellationToken">Used to signal cancellation requests.</param>
            <param name="timeout">A timespan after which the cancellation will be considered completed even if <see cref="M:NanoByte.Common.Threading.CancellationGuard.Dispose"/> has not been called yet.</param>
        </member>
        <member name="M:NanoByte.Common.Threading.CancellationGuard.Dispose">
            <summary>
            Releases the block and allows <see cref="M:System.Threading.CancellationTokenSource.Cancel"/> to complete.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.FuncExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Func`2"/>
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.FuncExtensions.ToMarshalByRef``2(System.Func{``0,``1})">
            <summary>
            Wraps a delegate so that it is marshalled by reference when passed via .NET Remoting.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.FuncExtensions.FuncByRef`2">
            <summary>
            A generic wrapper to pass a value by reference when using .NET remoting.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.JobQueue">
            <summary>
            Runs jobs on a single background thread that is started and stopped on demand.
            </summary>
            <param name="cancellationToken">Used to stop processing jobs.</param>
        </member>
        <member name="M:NanoByte.Common.Threading.JobQueue.#ctor(System.Threading.CancellationToken)">
            <summary>
            Runs jobs on a single background thread that is started and stopped on demand.
            </summary>
            <param name="cancellationToken">Used to stop processing jobs.</param>
        </member>
        <member name="M:NanoByte.Common.Threading.JobQueue.Enqueue(System.Action)">
            <summary>
            Adds a job to the work queue.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.MarshalNoTimeout">
            <summary>
            Derive from this class to enable remoting without timeouts. Keeps remoting object alive as long as process is running.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.MarshalNoTimeout.InitializeLifetimeService">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Threading.MutexLock">
            <summary>
            Provides a wrapper around <see cref="T:System.Threading.Mutex"/> that automatically acquires on creating and releases on <see cref="M:NanoByte.Common.Threading.MutexLock.Dispose"/>.
            </summary>
            <example>
            Instead of <c>lock (_object) { code(); }</c> for per-process locking use
            <c>using (new MutexLock("name") { code(); }</c> for inter-process locking.
            </example>
            <remarks>Automatically handles <see cref="T:System.Threading.AbandonedMutexException"/> with <see cref="M:NanoByte.Common.Log.Warn(System.String,System.Exception)"/>.</remarks>
        </member>
        <member name="M:NanoByte.Common.Threading.MutexLock.#ctor(System.String)">
            <summary>
            Acquires <see cref="T:System.Threading.Mutex"/> with <paramref name="name"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.MutexLock.Dispose">
            <summary>
            Releases the <see cref="T:System.Threading.Mutex"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.ResultRacer`1">
            <summary>
            Helper for racing multiple operations against each other, providing the result of the first one that finishes.
            </summary>
            <param name="cancellationToken">Used to cancel all pending operations.</param>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Threading.ResultRacer`1.#ctor(System.Threading.CancellationToken)">
            <summary>
            Helper for racing multiple operations against each other, providing the result of the first one that finishes.
            </summary>
            <param name="cancellationToken">Used to cancel all pending operations.</param>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Threading.ResultRacer`1.TrySetResult(System.Func{System.Threading.CancellationToken,`0})">
            <summary>
            Trys to set a result, racing against other calls of this method.
            </summary>
            <param name="factory">
            A function that takes a cancellation token (triggered when another call won the race) and returns a possible result.
            Return null to indicate that the function was unable to provide a result.
            Exceptions (except <see cref="T:System.OperationCanceledException"/>) are passed through to <see cref="M:NanoByte.Common.Threading.ResultRacer`1.GetResult"/> and <see cref="M:NanoByte.Common.Threading.ResultRacer`1.GetResultAsync"/>.
            </param>
        </member>
        <member name="M:NanoByte.Common.Threading.ResultRacer`1.TrySetResultAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})">
            <summary>
            Trys to set a result, racing against other calls of this method.
            </summary>
            <param name="factory">
            A function that takes a cancellation token (triggered when another call won the race) and returns a <see cref="T:System.Threading.Tasks.Task`1"/> returning a possible result.
            Return null to indicate that the function was unable to provide a result.
            Exceptions (except <see cref="T:System.OperationCanceledException"/>) are passed through to <see cref="M:NanoByte.Common.Threading.ResultRacer`1.GetResult"/> and <see cref="M:NanoByte.Common.Threading.ResultRacer`1.GetResultAsync"/>.
            </param>
        </member>
        <member name="M:NanoByte.Common.Threading.ResultRacer`1.GetResult">
            <summary>
            Blocks until at least one call to <see cref="M:NanoByte.Common.Threading.ResultRacer`1.TrySetResult(System.Func{System.Threading.CancellationToken,`0})"/> or <see cref="M:NanoByte.Common.Threading.ResultRacer`1.TrySetResultAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})"/> succeeded and returns its result.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.ResultRacer`1.GetResultAsync">
            <summary>
            Waits until at least one call to <see cref="M:NanoByte.Common.Threading.ResultRacer`1.TrySetResult(System.Func{System.Threading.CancellationToken,`0})"/> or <see cref="M:NanoByte.Common.Threading.ResultRacer`1.TrySetResultAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})"/> succeeded and returns its result.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.ResultRacer">
            <summary>
            Helper for racing multiple operations against each other, providing the result of the first one that finishes.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.ResultRacer.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,``1},System.Threading.CancellationToken)">
            <summary>
            Races an operation for multiple input elements against each other.
            </summary>
            <typeparam name="TInput">The type of the input elements.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="input">The input elements to try to produce outputs for.</param>
            <param name="factory">
            A function that takes an input element and a cancellation token (triggered when another call won the race) and returns a possible result.
            Return null to indicate that the function was unable to provide a result.
            Exceptions (except <see cref="T:System.OperationCanceledException"/>) are passed through to <see cref="M:NanoByte.Common.Threading.ResultRacer`1.GetResult"/> and <see cref="M:NanoByte.Common.Threading.ResultRacer`1.GetResultAsync"/>.
            </param>
            <param name="cancellationToken">Used to cancel all pending operations.</param>
        </member>
        <member name="M:NanoByte.Common.Threading.ResultRacer.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            Races an operation for multiple input elements against each other.
            </summary>
            <typeparam name="TInput">The type of the input elements.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="input">The input elements to try to produce outputs for.</param>
            <param name="factory">
            A function that takes an input element and a cancellation token (triggered when another call won the race) and returns a <see cref="T:System.Threading.Tasks.Task`1"/> returning a possible result.
            Return null to indicate that the function was unable to provide a result.
            Exceptions (except <see cref="T:System.OperationCanceledException"/>) are passed through to <see cref="M:NanoByte.Common.Threading.ResultRacer`1.GetResult"/> and <see cref="M:NanoByte.Common.Threading.ResultRacer`1.GetResultAsync"/>.
            </param>
            <param name="cancellationToken">Used to cancel all pending operations.</param>
        </member>
        <member name="M:NanoByte.Common.Threading.StressTest.Run(System.Action,System.Int32)">
            <summary>
            Runs the given <paramref name="action"/> many times in parallel.
            </summary>
            <exception cref="T:System.AggregateException">One or more of the executions of the action threw an exception.</exception>
        </member>
        <member name="T:NanoByte.Common.Threading.SynchronousProgress`1">
            <summary>
            Reports progress updates using callbacks/events. Performs the callbacks immediately on the same thread.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Threading.SynchronousProgress`1.ProgressChanged">
            <summary>
            Raised for each reported progress value.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.SynchronousProgress`1.#ctor(System.Action{`0})">
            <summary>
            Captures the current synchronization context for callbacks.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Threading.ThreadUtils">
            <summary>
            Provides helper methods for launching <see cref="T:System.Threading.Thread"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.ThreadUtils.StartAsync(System.Threading.ThreadStart,System.String)">
            <summary>
            Starts executing a delegate in a new thread suitable for WinForms.
            </summary>
            <param name="execute">The delegate to execute.</param>
            <param name="name">A short name for the new thread; can be <c>null</c>.</param>
            <returns>The newly launched thread.</returns>
        </member>
        <member name="M:NanoByte.Common.Threading.ThreadUtils.StartBackground(System.Threading.ThreadStart,System.String)">
            <summary>
            Starts executing a delegate in a new background thread (automatically terminated when application exits).
            </summary>
            <param name="execute">The delegate to execute.</param>
            <param name="name">A short name for the new thread; can be <c>null</c>.</param>
            <returns>The newly launched thread.</returns>
        </member>
        <member name="M:NanoByte.Common.Threading.ThreadUtils.RunSta(System.Action)">
            <summary>
            Executes a delegate in a new <see cref="F:System.Threading.ApartmentState.STA"/> thread. Blocks the caller until the execution completes.
            </summary>
            <param name="execute">The delegate to execute.</param>
            <remarks>This is useful for code that needs to be executed in a Single-Threaded Apartment (e.g. WinForms code) when the calling thread is not set up to handle COM.</remarks>
        </member>
        <member name="M:NanoByte.Common.Threading.ThreadUtils.RunSta``1(System.Func{``0})">
            <summary>
            Executes a delegate in a new <see cref="F:System.Threading.ApartmentState.STA"/> thread. Blocks the caller until the execution completes.
            </summary>
            <typeparam name="T">The type of the return value of <paramref name="execute"/>.</typeparam>
            <param name="execute">The delegate to execute.</param>
            <returns>The return value of <paramref name="execute"/></returns>
            <remarks>This is useful for code that needs to be executed in a Single-Threaded Apartment (e.g. WinForms code) when the calling thread is not set up to handle COM.</remarks>
        </member>
        <member name="M:NanoByte.Common.Threading.ThreadUtils.RunTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs an asynchronous task and blocks until it completes.
            Avoids deadlocks by ignoring the <see cref="T:System.Threading.SynchronizationContext"/>.
            Rethrows exceptions thrown inside task without <see cref="T:System.AggregateException"/> wrapper.
            </summary>
            <param name="action">Callback for starting the task.</param>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was cancelled.</exception>
        </member>
        <member name="M:NanoByte.Common.Threading.ThreadUtils.RunTask``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs an asynchronous task and blocks until it completes.
            Avoids deadlocks by ignoring the <see cref="T:System.Threading.SynchronizationContext"/>.
            Rethrows exceptions thrown inside task without <see cref="T:System.AggregateException"/> wrapper.
            </summary>
            <param name="action">Callback for starting the task.</param>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task was cancelled.</exception>
        </member>
        <member name="T:NanoByte.Common.Threading.WaitHandleExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.WaitHandle"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Threading.WaitHandleExtensions.WaitOne(System.Threading.WaitHandle,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Waits for the handle to be signalled.
            </summary>
            <param name="handle">The handle to wait for.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <param name="cancellationToken">Used to cancel waiting for the handle.</param>
            <exception cref="T:System.TimeoutException"><paramref name="millisecondsTimeout"/> elapsed without the handle being signalled.</exception>
            <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken"/> was signaled while waiting for the handle.</exception>
            <remarks>Automatically handles <see cref="T:System.Threading.AbandonedMutexException"/> with <see cref="M:NanoByte.Common.Log.Warn(System.String,System.Exception)"/>.</remarks>
        </member>
        <member name="T:NanoByte.Common.Threading.WaitTask">
            <summary>
            Waits for a <see cref="T:System.Threading.WaitHandle"/> to become available or the <see cref="T:System.Threading.CancellationToken"/> to be triggered.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="waitHandle">The <see cref="T:System.Threading.WaitHandle"/> to wait for; <c>null</c> to wait for <see cref="T:System.Threading.CancellationToken"/>.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait before raising <see cref="T:System.TimeoutException"/>; <see cref="F:System.Threading.Timeout.Infinite"/> to wait indefinitely.</param>
        </member>
        <member name="M:NanoByte.Common.Threading.WaitTask.#ctor(System.String,System.Threading.WaitHandle,System.Int32)">
            <summary>
            Waits for a <see cref="T:System.Threading.WaitHandle"/> to become available or the <see cref="T:System.Threading.CancellationToken"/> to be triggered.
            </summary>
            <param name="name">A name describing the task in human-readable form.</param>
            <param name="waitHandle">The <see cref="T:System.Threading.WaitHandle"/> to wait for; <c>null</c> to wait for <see cref="T:System.Threading.CancellationToken"/>.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait before raising <see cref="T:System.TimeoutException"/>; <see cref="F:System.Threading.Timeout.Infinite"/> to wait indefinitely.</param>
        </member>
        <member name="F:NanoByte.Common.Threading.WaitTask._waitHandle">
            <summary>The <see cref="T:System.Threading.WaitHandle"/> to wait for; <c>null</c> to wait for <see cref="T:System.Threading.CancellationToken"/>.</summary>
        </member>
        <member name="F:NanoByte.Common.Threading.WaitTask._millisecondsTimeout">
            <summary>The number of milliseconds to wait before raising <see cref="T:System.TimeoutException"/>; <see cref="F:System.Threading.Timeout.Infinite"/> to wait indefinitely</summary>
        </member>
        <member name="P:NanoByte.Common.Threading.WaitTask.Name">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Threading.WaitTask.PreventIdle">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Threading.WaitTask.UnitsByte">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Threading.WaitTask.Execute">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.TimedLogEvent">
            <summary>
            Structure that allows you to log timed execution blocks.
            </summary>
            <example>
              <code>using(new LogEvent("Message")) {}</code>
            </example>
        </member>
        <member name="M:NanoByte.Common.TimedLogEvent.#ctor(System.String)">
            <summary>
            Starts a new log event.
            </summary>
            <param name="entry">The entry for the log file. Elapsed time will automatically be appended.</param>
        </member>
        <member name="M:NanoByte.Common.TimedLogEvent.Dispose">
            <summary>
            Ends the log event.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.AddToCollection`1">
            <summary>
            An undo command that adds an element to a collection.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be added to <paramref name="collection"/>.</param>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.AddToCollection`1.#ctor(System.Collections.Generic.ICollection{`0},`0)">
            <summary>
            An undo command that adds an element to a collection.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be added to <paramref name="collection"/>.</param>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.AddToCollection`1.OnExecute">
            <summary>
            Adds the element to the collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.AddToCollection`1.OnUndo">
            <summary>
            Removes the element from the collection.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.AddToCollection">
            <summary>
            Factory methods for <see cref="T:NanoByte.Common.Undo.AddToCollection`1"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.AddToCollection.For``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Creates a new add to collection command.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be added to <paramref name="collection"/>.</param>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="T:NanoByte.Common.Undo.CollectionCommand`1">
            <summary>
            An undo command that adds or removes an element from a collection.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be added or removed from <paramref name="collection"/>.</param>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.CollectionCommand`1.#ctor(System.Collections.Generic.ICollection{`0},`0)">
            <summary>
            An undo command that adds or removes an element from a collection.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be added or removed from <paramref name="collection"/>.</param>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="F:NanoByte.Common.Undo.CollectionCommand`1.Collection">
            <summary>
            The collection to be modified.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Undo.CollectionCommand`1.Element">
            <summary>
            The element to be added or removed from <see cref="F:NanoByte.Common.Undo.CollectionCommand`1.Collection"/>.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CollectionCommand`1.Value">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Undo.CommandCollector">
            <summary>
            Executes <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s and collects them into a <see cref="T:NanoByte.Common.Undo.CompositeCommand"/> allowing a combined undo later on.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandCollector.Path">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandCollector.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <summary>
            Store an <see cref="T:NanoByte.Common.Undo.IUndoCommand"/> for later execution.
            </summary>
            <param name="command">The command to be stored.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandCollector.BuildComposite">
            <summary>
            Creates a new <see cref="T:NanoByte.Common.Undo.CompositeCommand"/> containing all <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s collected so far.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.CommandManager`1">
            <summary>
            Executes <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s for editing a specific object and allows undo/redo operations.
            </summary>
            <param name="target">The object being edited.</param>
            <param name="path">The path of the file the <paramref name="target"/> was loaded from. <c>null</c> if none.</param>
            <typeparam name="T">The type of the object being edited.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.#ctor(`0,System.String)">
            <summary>
            Executes <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s for editing a specific object and allows undo/redo operations.
            </summary>
            <param name="target">The object being edited.</param>
            <param name="path">The path of the file the <paramref name="target"/> was loaded from. <c>null</c> if none.</param>
            <typeparam name="T">The type of the object being edited.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.Target">
            <inheritdoc/>
        </member>
        <member name="E:NanoByte.Common.Undo.CommandManager`1.TargetUpdated">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.Path">
            <summary>
            The path of the file the <see cref="P:NanoByte.Common.Undo.CommandManager`1.Target"/> was loaded from. <c>null</c> if none.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.UndoEnabled">
            <inheritdoc/>
        </member>
        <member name="E:NanoByte.Common.Undo.CommandManager`1.UndoEnabledChanged">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Undo.CommandManager`1.RedoEnabled">
            <inheritdoc/>
        </member>
        <member name="E:NanoByte.Common.Undo.CommandManager`1.RedoEnabledChanged">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Undo">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Redo">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.ClearUndo">
            <summary>
            Clears the undo/redo stacks.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Save(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager`1.Load(System.String)">
            <summary>
            Loads an object from an XML file.
            </summary>
            <param name="path">The file to load from.</param>
            <returns>An <see cref="T:NanoByte.Common.Undo.ICommandManager`1"/> containing the loaded object.</returns>
            <exception cref="T:System.IO.IOException">A problem occurs while reading the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Read access to the file is not permitted.</exception>
            <exception cref="T:System.IO.InvalidDataException">A problem occurs while deserializing the XML data.</exception>
        </member>
        <member name="T:NanoByte.Common.Undo.CommandManager">
            <summary>
            Factory methods for <see cref="T:NanoByte.Common.Undo.ICommandManager`1"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.CommandManager.For``1(``0,System.String)">
            <summary>
            Creates a new command manager.
            </summary>
            <param name="target">The object being edited.</param>
            <param name="path">The path of the file the <paramref name="target"/> was loaded from. <c>null</c> if none.</param>
        </member>
        <member name="T:NanoByte.Common.Undo.CompositeCommand">
            <summary>
            Combines multiple <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s into a single atomic transaction.
            </summary>
            <param name="commands">The commands to be contained inside the transaction.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.CompositeCommand.#ctor(NanoByte.Common.Undo.IUndoCommand[])">
            <summary>
            Combines multiple <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s into a single atomic transaction.
            </summary>
            <param name="commands">The commands to be contained inside the transaction.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.CompositeCommand.OnExecute">
            <summary>
            Executes all the contained <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s in order.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.CompositeCommand.OnUndo">
            <summary>
            Undoes all the contained <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s in reverse order.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.ConcurrentCommandExecutor">
            <summary>
            Decorator for <see cref="T:NanoByte.Common.Undo.ICommandExecutor"/> that adds locking for thread-safety.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.ConcurrentCommandExecutor.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <inheritdoc/>
        </member>
        <member name="P:NanoByte.Common.Undo.ConcurrentCommandExecutor.Path">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Undo.FirstExecuteCommand">
            <summary>
            An undo command that does something different on the first call to <see cref="M:NanoByte.Common.Undo.FirstExecuteCommand.Execute"/> than on subsequent redo calls.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.Execute">
            <summary>
            Performs the desired action.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.OnFirstExecute">
            <summary>
            Template method to perform the desired action the first time.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.OnRedo">
            <summary>
            Template method to perform the desired action again.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.Undo">
            <summary>
            Undoes the changes made by <see cref="M:NanoByte.Common.Undo.FirstExecuteCommand.Execute"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.FirstExecuteCommand.OnUndo">
            <summary>
            Template method to undo the changes made by <see cref="M:NanoByte.Common.Undo.FirstExecuteCommand.OnFirstExecute"/> or <see cref="M:NanoByte.Common.Undo.FirstExecuteCommand.OnRedo"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.ICommandExecutor">
            <summary>
            Executes <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.ICommandExecutor.Path">
            <summary>
            The path of the file the data structure being modified was loaded from. <c>null</c> if none.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.ICommandExecutor.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <summary>
            Executes an <see cref="T:NanoByte.Common.Undo.IUndoCommand"/> and stores it for later undo-operations.
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="T:NanoByte.Common.Undo.ICommandManager`1">
            <summary>
            Executes <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s for editing a specific object and allows undo/redo operations.
            </summary>
            <typeparam name="T">The type of the object being edited.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Undo.ICommandManager`1.Target">
            <summary>
            The object being edited.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Undo.ICommandManager`1.TargetUpdated">
            <summary>
            Is raised after <see cref="P:NanoByte.Common.Undo.ICommandManager`1.Target"/> has been updated.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.ICommandManager`1.UndoEnabled">
            <summary>
            Indicates whether there currently are operations that can be <see cref="M:NanoByte.Common.Undo.ICommandManager`1.Undo"/>ne.
            </summary>
            <remarks>This can also be used as an indicator for unsaved changes.</remarks>
        </member>
        <member name="E:NanoByte.Common.Undo.ICommandManager`1.UndoEnabledChanged">
            <summary>
            Is raised when the value of <see cref="P:NanoByte.Common.Undo.ICommandManager`1.UndoEnabled"/> has changed.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.ICommandManager`1.RedoEnabled">
            <summary>
            Indicates whether there currently are operations that can be <see cref="M:NanoByte.Common.Undo.ICommandManager`1.Redo"/>ne.
            </summary>
        </member>
        <member name="E:NanoByte.Common.Undo.ICommandManager`1.RedoEnabledChanged">
            <summary>
            Is raised when the value of <see cref="P:NanoByte.Common.Undo.ICommandManager`1.RedoEnabled"/> has changed.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.ICommandManager`1.Undo">
            <summary>
            Undoes the last action performed by <see cref="M:NanoByte.Common.Undo.ICommandExecutor.Execute(NanoByte.Common.Undo.IUndoCommand)"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.ICommandManager`1.Redo">
            <summary>
            Redoes the last action undone by <see cref="M:NanoByte.Common.Undo.ICommandManager`1.Undo"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.ICommandManager`1.Save(System.String)">
            <summary>
            Saves the <see cref="P:NanoByte.Common.Undo.ICommandManager`1.Target"/> to an XML file
            </summary>
            <param name="path">The file to save to.</param>
            <exception cref="T:System.IO.IOException">A problem occurs while writing the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Write access to the file is not permitted.</exception>
        </member>
        <member name="T:NanoByte.Common.Undo.IUndoCommand">
            <summary>
            A executable command with an undo function.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.IUndoCommand.Execute">
            <summary>
            Performs the desired action.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.IUndoCommand.Undo">
            <summary>
            Undoes changes made by <see cref="M:NanoByte.Common.Undo.IUndoCommand.Execute"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.IValueCommand">
            <summary>
            A command that exposes the value it will set.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.PreExecutedCommand">
            <summary>
            An undo command that does nothing on the first <see cref="M:NanoByte.Common.Undo.IUndoCommand.Execute"/> call, because the action was already performed beforehand
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.PreExecutedCommand.OnFirstExecute">
            <summary>
            Do nothing on first execute.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.PreExecutedCompositeCommand">
            <summary>
            Combines multiple already executed <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s into a single atomic transaction.
            </summary>
            <param name="commands">The commands to be contained inside the transaction.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.PreExecutedCompositeCommand.#ctor(System.Collections.Generic.IEnumerable{NanoByte.Common.Undo.IUndoCommand})">
            <summary>
            Combines multiple already executed <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s into a single atomic transaction.
            </summary>
            <param name="commands">The commands to be contained inside the transaction.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.PreExecutedCompositeCommand.OnRedo">
            <summary>
            Executes all the contained <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s in order.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.PreExecutedCompositeCommand.OnUndo">
            <summary>
            Undoes all the contained <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s in reverse order.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.RemoveFromCollection`1">
            <summary>
            An undo command that removes an element from a collection.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be removed from <paramref name="collection"/>.</param>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.RemoveFromCollection`1.#ctor(System.Collections.Generic.ICollection{`0},`0)">
            <summary>
            An undo command that removes an element from a collection.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be removed from <paramref name="collection"/>.</param>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.RemoveFromCollection`1.OnExecute">
            <summary>
            Removes the element from the collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.RemoveFromCollection`1.OnUndo">
            <summary>
            Adds the element to the collection.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.RemoveFromCollection">
            <summary>
            Factory methods for <see cref="T:NanoByte.Common.Undo.RemoveFromCollection`1"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.RemoveFromCollection.For``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Creates a new remove from collection command.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The element to be removed from <paramref name="collection"/>.</param>
            <typeparam name="T">The type of elements the collection contains.</typeparam>
        </member>
        <member name="T:NanoByte.Common.Undo.ReplaceInList`1">
            <summary>
            An undo command that replaces an element in a list with a new one.
            </summary>
            <param name="list">The collection to be modified.</param>
            <param name="oldElement">The element to be removed from <paramref name="list"/>.</param>
            <param name="newElement">The element to be added to <paramref name="list"/>.</param>
            <typeparam name="T">The type of elements the list contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.ReplaceInList`1.#ctor(System.Collections.Generic.IList{`0},`0,`0)">
            <summary>
            An undo command that replaces an element in a list with a new one.
            </summary>
            <param name="list">The collection to be modified.</param>
            <param name="oldElement">The element to be removed from <paramref name="list"/>.</param>
            <param name="newElement">The element to be added to <paramref name="list"/>.</param>
            <typeparam name="T">The type of elements the list contains.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Undo.ReplaceInList`1.Value">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Undo.ReplaceInList">
            <summary>
            Factory methods for <see cref="T:NanoByte.Common.Undo.ReplaceInList`1"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.ReplaceInList.For``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Creates a new replace in list command.
            </summary>
            <param name="list">The collection to be modified.</param>
            <param name="oldElement">The element to be removed from <paramref name="list"/>.</param>
            <param name="newElement">The element to be added to <paramref name="list"/>.</param>
            <typeparam name="T">The type of elements the list contains.</typeparam>
        </member>
        <member name="T:NanoByte.Common.Undo.SetInList`1">
            <summary>
            Replaces an entry in a <see cref="T:System.Collections.Generic.IList`1"/> with a new one.
            </summary>
            <param name="list">The list to be modified.</param>
            <param name="oldElement">The old element currently in the <paramref name="list"/> to be replaced.</param>
            <param name="newElement">The new element to take the place of <paramref name="oldElement"/> in the <paramref name="list"/>.</param>
            <typeparam name="T">The type of elements the list contains.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.SetInList`1.#ctor(System.Collections.Generic.IList{`0},`0,`0)">
            <summary>
            Replaces an entry in a <see cref="T:System.Collections.Generic.IList`1"/> with a new one.
            </summary>
            <param name="list">The list to be modified.</param>
            <param name="oldElement">The old element currently in the <paramref name="list"/> to be replaced.</param>
            <param name="newElement">The new element to take the place of <paramref name="oldElement"/> in the <paramref name="list"/>.</param>
            <typeparam name="T">The type of elements the list contains.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Undo.SetInList`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.SetInList`1.OnExecute">
            <summary>
            Sets the new entry in the list.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetInList`1.OnUndo">
            <summary>
            Restores the old entry in the list.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.SetInList">
            <summary>
            Factory methods for <see cref="T:NanoByte.Common.Undo.SetInList`1"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetInList.For``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Creates a new set in list command.
            </summary>
            <param name="list">The list to be modified.</param>
            <param name="oldElement">The old element currently in the <paramref name="list"/> to be replaced.</param>
            <param name="newElement">The new element to take the place of <paramref name="oldElement"/> in the <paramref name="list"/>.</param>
            <typeparam name="T">The type of elements the list contains.</typeparam>
        </member>
        <member name="T:NanoByte.Common.Undo.SetLocalizableString">
            <summary>
            An undo command that sets a <see cref="T:NanoByte.Common.Collections.LocalizableString"/> in a <see cref="T:NanoByte.Common.Collections.LocalizableStringCollection"/>.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The entry to be set in the <paramref name="collection"/>.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.SetLocalizableString.#ctor(NanoByte.Common.Collections.LocalizableStringCollection,NanoByte.Common.Collections.LocalizableString)">
            <summary>
            An undo command that sets a <see cref="T:NanoByte.Common.Collections.LocalizableString"/> in a <see cref="T:NanoByte.Common.Collections.LocalizableStringCollection"/>.
            </summary>
            <param name="collection">The collection to be modified.</param>
            <param name="element">The entry to be set in the <paramref name="collection"/>.</param>
        </member>
        <member name="F:NanoByte.Common.Undo.SetLocalizableString._collection">
            <summary>
            The collection to be modified.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Undo.SetLocalizableString._entry">
            <summary>
            The element to be added or removed from <see cref="F:NanoByte.Common.Undo.SetLocalizableString._collection"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetLocalizableString.OnExecute">
            <summary>
            Sets the entry in the collection.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetLocalizableString.OnUndo">
            <summary>
            Restores the original entry in the collection.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.SetValueCommand`1">
            <summary>
            An undo command that uses a delegates for getting and setting values from a backing model.
            </summary>
            <param name="pointer">The object controlling how to read/write the value to be modified.</param>
            <param name="newValue">The new value to be set.</param>
            <typeparam name="T">The type of the value to set.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand`1.#ctor(NanoByte.Common.PropertyPointer{`0},`0)">
            <summary>
            An undo command that uses a delegates for getting and setting values from a backing model.
            </summary>
            <param name="pointer">The object controlling how to read/write the value to be modified.</param>
            <param name="newValue">The new value to be set.</param>
            <typeparam name="T">The type of the value to set.</typeparam>
        </member>
        <member name="P:NanoByte.Common.Undo.SetValueCommand`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand`1.OnExecute">
            <summary>
            Sets the new value in the model.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand`1.OnUndo">
            <summary>
            Restores the old value in the model.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.SetValueCommand">
            <summary>
            Factory methods for <see cref="T:NanoByte.Common.Undo.SetValueCommand`1"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand.For``1(NanoByte.Common.PropertyPointer{``0},``0)">
            <summary>
            Creates a new command for setting a value.
            </summary>
            <param name="pointer">The object controlling how to read/write the value to be modified.</param>
            <param name="newValue">The new value to be set.</param>
            <typeparam name="T">The type of the value to set.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand.For``1(System.Func{``0},System.Action{``0},``0)">
            <summary>
            Creates a new command for setting a value.
            </summary>
            <param name="getValue">A delegate that returns the current value.</param>
            <param name="setValue">A delegate that sets the value.</param>
            <param name="newValue">The new value to be set.</param>
            <typeparam name="T">The type of the value to set.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand.ForNullable``1(System.Func{``0},System.Action{``0},``0)">
            <summary>
            Creates a new command for setting a nullable value.
            </summary>
            <param name="getValue">A delegate that returns the current value.</param>
            <param name="setValue">A delegate that sets the value.</param>
            <param name="newValue">The new value to be set.</param>
            <typeparam name="T">The type of the value to set.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand.For``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Creates a new command for setting a value.
            </summary>
            <typeparam name="T">The type of value the property contains.</typeparam>
            <param name="expression">An expression pointing to the property.</param>
            <param name="newValue">The new value to be set.</param>
        </member>
        <member name="M:NanoByte.Common.Undo.SetValueCommand.ForNullable``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Creates a new command for setting a nullable value.
            </summary>
            <typeparam name="T">The type of value the property contains.</typeparam>
            <param name="expression">An expression pointing to the property.</param>
            <param name="newValue">The new value to be set.</param>
        </member>
        <member name="T:NanoByte.Common.Undo.SimpleCommand">
            <summary>
            An undo command that automatically tracks when <see cref="M:NanoByte.Common.Undo.SimpleCommand.Execute"/> and <see cref="M:NanoByte.Common.Undo.SimpleCommand.Undo"/> can be called.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommand.Execute">
            <summary>
            Performs the desired action.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommand.OnExecute">
            <summary>
            Template method to perform the desired action.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommand.Undo">
            <summary>
            Undoes the changes made by <see cref="M:NanoByte.Common.Undo.SimpleCommand.Execute"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommand.OnUndo">
            <summary>
            Template method to undo the changes made by <see cref="M:NanoByte.Common.Undo.SimpleCommand.OnExecute"/>.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Undo.SimpleCommandExecutor">
            <summary>
            Executes <see cref="T:NanoByte.Common.Undo.IUndoCommand"/>s without any additional handling.
            </summary>
        </member>
        <member name="P:NanoByte.Common.Undo.SimpleCommandExecutor.Path">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Undo.SimpleCommandExecutor.Execute(NanoByte.Common.Undo.IUndoCommand)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.UnixTime">
            <summary>
            Represents a point in time as the number of seconds since the Unix epoch (Unix timestamp).
            </summary>
            <param name="Seconds">The number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970).</param>
        </member>
        <member name="M:NanoByte.Common.UnixTime.#ctor(System.Int64)">
            <summary>
            Represents a point in time as the number of seconds since the Unix epoch (Unix timestamp).
            </summary>
            <param name="Seconds">The number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970).</param>
        </member>
        <member name="P:NanoByte.Common.UnixTime.Seconds">
            <summary>The number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970).</summary>
        </member>
        <member name="M:NanoByte.Common.UnixTime.op_Implicit(System.Int64)~NanoByte.Common.UnixTime">
            <summary>
            Converts a number of <paramref name="seconds"/> to a Unix timestamp.
            </summary>
        </member>
        <member name="M:NanoByte.Common.UnixTime.op_Implicit(NanoByte.Common.UnixTime)~System.Int64">
            <summary>
            Converts a Unix <paramref name="timestamp"/> to a number of seconds.
            </summary>
        </member>
        <member name="M:NanoByte.Common.UnixTime.op_Implicit(System.DateTime)~NanoByte.Common.UnixTime">
            <summary>
            Converts a <paramref name="dateTime"/> to a Unix timestamp.
            </summary>
        </member>
        <member name="M:NanoByte.Common.UnixTime.op_Implicit(NanoByte.Common.UnixTime)~System.DateTime">
            <summary>
            Converts a Unix <paramref name="timestamp"/> to a <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.UnixTime.op_Implicit(System.DateTimeOffset)~NanoByte.Common.UnixTime">
            <summary>
            Converts a number of <paramref name="dateTime"/> to a Unix timestamp.
            </summary>
        </member>
        <member name="M:NanoByte.Common.UnixTime.op_Implicit(NanoByte.Common.UnixTime)~System.DateTimeOffset">
            <summary>
            Converts a Unix <paramref name="timestamp"/> to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:NanoByte.Common.UnixTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.UnixTime.CompareTo(NanoByte.Common.UnixTime)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.UnixTime.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.UnixTime.ToString">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.UpdateUtils">
            <summary>
            Provides neat little code-shortcuts for updating properties.
            </summary>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To``2(``0,System.Func{``0,``1})">
            <summary>
            Immediately invokes the specified <paramref name="action"/> with the <paramref name="value"/>. Useful for applying null-coalescing operator.
            </summary>
            <param name="value">The value.</param>
            <param name="action">The action to invoke.</param>
            <example>
            This allows you to write:
            <code>
            Uri? uri = nullableString?.To(x => new Uri(x);
            </code>
            Instead of:
            <code>
            Uri? uri = nullableString == null ? null : new Uri(nullableString);
            </code>
            </example>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To``1(``0,``0@,System.Boolean@)">
            <summary>
            Updates a value and sets a boolean flag to <c>true</c> if the original value actually changed.
            </summary>
            <typeparam name="T">The type of data to update.</typeparam>
            <param name="value">The new value.</param>
            <param name="original">The original value to update.</param>
            <param name="updated">Gets set to <c>true</c> if value is different from original.</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To``1(``0,``0@,System.Boolean@,System.Boolean@)">
            <summary>
            Updates a value and sets two boolean flags to <c>true</c> if the original value actually changed.
            </summary>
            <typeparam name="T">The type of data to update.</typeparam>
            <param name="value">The new value.</param>
            <param name="original">The original value to update.</param>
            <param name="updated1">Gets set to <c>true</c> if value is different from original.</param>
            <param name="updated2">Gets set to <c>true</c> if value is different from original.</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To(System.String,System.String@,System.Boolean@)">
            <summary>
            Updates a value and sets a boolean flag to <c>true</c> if the original value actually changed
            </summary>
            <param name="value">The new value</param>
            <param name="original">The original value to update</param>
            <param name="updated">Gets set to <c>true</c> if value is different from original</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To(System.String,System.String@,System.Boolean@,System.Boolean@)">
            <summary>
            Updates a value and sets two boolean flags to <c>true</c> if the original value actually changed
            </summary>
            <param name="value">The new value</param>
            <param name="original">The original value to update</param>
            <param name="updated1">Gets set to <c>true</c> if value is different from original</param>
            <param name="updated2">Gets set to <c>true</c> if value is different from original</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To``1(``0,``0@,System.Action)">
            <summary>
            Updates a value and calls back a delegate if the original value actually changed.
            </summary>
            <typeparam name="T">The type of data to update.</typeparam>
            <param name="value">The new value.</param>
            <param name="original">The original value to update.</param>
            <param name="updated">Gets called if value is different from original.</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.To(System.String,System.String@,System.Action)">
            <summary>
            Updates a value and calls back a delegate if the original value actually changed.
            </summary>
            <param name="value">The new value.</param>
            <param name="original">The original value to update.</param>
            <param name="updated">Gets called if value is different from original.</param>
        </member>
        <member name="M:NanoByte.Common.UpdateUtils.Swap``1(``0@,``0@)">
            <summary>
            Swaps the content of two fields.
            </summary>
            <typeparam name="T">The type of objects to swap.</typeparam>
            <param name="value1">The first field which will afterwards carry the content of <paramref name="value2"/>.</param>
            <param name="value2">The first field which will afterwards carry the content of <paramref name="value1"/>.</param>
        </member>
        <member name="T:NanoByte.Common.Values.ConversionUtils">
            <summary>
            Helpers for working with type converters.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.ConversionUtils.ConvertFromString``1(System.String)">
            <summary>
            Uses the type converter for <typeparamref name="TType"/> (set with <see cref="T:System.ComponentModel.TypeConverterAttribute"/>) to parse a string.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.ConversionUtils.ConvertToString``1(``0)">
            <summary>
            Uses the type converter for <typeparamref name="TType"/> (set with <see cref="T:System.ComponentModel.TypeConverterAttribute"/>) to generate a string.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Values.Design.EnumDescriptionConverter`1">
            <summary>
            Type converter for <see cref="T:System.Enum"/>s annotated with <see cref="T:System.ComponentModel.DescriptionAttribute"/>s.
            </summary>
            <typeparam name="T">The type the converter is used for.</typeparam>
            <example>
              Add this attribute to the <see cref="T:System.Enum"/>:
              <code>[TypeConverter(typeof(DescriptionEnumConverter&lt;NameOfEnum&gt;))]</code>
            </example>
            <remarks><see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> is used as the case-insensitive string representation (falls back to element name).</remarks>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumDescriptionConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumDescriptionConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumDescriptionConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Values.Design.EnumXmlConverter`1">
            <summary>
            Type converter for <see cref="T:System.Enum"/>s annotated with <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/>s.
            </summary>
            <typeparam name="T">The type the converter is used for.</typeparam>
            <example>
              Add this attribute to the <see cref="T:System.Enum"/>:
              <code>[TypeConverter(typeof(XmlEnumConverter&lt;NameOfEnum&gt;))]</code>
            </example>
            <remarks><see cref="P:System.Xml.Serialization.XmlEnumAttribute.Name"/> is used as the case-insensitive string representation (falls back to element name).</remarks>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumXmlConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumXmlConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.EnumXmlConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Values.Design.StringConstructorConverter`1">
            <summary>
            Generic type converter for classes that have a constructor with a single string argument and a corresponding <see cref="M:System.Object.ToString"/> implementation.
            </summary>
            <typeparam name="T">The type the converter is used for.</typeparam>
            <example>
              Add this attribute to the type:
              <code>[TypeConverter(typeof(StringConstructorConverter&lt;NameOfType&gt;))]</code>
            </example>
        </member>
        <member name="M:NanoByte.Common.Values.Design.StringConstructorConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.StringConstructorConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.StringConstructorConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:NanoByte.Common.Values.Design.ValueTypeConverter`1">
            <summary>
            Abstract base-class for easily creating a <see cref="T:System.ComponentModel.TypeConverter"/> for a struct (value type).
            </summary>
            <typeparam name="T">The struct to create the <see cref="T:System.ComponentModel.TypeConverter"/> for.</typeparam>
            <remarks>Providing a <see cref="T:System.ComponentModel.TypeConverter"/> for a struct improves the runtime experience with PropertyGrids.</remarks>
            <example>
              Add this attribute to the struct:
              <code>[TypeConverter(typeof(ClassDerivedFromThisOne))]</code>
            </example>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetElementSeparator(System.Globalization.CultureInfo)">
            <summary>The separator to place between individual elements.</summary>
        </member>
        <member name="P:NanoByte.Common.Values.Design.ValueTypeConverter`1.NoArguments">
            <summary>The number of arguments the constructor of <typeparamref name="T"/> has.</summary>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetConstructor">
            <returns>The constructor used to create new instances of <typeparamref name="T"/> (deserialization).</returns>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetArguments(`0)">
            <returns>The arguments for the constructor of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetValues(`0,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
            <returns>The elements of <typeparamref name="T"/> converted to strings.</returns>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetObject(System.String[],System.Globalization.CultureInfo)">
            <returns>A new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NanoByte.Common.Values.Design.ValueTypeConverter`1.GetObject(System.Collections.IDictionary)">
            <returns>A new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:NanoByte.Common.Values.EnumExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Enum"/>s.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.EnumExtensions.HasFlag(System.Enum,System.Enum)">
            <summary>
            Checks whether a flag is set.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.EnumExtensions.HasFlag(System.UInt16,System.UInt16)">
            <summary>
            Checks whether a flag is set.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.EnumExtensions.HasFlag(System.Int32,System.Int32)">
            <summary>
            Checks whether a flag is set.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.EnumExtensions.GetEnumAttribute``1(System.Enum)">
            <summary>
            Gets the first <typeparamref name="TAttribute"/> attribute set on the <paramref name="target"/> enum value.
            </summary>
        </member>
        <member name="T:NanoByte.Common.Values.KeyEqualityComparer`2">
            <summary>
            Specifies the equality of objects based on the equality of a key extracted from the objects.
            </summary>
            <param name="keySelector">A function mapping objects to their respective equality keys.</param>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <typeparam name="TKey">The type of the key to use to determine equality.</typeparam>
        </member>
        <member name="M:NanoByte.Common.Values.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Specifies the equality of objects based on the equality of a key extracted from the objects.
            </summary>
            <param name="keySelector">A function mapping objects to their respective equality keys.</param>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <typeparam name="TKey">The type of the key to use to determine equality.</typeparam>
        </member>
        <member name="T:NanoByte.Common.Values.Languages">
            <summary>
            Provides <see cref="T:System.Globalization.CultureInfo"/>s.
            </summary>
        </member>
        <member name="F:NanoByte.Common.Values.Languages.AllKnown">
            <summary>
            All known languages in alphabetical order.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.Languages.FromString(System.String)">
            <summary>
            Creates a <see cref="T:System.Globalization.CultureInfo"/> from a ISO language code either in Windows (e.g. en-US) or Unix (e.g. en_US) format.
            </summary>
        </member>
        <member name="M:NanoByte.Common.Values.Languages.SetUI(System.Globalization.CultureInfo)">
            <summary>
            Changes the UI language used by this process. Should be called right after startup.
            </summary>
            <remarks>This sets <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> for the current and all future threads.</remarks>
        </member>
    </members>
</doc>
